// mem-obj-lib.l1com
//
//	memory object demo
//
(main func)
    (set int64 1 zero 0)
	(set int64 1 one 1)
	(set int64 1 memaddr 0)
	(set int64 1 memind 0)
	(set int64 1 memsize 1)
	(set int64 1 variables 3)
	(set int64 1 a 23)
	(set int64 1 b 42)
	(set double 1 c 3.1415)
	(set int64 1 aread)
	(set int64 1 bread)
	(set double 1 cread)
	(set int64 1 read 0)
	(set int64 1 write 0)
	(set int64 1 ret 0)
	(set int64 1 f 0)
	(set string s meminitstr "ERROR can't init memory")
	(set string s memerrstr "ERROR can't allocate memory!")
	(set string s saveerrstr "ERROR can't save to memory object!")
	(set string s writing "writing: ")
	(set string s reading "reading: ")
	#include <mem-obj-lib-types.l1h>
	(zero one :mem_obj_init call)
	(ret stpopi)
	(loadreg)
	(((ret zero !=) f =) f if)
		// ERROR can't allocate memory
		(6 meminitstr 0 0 intr0)
		(7 0 0 0 intr0)
		(255 one 0 0 intr0)
	(endif)
	// allocate memory for the 3 variables
	(variables memsize :alloc_obj_memobj call)
	(memaddr stpopi)
	(loadreg)
	(((memaddr zero <) f =) f if)
		// ERROR can't allocate memory
		(6 memerrstr 0 0 intr0)
		(7 0 0 0 intr0)
		(255 one 0 0 intr0)
	(endif)
	// write to memory obj array
	(4 memaddr 0 0 intr0)
	(7 0 0 0 intr0)
	// store variables a, b and c in memory object
	// note the variable types are set by "int64obj" and "doubleobj" !!!
	(c doubleobj b int64obj a int64obj variables zero memaddr :save_obj_memobj call)
	(ret stpopi)
	(((ret zero !=) f =) f if)
		// ERROR can't allocate memory
		(6 saveerrstr 0 0 intr0)
		(7 0 0 0 intr0)
		(255 one 0 0 intr0)
	(endif)
	(reset-reg)
	(variables zero memaddr :load_obj_memobj call)
	// pop variables from stack
	(ret stpopi)
	(cread stpopd)
	(bread stpopi)
	(aread stpopi)
	// print variables
	(4 aread 0 0 intr0)
	(7 0 0 0 intr0)
	(4 bread 0 0 intr0)
	(7 0 0 0 intr0)
	(5 cread 0 0 intr0)
	(7 0 0 0 intr0)
	// free mem object
	(memaddr :free_obj_memobj call)
	(:free_memobj call)
	// close mem module
	(1 zero 0 0 intr0)
	// exit OK
	(255 0 0 0 intr0)
(funcend)
#include <mem-obj-lib.l1h>
