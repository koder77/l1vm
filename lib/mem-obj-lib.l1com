// mem-obj-lib.l1com
//
//	memory object demo
//
#include <intr-func.l1h>
(main func)
    (set const-int64 1 zero 0)
	(set const-int64 1 one 1)
	(set const-int64 1 two 2)
	(set const-int64 1 three 3)
	(set int64 1 memaddr 0)
	(set int64 1 memind 0)
	(set int64 1 memsize 1)
	(set int64 1 variables 4)
	(set int64 1 a 23)
	(set int64 1 b 42)
	(set double 1 c 3.1415)
	(set int64 1 aread)
	(set int64 1 bread)
	(set double 1 cread)
	(set int64 1 read 0)
	(set int64 1 write 0)
	(set int64 1 ret 0)
	(set int64 1 f 0)
	(set const-string s meminitstr "ERROR can't init memory")
	(set const-string s memerrstr "ERROR can't allocate memory!")
	(set const-string s saveerrstr "ERROR can't save to memory object!")
	(set const-string s writing "writing: ")
	(set const-string s reading "reading: ")
	(set const-string s hellostr "Hello world!")
	(set string 256 getstr "")

	#include <mem-obj-lib-types.l1h>

	(zero one :mem_obj_init !)
	(ret stpopi)
	(loadreg)
	(((ret zero !=) f =) f if)
		// ERROR can't allocate memory
		(meminitstr :print_s !)
        (:print_n !)
	    (one :exit !)
	(endif)
	// allocate memory for the 4 variables
	(variables memsize :alloc_obj_memobj !)
	(memaddr stpopi)
	(loadreg)
	(((memaddr zero <) f =) f if)
		// ERROR can't allocate memory
		(memerrstr :print_s !)
		(:print_n !)
	    (one :exit !)
	(endif)
	// write to memory obj array
	// store variables a, b, c and hellostr in memory object
	// note the variable types are set by "i_type", "d_type" and "s_type" !!!
	(c d_type b i_type a i_type hellostr s_type variables zero memaddr :save_obj_memobj !)
	(ret stpopi)
	(((ret zero !=) f =) f if)
		// ERROR can't allocate memory
		(saveerrstr :print_s !)
		(:print_n !)
	    (one :exit !)
	(endif)
	// get string from mem obj
	(zero memaddr getstr :load_obj_string_memobj !)
	(ret stpopi)
	(getstr :print_s !)
	(:print_n !)
	(three one memaddr :load_obj_memobj !)
	// pop variables from stack
	(ret stpopi)
	(cread stpopd)
	(bread stpopi)
	(aread stpopi)
	// print variables
	(aread :print_i !)
	(:print_n !)

	(bread :print_i !)
	(:print_n !)

	(cread :print_d !)
	(:print_n !)

	// free mem object
	(memaddr :free_obj_memobj !)
	(:free_memobj !)
	// close mem module
	(zero :free_mod !)
	// exit OK
    (zero :exit !)
(funcend)
#include <mem-obj-lib.l1h>
