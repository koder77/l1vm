// string.l1com
// now with string array demo
#include <intr-func.l1h>
#include <vars.l1h>
(main func)
    (set int64 1 zero 0)
    (set int64 1 one 1)
    (set string 14 hellostr "Hello")
    (set string s worldstr " world!")
    (set string 15 hellostr2 "")
    (set string 15 worldstr2 "")
    (set string 2 dotstr ",")
    (set int64 1 slen 0)
    (set string 30 bufstr "")
    (set int64 1 buflen 29)
    (set int64 1 bytenum 42)
    (set int64 1 hello_len 5)
    (set int64 1 world_len 6)
    (set int64 1 mid_pos 6)
    (set int64 1 dot_pos 5)
    //
    // set array with 30 chars
    // and 15 chars length for array strings
    (set string 30 arraystr "")
    (set int64 1 array_size 30)
    (set int64 1 string_len 15)
    (set string s regexstr "[A-Z]")
    (set string s regexsrcstr "Abcdefgh")
    (set string s regex_foundstr "regex: pattern found!")
    (set string s regex_notfoundstr "regex: pattern not found!")
    (set string s json_infostr "JSON get values:")
    // (set string s jsonstr "@@qtest@@q: @@qkey test@@q")
    (set string s jsonstr "@@qtest@@q: 12345.6789")
    (set string 256 keystr "")
    (set string 256 valuestr "")
    (set int64 1 maxlen 255)
    (set int64 1 ret 0)
    (set int64 1 f 0)
    (set string s rep_in_str "Hello 123!")
    (set string 4097 rep_out_str "")
    (set string s search_rep_str "123")
    (set string s rep_str "world")
    (set string s sortastr "xyz")
    (set string s sortbstr "abcde")
    (set string s searchstr "cde")
    (set string 15 sortedastr "")
    (set string 15 sortedbstr "")
    (set int64 1 pos -1)
    (set int64 1 index -1)

    (set string s verify_charstr "range: 0-9 range: A-F-+/&*")
    (set string s verifystr "01234567890FEA+")
    (set string s verify_okstr "string verify ok!")
    (set string s verify_failstr "string verify failed!")

    (zero :string_init !)
    // copy hellostr to array
    (hellostraddr arraystraddr zero string_len array_size :string_to_array !)
    // copy worldstr to array
    (worldstraddr arraystraddr one string_len array_size :string_to_array !)
    // get strings from array
    (arraystraddr hellostr2addr zero string_len array_size :array_to_string !)
    (arraystraddr worldstr2addr one string_len array_size :array_to_string !)
    (hellostr2 :print_s !)
    (:print_n !)
    (worldstr2 :print_s !)
    (:print_n !)
    (:print_n !)
    (hellostraddr worldstraddr :string_cat !)
    (hellostr :print_s !)
    (:print_n !)
    (hellostraddr :string_len !)
    (slen stpopi)
    (slen :print_i !)
    (:print_n !)
    (hellostraddr hellostr2addr hello_len :string_left !)
    (hellostr2 :print_s !)
    (:print_n !)
    (hellostraddr worldstr2addr world_len :string_right !)
    (worldstr2 :print_s !)
    (:print_n !)
    (slen bufstr buflen :string_int64tostring !)
    (bufstr :print_s !)
    (:print_n !)
    (bytenum bufstr buflen :string_bytetohexstring !)
    (bufstr :print_s !)
    (:print_n !)
    // get char at positon mid_pos in hellostr
    (hellostraddr bufstr mid_pos :string_mid !)
    (bufstr :print_s !)
    (:print_n !)
    (dotstraddr hellostraddr dot_pos :string_to_string !)
    (hellostr :print_s !)
    (:print_n !)
    // check regex function:
    (regexsrcstraddr regexstr :string_regex !)
    (ret stpopi)
    (((ret zero ==) f =) f if+)
        (regex_foundstr :print_s !)
        (:print_n !)
    (else)
        (regex_notfoundstr :print_s !)
        (:print_n !)
	(endif)

    // JSON parse function
    (json_infostr :print_s !)
    (:print_n !)
    (jsonstr :print_s !)
    (:print_n !)
    (jsonstr keystr valuestr maxlen :string_parse_json !)
    (ret stpop)
    (ret :print_i !)
    (:print_n !)
    (keystr :print_s !)
    (:print_n !)
    (valuestr :print_s !)
    (:print_n !)
    // replace string
    (rep_in_str search_rep_str rep_str rep_out_str :string_replace !)
    (rep_out_str :print_s !)
    (:print_n !)
    // copy hellostr to array
    (sortastraddr arraystraddr zero string_len array_size :string_to_array !)
    // copy worldstr to array
    (sortbstraddr arraystraddr one string_len array_size :string_to_array !)
    // sort string array
    (arraystr zero string_len array_size sort_string_asc :string_array_sort !)
    (ret stpop)
    // print sorted array
    (arraystraddr sortedastraddr zero string_len array_size :array_to_string !)
    (arraystraddr sortedbstraddr one string_len array_size :array_to_string !)
    (sortedastr :print_s !)
    (:print_n !)
    (sortedbstr :print_s !)
    (:print_n !)
    // search for string in array
    (arraystraddr searchstraddr zero string_len array_size :string_array_search !)
    (index pos stpop)
    (index :print_i !)
    (:print_n !)
    (pos :print_i !)
    (:print_n !)

    (verifystr verify_charstr :string_verify !)
    (ret stpop)
    (((ret zero ==) f =) f if+)
         (verify_okstr :print_s !)
    (else)
        (verify_failstr :print_s !)
    (endif)
    (:print_n !)

    (zero :free_mod !)
    (zero :exit !)
(funcend)
#include <string.l1h>
#include <string-tools.l1h>
