// now with string array demo
#include <intr.l1h>
#include <vars.l1h>
(main func)
    (set int64 1 zero 0)
	(set int64 1 one 1)
    (set string 14 hellostr "Hello")
    (set string s worldstr " world!")
	(set string 15 hellostr2 "")
	(set string 15 worldstr2 "")
	(set string 2 dotstr ",")
    (set int64 1 slen 0)
    (set string 30 bufstr "")
    (set int64 1 buflen 29)
    (set int64 1 bytenum 42)
	(set int64 1 hello_len 5)
	(set int64 1 world_len 6)
	(set int64 1 mid_pos 6)
	(set int64 1 dot_pos 5)
	//
	// set array with 30 chars
	// and 15 chars length for array strings
	(set string 30 arraystr "")
	(set int64 1 array_size 30)
	(set int64 1 string_len 15)
	(set string s regexstr "[A-Z]")
	(set string s regexsrcstr "Abcdefgh")
	(set string s regex_foundstr "regex: pattern found!")
	(set string s regex_notfoundstr "regex: pattern not found!")
    (set string s json_infostr "JSON get values:")
    // (set string s jsonstr "@@qtest@@q: @@qkey test@@q")
    (set string s jsonstr "@@qtest@@q: 12345.6789")
    (set string 256 keystr "")
    (set string 256 valuestr "")
    (set int64 1 maxlen 255)
	(set int64 1 ret 0)
	(set int64 1 f 0)
    (set string s rep_in_str "Hello 123!")
    (set string 4097 rep_out_str "")
    (set string s search_rep_str "123")
    (set string s rep_str "world")
    (set string s sortastr "xyz")
    (set string s sortbstr "abcde")
    (set string s searchstr "cde")
    (set string 15 sortedastr "")
    (set string 15 sortedbstr "")
    (set int64 1 pos -1)
    (set int64 1 index -1)

    (set string s verify_charstr "range: 0-9 range: A-F-+/&*")
    (set string s verifystr "01234567890FEA+")
    (set string s verify_okstr "string verify ok!")
    (set string s verify_failstr "string verify failed!")

    (zero :string_init call)
	// copy hellostr to array
	(hellostraddr arraystraddr zero string_len array_size :string_to_array call)
	// copy worldstr to array
	(worldstraddr arraystraddr one string_len array_size :string_to_array call)
	// get strings from array
	(arraystraddr hellostr2addr zero string_len array_size :array_to_string call)
	(arraystraddr worldstr2addr one string_len array_size :array_to_string call)
    print_s (hellostr2)
    print_n
    print_s (worldstr2)
    print_n
    print_n
    (hellostraddr worldstraddr :string_cat call)
    print_s (hellostr)
    print_n
    (hellostraddr :string_len call)
    (slen stpopi)
    print_i (slen)
    print_n
	(hellostraddr hellostr2addr hello_len :string_left call)
    print_s (hellostr2)
    print_n
	(hellostraddr worldstr2addr world_len :string_right call)
	print_s (worldstr2)
    print_n
    (slen bufstr buflen :string_int64tostring call)
    print_s (bufstr)
    print_n
    (bytenum bufstr buflen :string_bytetohexstring call)
    print_s (bufstr)
    print_n
	// get char at positon mid_pos in hellostr
	(hellostraddr bufstr mid_pos :string_mid call)
	print_s (bufstr)
    print_n
	(dotstraddr hellostraddr dot_pos :string_to_string call)
	print_s (hellostr)
    print_n
	// check regex function:
	(regexsrcstraddr regexstr :string_regex call)
	(ret stpopi)
	(((ret zero ==) f =) f if+)
        print_s (regex_foundstr)
        print_n
	(else)
        print_s (regex_notfoundstr)
        print_n
	(endif)

    // JSON parse function
    print_s (json_infostr)
    print_n
    print_s (jsonstr)
    print_n
    (jsonstr keystr valuestr maxlen :string_parse_json !)
    (ret stpop)
    print_i (ret)
    print_n
    print_s (keystr)
    print_n
    print_s (valuestr)
    print_n

    // replace string
    (rep_in_str search_rep_str rep_str rep_out_str :string_replace !)
    print_s (rep_out_str)
    print_n

    // copy hellostr to array
	(sortastraddr arraystraddr zero string_len array_size :string_to_array call)
	// copy worldstr to array
	(sortbstraddr arraystraddr one string_len array_size :string_to_array call)
    // sort string array
    (arraystr zero string_len array_size sort_string_asc :string_array_sort !)
    (ret stpop)
    // print sorted array
    (arraystraddr sortedastraddr zero string_len array_size :array_to_string call)
	(arraystraddr sortedbstraddr one string_len array_size :array_to_string call)
    print_s (sortedastr)
    print_n
    print_s (sortedbstr)
    print_n

    // search for string in array
    (arraystraddr searchstraddr zero string_len array_size :string_array_search call)
    (index pos stpop)
    print_i (index)
    print_n
    print_i (pos)
    print_n

    (verifystr verify_charstr :string_verify !)
    (ret stpop)
    (((ret zero ==) f =) f if+)
         print_s (verify_okstr)
    (else)
        print_s (verify_failstr)
    (endif)
    print_n

    free_mod (zero)

    exit (zero)
(funcend)
#include <string.l1h>
#include <string-tools.l1h>
