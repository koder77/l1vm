// genann library demo
// train XOR function and run trained neural network
//
#include <intr.l1h>
(main func)
    (set int64 1 zero 0)
    (set int64 1 one 1)
    (set int64 1 i 1000)
    (set int64 1 f 0)
    (set int64 1 ret 0)
    (set double 2 input1 0.0 0.0)
    (set double 2 input2 0.0 1.0)
    (set double 2 input3 1.0 0.0)
    (set double 2 input4 1.0 1.0)
    (set double 1 des_output_null 0.0)
    (set double 1 des_output_one 1.0)
    (set double 1 output 1.0)
    (set int64 1 input1_addr 40)
    (set int64 1 input2_addr 56)
    (set int64 1 input3_addr 72)
    (set int64 1 input4_addr 88)
    (set int64 1 des_output_null_addr 104)
    (set int64 1 des_output_one_addr 112)
    (set int64 1 output_addr 120)
    (set int64 1 two 2)
    (set string 16 learning "learning xor...")
    (set string 10 txt_1 "0 xor 0: ")
    (set string 10 txt_2 "0 xor 1: ")
    (set string 10 txt_3 "1 xor 0: ")
    (set string 10 txt_4 "1 xor 1: ")
    (set string 11 run "running...")
	(set int64 1 handle 0)
    (set int64 1 three 3)
    // init genann library
	(reset-reg)
    (zero one :genann_init_lib call)
	(ret stpopi)
    (loadreg)
	(((ret zero !=) f =) f if)
		(1 zero 0 0 intr0)
		(255 zero 0 0 intr0)
	(endif)
	(reset-reg)
	stack_check
    (two one two one :genann_init call)
    (handle stpopb)
    (loadreg)
    (4 ret 0 0 intr0)
    (7 0 0 0 intr0)
    (6 learningaddr 0 0 intr0)
    (7 0 0 0 intr0)
    (:learn)
    (handle input2_addr des_output_one_addr three :genann_train call)
    (loadreg)
    (handle input3_addr des_output_one_addr three :genann_train call)
    (loadreg)
    (handle input1_addr des_output_null_addr three :genann_train call)
    (loadreg)
    (handle input4_addr des_output_null_addr three :genann_train call)
    (loadreg)
    ((i one -) i =)
    ((i zero >) f =)
    (f :learn jmpi)
    // run ann
    (6 runaddr 0 0 intr0)
    (7 0 0 0 intr0)
    // run genann with one output variable
    (handle input1_addr output_addr one :genann_run call)
    (loadreg)
    (6 txt_1addr 0 0 intr0)
    (5 output 0 0 intr0)
    (7 0 0 0 intr0)
    (handle input2_addr output_addr one :genann_run call)
    (loadreg)
    (6 txt_2addr 0 0 intr0)
    (5 output 0 0 intr0)
    (7 0 0 0 intr0)
    (handle input3_addr output_addr one :genann_run call)
    (loadreg)
    (6 txt_3addr 0 0 intr0)
    (5 output 0 0 intr0)
    (7 0 0 0 intr0)
    (handle input4_addr output_addr one :genann_run call)
    (loadreg)
    (6 txt_4addr 0 0 intr0)
    (5 output 0 0 intr0)
    (7 0 0 0 intr0)
    (handle :genann_free call)
    (loadreg)
	(:free_genanns call)
	(loadreg)
    (1 zero 0 0 intr0)
    (255 zero 0 0 intr0)
(funcend)
#include <genann-lib.l1h>
