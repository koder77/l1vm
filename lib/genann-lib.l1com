// genann library demo
// train XOR function and run trained neural network
//
#include <intr.l1h>
(main func)
    (set const-int64 1 zero 0)
    (set const-int64 1 one 1)
    (set int64 1 i 1000)
    (set int64 1 f 0)
    (set int64 1 ret 0)
    (set double 2 input1 0.0 0.0)
    (set double 2 input2 0.0 1.0)
    (set double 2 input3 1.0 0.0)
    (set double 2 input4 1.0 1.0)
    (set double 1 des_output_null 0.0)
    (set double 1 des_output_one 1.0)
    (set double 1 output 1.0)
    (set const-int64 1 Pinput1_addr 0)
    (set const-int64 1 Pinput2_addr 0)
    (set const-int64 1 Pinput3_addr 0)
    (set const-int64 1 Pinput4_addr 0)
    (set const-int64 1 Pdes_output_null_addr 0)
    (set const-int64 1 Pdes_output_one_addr 0)
    (set const-int64 1 Poutput_addr 0)
    (set int64 1 two 2)
    (set string 16 learning "learning xor...")
    (set string 10 txt_1 "0 xor 0: ")
    (set string 10 txt_2 "0 xor 1: ")
    (set string 10 txt_3 "1 xor 0: ")
    (set string 10 txt_4 "1 xor 1: ")
    (set string 11 run "running...")
	(set int64 1 handle 0)
    (set int64 1 three 3)
    (input1 Pinput1_addr pointer)
    (input2 Pinput2_addr pointer)
    (input3 Pinput3_addr pointer)
    (input4 Pinput4_addr pointer)
    (des_output_null Pdes_output_null_addr pointer)
    (des_output_one Pdes_output_one_addr pointer)
    (output Poutput_addr pointer)
    print_i (Pinput1_addr)
    print_n
    print_n
    // init genann library
	(reset-reg)
    (zero one :genann_init_lib !)
	(ret stpopi)
	(((ret zero !=) f =) f if)
        free_mod (zero)
        exit (one)
	(endif)
	(reset-reg)
	stack_check
    (two one two one :genann_init !)
    (handle stpopi)
    print_s (learning)
    print_n
    (:learn)
    (handle Pinput2_addr Pdes_output_one_addr three :genann_train !)
    (handle Pinput3_addr Pdes_output_one_addr three :genann_train !)
    (handle Pinput1_addr Pdes_output_null_addr three :genann_train !)
    (handle Pinput4_addr Pdes_output_null_addr three :genann_train !)
    ((i one -) i =)
    ((i zero >) f =)
    (f :learn jmpi)
    // run ann
    print_s (run)
    print_n
    // run genann with one output variable
    (handle Pinput1_addr Poutput_addr one :genann_run !)
    print_s (txt_1)
    print_d (output)
    print_n

    (handle Pinput2_addr Poutput_addr one :genann_run !)
    print_s (txt_2)
    print_d (output)
    print_n

    (handle Pinput3_addr Poutput_addr one :genann_run !)
    print_s (txt_3)
    print_d (output)
    print_n

    (handle Pinput4_addr Poutput_addr one :genann_run !)
    print_s (txt_4)
    print_d (output)
    print_n

    (handle :genann_free !)
	(:free_genanns !)
    free_mod (zero)
    exit (zero)
(funcend)
#include <genann-lib.l1h>
