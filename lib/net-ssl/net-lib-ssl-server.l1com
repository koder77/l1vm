//  net-lib-ssl-server.l1com
//
//  SSL network library for TCP/IP sockets
//
#include <intr.l1h>
(main func)
    (set int64 1 zero 0)
    (set int64 1 one 1)
    (set int64 1 two 2)
	(set int64 1 portnum 3000Q)
	(set int64 1 server_accept 0)
	(set int64 1 f 0)
    (set int64 1 ret 0)
    (set string 256 buf_str "empty buf_str")
    (set int64 1 bufsize 255)
    (set int64 1 socket_handle 0)
    (set int64 1 mod_net 0)
    (set string s waiting_str "waiting...")
    (set string s read_str "reading")
	(set string s netinitstr "error: can't init networking sockets!")
    (set string s error_readstr "error: socket: can't read string!")
    (set string s certificate_str "certificate/mycert.pem")
    (set int64 1 delay 100)

    (mod_net two :net_init !)
	(ret stpopi)
	(((ret zero !=) f =) f if)
		// ERROR can't allocate memory
		print_s (netinitstr)
        print_n
        exit (one)
	(endif)
    (certificate_str portnum :open_server_socket_ssl !)
    (ret stpopi)
    (socket_handle stpopi)
    (:wait_conn)
    (waiting_str :print_s !)
    (:print_n !)
    (socket_handle :open_accept_server_ssl !)
    (ret stpopi)
    (server_accept stpopi)
    (:print_n !)
    (server_accept :print_i !)
    (:print_n !)
    (:print_n !)
    (((ret zero ==) f =) f if)
        (read_str :print_s !)
        (:print_n !)
        (server_accept buf_str bufsize :socket_read_string !)
        (ret stpop)

        (ret :print_i !)
        (:print_n !)

        (((ret zero !=) f =) f if+)
            (error_readstr :print_s !)
            (:print_n !)
        (else)
            (buf_str :print_s !)
            (:print_n !)
        (endif)
        (server_accept :close_accept_server_ssl !)
    (endif)
    (delay :detime !)
    // (:wait_conn jmp)

    (server_accept :close_accept_server_ssl !)
    (socket_handle :close_server_socket_ssl !)
	(:socket_free_mem !)
    free_mod (mod_net)
    (:end)
    exit (zero)
(funcend)
#include <net-lib.l1h>
