// file library module
// test program
//
//
#include <intr.l1h>
(main func)
    #include <file-def.l1h>
    (set int64 1 zero 0)
	(set int64 1 one 1)
    (set int64 1 handle 0)
    (set int64 1 num 12345678Q)
    (set int64 1 read 0)
    (set string s filename "test-file")
    (set string s hellostr "hello world!")
    (set string 30 readstr "")
    (set int64 1 readlen 29)
    (set byte 1 newline 10)
    (set byte 1 mode_write 2)
    (set byte 1 mode_read 1)
    (set byte 1 mode_readwrite 3)
    (set int64 1 error 0)
	(set int64 1 ret 0)
	(set int64 1 f 0)
    (set int64 1 maxmem 10000)
    (set int64 10000 array)
    (set int64 1 ind 0)
    (set int64 1 offset 8)
    (set int64 1 real_ind 0)
    (set int64 1 start 0)
    (set int64 1 size 10000)
    (set int64 1 Parray 0)
	(set string s error_init_files "error: can't allocate file handles!")
	(set string s error_open_file "error: can't open file test-file!")
    (set string s array_write "write array...")
    (set string s array_read "read_array...")
    (set string s array_ok "ok!")
    (set string s array_error "error checking array: ")
    (set string s array_error_write "error writing array!")
	//
	// set numbers of file handles to one: 1
	//
    (zero one :file_init call)
	(ret stpopi)
	(((ret zero !=) f =) f if)
        print_s (error_init_files)
        print_n
        (:file_free_mem call)
        free_mod (zero)
        exit (one)
	(endif)
    // write data -----------------------------------------
    (mode_write filenameaddr :file_open call)
	//
	// get file handle from file_open call
	//
    (handle stpopi)
	(((handle zero <) f =) f if)
        print_s (error_open_file)
        print_n
        (:file_free_mem call)
        free_mod (zero)
        exit (one)
	(endif)
    (handle num :file_put_int64 call)
    (error stpopi)
    (handle hellostraddr :file_put_string call)
    (error stpopi)
    // (handle newline :file_putc call)
    (handle :file_close call)
    // read data ------------------------------------------
    (mode_read filenameaddr :file_open call)
    //
	// get file handle from file_open call
	//
    (handle stpopi)
	(((handle zero <) f =) f if)
        print_s (error_open_file)
        print_n
        (:file_free_mem call)
        free_mod (zero)
        exit (one)
	(endif)
    (handle :file_get_int64 call)
    (error stpopi)
    (read stpopi)
    (handle readstraddr readlen :file_get_string call)
    (error stpopi)
    print_s (readstr)
    print_n
    (handle :file_close call)
    // array testing code
    (array Parray pointer)
    print_s (array_write)
    print_n
    (handle mode_readwrite filenameaddr :file_open call)
    (error stpopi)
    (((error zero !=) f =) f if)
        print_s (array_error_write)
        print_n
        (handle :file_close call)
        // close file module
        (handle :file_close call)
	    (:file_free_mem call)
        free_mod (zero)
        exit (one)
    (endif)
    (reset-reg)
    (zero ind =)
    (for-loop)
    (((ind maxmem <) f =) f for)
        ((ind offset *) real_ind =)
        (ind array [ real_ind ] =)
        print_i (ind)
        print_n
        ((ind one +) ind =)
    (next)
    // write array
    (handle Parray start size array_int64 :file_write_array !)
    (error stpopi)
    (((error zero !=) f =) f if)
        print_s (array_error_write)
        print_n
        (handle :file_close call)
        // close file module
         (handle :file_close call)
	    (:file_free_mem call)
        free_mod (zero)
        exit (one)
    (endif)
    print_s (array_read)
    print_n
    // fseek to beginning of file 
    (handle zero file_seek_set :file_seek !)
    (error stpopi)
    (((error zero !=) f =) f if)
        print_s (array_error)
        print_n
        (handle :file_close call)
        // close file module
        (handle :file_close call)
	    (:file_free_mem call)
        free_mod (zero)
        exit (one)
    (endif)
    // read array
    (handle Parray start size array_int64 :file_read_array !)
    (error stpopi)
    (((error zero !=) f =) f if)
        print_s (array_error_write)
        print_n
        (handle :file_close call)
        // close file module
         (handle :file_close call)
	    (:file_free_mem call)
        free_mod (zero)
        exit (one)
    (endif)
    // verify array 
    (reset-reg)
    (zero ind =)
    (for-loop)
    (((ind maxmem <) f =) f for)
        ((ind offset *) real_ind =)
        (array [ real_ind ] read =)
        (((ind read !=) f =) f if)
            // error verify
            print_s (array_error)
            print_i (ind)
            print_n
        (endif)
        print_i (ind)
        print_n
        ((ind one +) ind =)
    (next)
    print_s (array_ok)
    print_n
    // close file module
    (handle :file_close call)
	(:file_free_mem call)
    free_mod (zero)
    exit (zero)
(funcend)
#include <file-lib.l1h>
