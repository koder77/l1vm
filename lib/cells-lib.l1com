// Cells FANN wrapper library for L1VM
//
// New: added return value checks on alloc Cells calls
//
#include <intr.l1h>
(main func)
	(set const-int64 1 zero 0)
	(set const-int64 1 one 1)
	(set int64 1 ret 0)
	(set int64 1 max_cells 1)
	(set int64 1 cell 0)
	(set int64 1 node_xor 0)
	(set int64 1 inputs 2)
	(set int64 1 outputs 1)
	(set int64 1 max_layers 1)
	(set int64 1 cell_neurons 3)
	(set double 2 node_xor_inputsf 1.0 0.0)
	(set double 1 node_xor_outputsf 0.0)
	// following data addresses taken from assembly output!
	(set const-int64 1 Pnode_xor_inputsfaddr 0)
	(set const-int64 1 Pnode_xor_outputsfaddr 0)
	(set double 1 outputf 0.0)
	(set const-int64 1 Poutputfaddr 120)
	(set int64 1 layer_zero 0)
	(set int64 1 layer_one 1)
	(set int64 1 ret 0)
	(set double 1 zerof 0.0)
	(set double 1 onef 1.0)
	(set int64 1 offset 8)
	(set int64 1 f 0)
	(set int64 1 max_layer_readout 0)

	// following data address taken from assembly output!
	(set const-int64 1 Pmax_layer_readoutaddr 0)
	// set path to "xor_float.net" file of Cells C library:
	(set string s node_xor_filestr "fann/xor_float.net")
    // set pointers
    (node_xor_inputsf Pnode_xor_inputsfaddr pointer)
    (node_xor_outputsf Pnode_xor_outputsfaddr pointer)
    (max_layer_readout Pmax_layer_readoutaddr pointer)
    (outputf Poutputfaddr pointer)

	(zero max_cells :cells_init_lib !)
	(ret stpop)
	(((ret zero !=) f =) f if)
		exit (one)
	(endif)
	// allocate memory for cell neurons
	(max_cells cell_neurons :cells_alloc_neurons_equal !)
	(ret stpop)
	(((ret zero !=) f =) f if)
		(:cells_dealloc !)
		(loadreg)
		exit (one)
	(endif)
	// read FANN from file
	(cell node_xor node_xor_filestraddr inputs outputs Pnode_xor_inputsfaddr Pnode_xor_outputsfaddr layer_zero one :cells_fann_read_ann !)
	(ret stpop)
	(((ret zero !=) f =) f if)
		// dealloc neurons
		(max_cells :cells_dealloc_neurons !)
		(ret stpop)
		(:cells_dealloc !)
		exit (one)
	(endif)
	(cell node_xor :cells_fann_run_ann !)
	(ret stpop)
	(cell node_xor zero Poutputfaddr :cells_fann_get_output !)
	(ret stpop)
	print_d (outputf)
	print_n
	// update ANN
	(zerof node_xor_inputsf [ zero ] =)
	(zerof node_xor_inputsf [ offset ] =)
	(reset-reg)
	(cell node_xor inputs Pnode_xor_inputsfaddr :cells_fann_do_update_ann !)
	(ret stpop)
	(cell node_xor :cells_fann_run_ann !)
	(ret stpop)
	(cell node_xor zero Poutputfaddr :cells_fann_get_output !)
	(ret stpop)
	print_d (outputf)
	print_n
	(reset-reg)
	(zero zero Pmax_layer_readoutaddr :cells_fann_get_max_layer !)
	(ret stpop)
	print_i (max_layer_readout)
	print_n
	// dealloc neurons
	(max_cells :cells_dealloc_neurons !)
	(ret stpop)
	(:cells_dealloc !)
	exit (zero)
(funcend)
#include <cells-lib.l1h>
