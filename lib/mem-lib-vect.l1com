// mem-lib-vect.l1com
#include <intr.l1h>
(main func)
    (set int64 1 zero 0)
	(set int64 1 one 1)
	(set int64 1 memaddr 0)
	(set int64 1 memsize 10000)
	(set int64 1 i 0)
	(set int64 1 j 0)
	(set int64 1 f 0)
	(set int64 1 read 0)
	(set int64 1 write 0)
	(set int64 1 ret 0)
	(set string s meminitstr "ERROR can't init memory")
	(set string s memerrstr "ERROR can't allocate memory!")
	(set string s writing "writing: ")
	(set string s reading "reading: ")
	(zero one :mem_init !)
	(ret stpop)
	(((ret zero !=) f =) f if)
		// ERROR can't allocate memory
		print_s (meminitstr)
        print_n
        exit (one)
	(endif)
	// allocate
	(:alloc_int64_vect call)
	(memaddr stpopi)
	(loadreg)
	(((memaddr zero <) f =) f if)
		// ERROR can't allocate memory
		print_s (meminitstr)
        print_n
        exit (one)
	(endif)
	// write to array
	(:write_loop)
	print_s (writing)
    print_i (i)
    print_n
	(memaddr i :int_to_vect call)
	(loadreg)
	((i one +) i =)
	(((i memsize <) f =) f if)
		(:write_loop jmp)
	(endif)
	print_n
	print_n
	// read from array
	(zero j =)
	print_i (j)
    print_n
	(:read_loop)
	(memaddr j :vect_to_int call)
	(read stpopi)
	(loadreg)
	print_s (reading)
    print_i (read)
    print_n
	((j one +) j =)
	(((j memsize <) f =) f if)
		(:read_loop jmp)
	(endif)
	// dealloc mem
	(memaddr :dealloc_vect call)
	(loadreg)
	(:free_mem call)
	(loadreg)
	// close mem module
	free_mod (zero)
	// exit ok
	exit (zero)
(funcend)
#include <mem-lib-vect.l1h>
