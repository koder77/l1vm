// mem-lib-vect.l1com
#include <intr-func.l1h>
(main func)
    (set const-int64 1 zero 0)
	(set const-int64 1 one 1)
	(set int64 1 memaddr 0)
	(set const-int64 1 memsize 10000)
	(set int64 1 i 0)
	(set int64 1 j 0)
	(set int64 1 f 0)
	(set int64 1 read 0)
	(set int64 1 write 0)
	(set int64 1 ret 0)
	(set const-string s meminitstr "ERROR can't init memory")
	(set const-string s memerrstr "ERROR can't allocate memory!")
	(set const-string s writing "writing: ")
	(set const-string s reading "reading: ")
	(zero one :mem_init !)
	(ret stpop)
	(((ret zero !=) f =) f if)
		// ERROR can't allocate memory
		(meminitstr :print_s !)
	    (:print_n !)
	    (one :exit !)
	(endif)
	// allocate
	(:alloc_int64_vect call)
	(memaddr stpopi)
	(((memaddr zero <) f =) f if)
		// ERROR can't allocate memory
		(meminitstr :print_s !)
        (:print_n !)
	    (one :exit !)
	(endif)
	// write to array
	(:write_loop)

    (writing :print_s !)
    (:print_n !)
    (i :print_i !)
    (:print_n !)

	(memaddr i :int_to_vect !)
	((i one +) i =)
	(((i memsize <) f =) f if)
		(:write_loop jmp)
	(endif)

	(:print_n !)
	(:print_n !)

	// read from array
	(zero j =)
	(j :print_i !)
    (:print_n !)
	(:read_loop)
	(memaddr j :vect_to_int !)
	(read stpopi)

	(reading :print_s !)
    (:print_n !)
    (i :print_i !)
    (:print_n !)

	((j one +) j =)
	(((j memsize <) f =) f if)
		(:read_loop jmp)
	(endif)
	// dealloc mem
	(memaddr :dealloc_vect !)
	(loadreg)
	(:free_mem !)
	(loadreg)
	// close mem module
	(zero :free_mod !)
	// exit ok
    (zero :exit !)
(funcend)
#include <mem-lib.l1h>
