// train-fann-file.l1com
// fann train library demo
// train XOR function and run trained neural network
#include <intr.l1h>
(main func)
    (set int64 1 zero 0)
    (set int64 1 one 1)
    (set int64 1 i 50000)
    (set int64 1 f 0)
    (set int64 1 ret 0)
    (set double 2 input1 -1.0 -1.0)
    (set double 2 input2 -1.0 1.0)
    (set double 2 input3 1.0 -1.0)
    (set double 2 input4 1.0 1.0)
    (set double 1 des_output_null -1.0)
    (set double 1 des_output_one 1.0)
    (set double 1 output 1.0)
    (set int64 1 input1_addr 40)
    (set int64 1 input2_addr 56)
    (set int64 1 input3_addr 72)
    (set int64 1 input4_addr 88)
    (set int64 1 des_output_null_addr 104)
    (set int64 1 des_output_one_addr 112)
    (set int64 1 output_addr 120)
    (set int64 1 two 2)
    (set string 16 learning "learning xor...")
    (set string 10 txt_1 "0 xor 0: ")
    (set string 10 txt_2 "0 xor 1: ")
    (set string 10 txt_3 "1 xor 0: ")
    (set string 10 txt_4 "1 xor 1: ")
    (set string 11 run "running...")
	(set int64 1 handle 0)
    (set int64 1 three 3)
    (set int64 1 two 2)
    (set int64 1 layers 3)
    (set int64 1 inputs 2)
    (set int64 1 outputs 1)
    (set int64 1 hidden_neurons 3)
    (set string s create_str "creating xor fann...")
    (set string s fann_data_file_str "fann/xor.data")
    (set int64 1 max_epochs 500000)
    (set int64 1 epochs_between_reports 1000)
    (set double 1 desired_error 0.001)

    // init fann library
	(reset-reg)
    (zero one :fann_init_lib call)
	(ret stpopi)
	(((ret zero !=) f =) f if)
        free_mod (zero)
        exit (one)
	(endif)
	(reset-reg)
	stack_check

    // create fann
    print_s (create_str)
    print_n
    (layers inputs hidden_neurons outputs :fann_create !)
    (handle stpop)

    // train fann from xor data file
    (handle fann_data_file_str max_epochs epochs_between_reports desired_error :fann_train_ann_file !)

    // run ann
    print_s (runaddr)
    print_n
    // run fann with one output variable
    (handle input1_addr output_addr two one :fann_run !)
    print_s (txt_1addr)
    print_d (output)
    print_n
    (handle input2_addr output_addr two one :fann_run !)
    print_s (txt_2addr)
    print_d (output)
    print_n
    (handle input3_addr output_addr two one :fann_run !)
    print_s (txt_3addr)
    print_d (output)
    print_n
    (handle input4_addr output_addr two one :fann_run !)
    print_s (txt_4addr)
    print_d (output)
    print_n
    (handle :fann_free call)
	(:free_fanns call)
    free_mod (zero)
    exit (zero)
(funcend)
#include <fann-lib.l1h>
