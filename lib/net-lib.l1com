//  net-lib.l1com
//
//  network library for TCP/IP sockets
//
// demo waits for a telnet connection on port 3000
//
#include <intr.l1h>
(main func)
    (set int64 1 zero 0)
    (set int64 1 one 1)
    (set int64 1 server 0)
    (set int64 1 accept 0)
    (set int64 1 portnum 3000Q)
    (set int64 1 error 0)
    (set int64 1 server_open 0)
    (set int64 1 server_accept 0)
    (set int64 1 f 0)
    (set string 10 ip "127.0.0.1")
    (set int64 1 ip_len 10)
    (set int64 1 ret 0)
    (set string 265 bufaddr "")
    (set string 256 buf_str "")
    (set int64 1 bufsize 255)
    (set int64 1 socket_handle 0)
    (set int64 1 mod_net 0)
    (set int64 1 char 0)
    (set string 11 waiting "waiting...")
    (set string s netinitstr "error: can't init networking sockets!")
    (mod_net one :net_init !)
    (ret stpopi)
    (((ret zero !=) f =) f if)
        // ERROR can't allocate memory
        (netinitstr :print_s !)
        (:print_n !)
        (one :exit !)
    (endif)
    (ipaddr bufaddr :get_hostbyname !)
    (ret stpopi)
    // (:end jmp)
    ((ret zero !=) f =)
    (f :try_hostbyaddr jmpi)
    (:open_socket jmp)
    (:try_hostbyaddr)
    (ipaddr bufaddr :get_hostbyaddr !)
    (ret stpopi)
    ((ret zero !=) f =)
    (f :end jmpi)
    (:open_socket)
    (portnum :print_i !)
    (:print_n !)
    (bufaddr portnum :open_server_socket !)
    (ret stpopi)
    (socket_handle stpopi)
    (bufaddr :print_s !)
    (:print_n !)
    (waitingaddr :print_s !)
    (:print_n !)
    (socket_handle :open_accept_server !)
    (ret stpopi)
    (server_accept stpopi)
    (portnum :print_i !)
    (:print_n !)
    (:wait_conn)
    (server_accept buf_str bufsize :socket_read_string !)
    (ret stpopi)
    (((ret zero !=) f =) f if)
        (:wait_conn jmp)
    (endif)
    (buf_str :print_s !)
    (:print_n !)
    (server_accept :close_accept_server !)
    (socket_handle :close_server_socket !)
    (:print_n !)
    (:socket_free_mem !)
    (mod_net :free_mod !)
    (:end)
    (zero :exit !)
(funcend)
#include <net-lib.l1h>
