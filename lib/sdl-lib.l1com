// GUI demo, SDL module
//
// functions for drawing slider values added
//
#include <intr.l1h>
(main func)
	(set int64 1 zero 0)
	(set int64 1 one 1)
	(set int64 1 two 2)
	(set int64 1 three 3)
	(set int64 1 four 4)
	(set int64 1 five 5)
	(set int64 1 six 6)
	(set int64 1 seven 7)
	(set int64 1 width 800)
	(set int64 1 height 600)
	(set int64 1 width_b 799)
	(set int64 1 height_b 599)
	(set int64 1 bit 32)
	(set int64 1 x 20)
	(set int64 1 y 20)
	(set int64 1 x_quit 20)
	(set int64 1 y_quit 80)
	(set int64 1 x_check 20)
	(set int64 1 y_check 140)
	(set int64 1 x_string 20)
	(set int64 1 y_string 200)
	(set int64 1 x_cycle 100)
	(set int64 1 y_cycle 260)
	(set int64 1 x_prog 300)
	(set int64 1 y_prog 80)
	(set int64 1 value_cycle 0)
	(set int64 1 value_prog 75)
	(set int64 1 visible_string 13)
	(set int64 1 x_slider 300)
	(set int64 1 y_slider 120)
	(set int64 1 slider_min 100)
	(set int64 1 slider_max 150)
	(set int64 1 slider_value 125)
	(set int64 1 x_slider_vert 300)
	(set int64 1 y_slider_vert 180)
	(set int64 1 slider_vert_width 40)
	(set int64 1 slider_vert_height 200)
	(set int64 1 gadgets 8)
	(set int64 1 status 1)
	(set int64 1 delay 10000)
	(set string s screenshotstr " screenshot ")
	(set string s quitstr  "    Quit    ")
	(set string s checkstr "test checkbox")
	(set string s stringstr "test")
	(set string s valuestr "")
	(set string s fontname "fonts/free/FreeMono.ttf")
	(set string s red_cyclestr "red")
	(set string s green_cyclestr "green")
	(set string s blue_cyclestr "blue")
	(set string s text_cyclestr "color")
	(set string s text_progstr "progress")
	(set string s picture_namestr "screenshot.bmp")
	(set string s picture_errstr "ERROR can't save screenshot!")
	(set string s picture_okstr "screenshot saved!")
	(set string s slider_str "      set value      ")
	// slider horizontal =========================================================
	(set string 5 slider_value "")
	(set int64 1 x_slider_value 600)
	(set int64 1 y_slider_value 125)
	(set int64 1 slider_value_max 4)
	(set int64 1 x_slider_box 600)
	(set int64 1 y_slider_box 120)
	(set int64 1 x2_slider_box 650)
	(set int64 1 y2_slider_box 150)
	// slider vertical ===========================================================
	(set int64 1 x_slider_vert_value 300)
	(set int64 1 y_slider_vert_value 400)
	(set int64 1 slider_vert_value_max 4)
	(set int64 1 x_slider_vert_box 300)
	(set int64 1 y_slider_vert_box 400)
	(set int64 1 x2_slider_vert_box 340)
	(set int64 1 y2_slider_vert_box 450)
	// ===========================================================================
	(set int64 1 fontsize 20)
	(set byte 1 back_r 143)
	(set byte 1 back_g 147)
	(set byte 1 back_b 151)
	(set byte 1 alpha 255)
	(set byte 1 black 0)
	(set int64 1 gadget_sel 0)
	(set string 256 gadget_retstr "")
	(set int64 1 ret 0)
	(set int64 1 value 0)
	(set int64 1 f 0)
	// open screen
    (zero width height bit zero :sdl_open_screen !)
	(ret stpop)
	(one :string_init !)
	// load font
    (fontnameaddr fontsize :sdl_font_ttf !)
	(gadgets :init_gui !)
	(zero zero width_b height_b back_r back_g back_b alpha :sdl_rectangle_fill !)
	(zero x y screenshotstraddr status :set_gadget_button !)
	(one x_quit y_quit quitstraddr status :set_gadget_button !)
	(two x_check y_check checkstraddr one status :set_gadget_checkbox !)
	(three x_string y_string stringstraddr valuestraddr visible_string status :set_gadget_string !)
	(three one :set_gadget_string_passwd !)
	(x_cycle y_cycle text_cyclestr value_cycle status blue_cyclestr green_cyclestr red_cyclestr three four :set_gadget_cycle !)
	(five x_prog y_prog text_progstr value_prog status :set_gadget_progress !)
	(six x_slider y_slider slider_straddr slider_value slider_min slider_max status :set_gadget_slider !)
	(seven x_slider_vert y_slider_vert slider_vert_width slider_vert_height slider_value slider_min slider_max status :set_gadget_slider_vert !)
	// draw slider values
	(slider_value :draw_slider_value !)
	(slider_value :draw_slider_value_vert !)
	(:loop)
	(:sdl_update !)
	(gadget_retstraddr :gadget_event !)
	(ret stpopi)
	(value stpopi)
	(gadget_sel stpopi)
	print_i (gadget_sel)
	(((gadget_sel one ==) f =) f if)
		// (:free_all_gadgets !)
		exit (zero)
	(endif)
	(((gadget_sel zero ==) f =) f if)
		// save screenshot
		(picture_namestr :sdl_save_picture !)
		(ret stpop)
		(((ret zero !=) f =) f if+)
	         print_s (picture_errstr)
	         print_n
		(else)
	         print_s (picture_okstr)
	         print_n
		(endif)
	(endif)
	(((gadget_sel six ==) f =) f if)
		(value :draw_slider_value !)
	(endif)
	(((gadget_sel seven ==) f =) f if)
		(value :draw_slider_value_vert !)
	(endif)
	print_n
	// (8 delay 0 0 intr0)
	(:loop jmp)
(funcend)
(draw_slider_value func)
	(set int64 1 value@draw_slider_value 0)
	(value@draw_slider_value stpopi)
	(value@draw_slider_value slider_valueaddr slider_value_max :string_int64tostring !)
	(x_slider_box y_slider_box x2_slider_box y2_slider_box back_r back_g back_b alpha :sdl_rectangle_fill !)
	(x_slider_value y_slider_value black black black slider_valueaddr :sdl_text_ttf !)
(funcend)
(draw_slider_value_vert func)
	(set int64 1 value@draw_slider_value_vert 0)
	(value@draw_slider_value_vert stpopi)
	(value@draw_slider_value_vert slider_valueaddr slider_value_max :string_int64tostring !)
	(x_slider_vert_box y_slider_vert_box x2_slider_vert_box y2_slider_vert_box back_r back_g back_b alpha :sdl_rectangle_fill !)
	(x_slider_vert_value y_slider_vert_value black black black slider_valueaddr :sdl_text_ttf !)
(funcend)
#include <sdl-lib.l1h>
#include <string.l1h>
