// game.l1com
// Maybe this will become some simple game in Brackets!
// Now you can move a circle around in the window by a joystick.
// That's all for the moment
//
#include <intr.l1h>
(main func)
	(set int64 1 zero 0)
	(set int64 1 one 1)
	(set int64 1 two 2)
	(set int64 1 f 0)
	(set int64 1 width 800)
	(set int64 1 height 600)
	(set int64 1 width_m 799)
	(set int64 1 height_m 599)
	(set int64 1 bit 32)
	(set int64 1 ret 0)
	(set int64 1 x 0)
	(set int64 1 y 0)
	(set int64 1 joy_x_axis 0)
	(set int64 1 joy_y_axis 0)
	(set int64 1 joy_x2_axis 0)
	(set int64 1 joy_y2_axis 0)
	(set int64 1 joy_axis_max 0)
	(set int64 1 joy_buttons_max 0)
	(set string 256 joy_namestr "")
	(set int64 1 joy_name_len 255)
	(set int64 1 joy_button 0)
	(set int64 1 joy_button_state)
	(set int64 1 f 0)
	(set int64 1 delay 5000)
    (set int64 1 frame_delay 10)
    (set int64 1 joy_x_axis_center 32)
    (set int64 1 joy_y_axis_center 32)
    (set int64 1 joy_x2_axis_center 128)
    (set int64 1 joy_offset 3000)
    (set int64 1 joy_y2_axis_center 32767)
    (set int64 1 joy_x_min -32768)
    (set int64 1 joy_x_max 32767)
    (set int64 1 joy_y2_min -32768)
    (set int64 1 joy_y2_max 32767)
    (set int64 1 joy_thresh 2000)
	(set int64 1 joy_move_x 0)
	(set int64 1 joy_move_y 0)
    (set int64 1 circle_x 400)
    (set int64 1 circle_y 300)
    (set int64 1 radius 30)
	(set int64 1 circle_x_border 40)
	(set int64 1 circle_x2_border 760)
	(set int64 1 circle_y_border 40)
	(set int64 1 circle_y2_border 560)
    (set byte 1 col_white 255)
	(set byte 1 col_black 0)
	(set byte 1 alpha 255)
	(set int64 1 move_speed 20)
	(set int64 1 update_screen 0)
	(set string s joy_x_axisstr "joystick x axis: ")
	(set string s joy_y_axisstr "joystick y axis: ")
	(set string s joy_x2_axisstr "joystick x2 axis: ")
	(set string s joy_y2_axisstr "joystick y2 axis: ")
	(set string s button_str "button: ")
	(set string s buttons_str "buttons: ")
	(set string s button_c_str ": ")
	(set string s joy_name_infostr "joystick name: ")
	// open screen
    (zero width height bit zero :sdl_open_screen !)
	(ret stpopi)
	(loadreg)

	// clear screen
    (zero zero width_m height_m col_black col_black col_black alpha :sdl_rectangle_fill !)
	// draw circle
	(circle_x circle_y radius col_white col_white col_white alpha :sdl_circle !)
	(:sdl_update !)

	// get joystick info
	(joy_namestraddr joy_name_len :sdl_get_joystick_info !)
	(joy_axis_max stpopi)
	(joy_buttons_max stpopi)
	(loadreg)
	print_s (joy_name_infostr)
	print_s (joy_namestr)
	print_n
	(:loop)
	(:sdl_get_joystick_x_axis !)
	(joy_x_axis stpopi)
	(loadreg)
	(:sdl_get_joystick_y_axis !)
	(joy_y_axis stpopi)
	(loadreg)
	// check if more than two axis
	(((joy_axis_max two >) f =) f if)
		(:sdl_get_joystick_x2_axis !)
		(joy_x2_axis stpopi)
		(loadreg)
		(:sdl_get_joystick_y2_axis !)
		(joy_y2_axis stpopi)
		(loadreg)
	(endif)
	(reset-reg)
	print_s (joy_x_axisstr)
	print_i (joy_x_axis)
	print_n
	print_s (joy_y_axisstr)
	print_i (joy_y_axis)
	print_n
	(((joy_axis_max two >) f =) f if)
		print_s (joy_x2_axisstr)
		print_i (joy_x2_axis)
		print_n
		print_s (joy_y2_axisstr)
		print_i (joy_y2_axis)
		print_n
	(endif)
	// get pressed buttons
	(zero joy_button =)
	(:button_loop)
	(reset-reg)
	// print_s (buttons_str)
	// print_i (joy_buttons_max)
	// print_n
	(((joy_button joy_buttons_max <) f =) f if)
		(joy_button :sdl_get_joystick_button !)
		(joy_button_state stpopi)
		(loadreg)
		(((joy_button_state one ==) f =) f if)
			print_s (button_str)
			print_i (joy_button)
			print_s (button_c_str)
			print_i (joy_button_state)
			print_n
			detime (delay)
	        exit (zero)
		(endif)
		((joy_button one +) joy_button =)
		(:button_loop jmp)
	(endif)
	print_n
	print_n
    (zero update_screen =)

	(reset-reg)
	(((joy_x_axis joy_x_axis_center <) f =) f if+)
		((joy_x_axis_center joy_thresh -) joy_move_x =)
		((((joy_x_axis joy_move_x <)(circle_x circle_x_border >) &&) f =) f if)
	        ((circle_x move_speed -) circle_x =)
		    (one update_screen =)
	    (endif)
    (else)
        ((joy_x_axis_center joy_thresh +) joy_move_x =)
	    ((((joy_x_axis joy_move_x >)(circle_x circle_x2_border <) &&) f =) f if)
	        ((circle_x move_speed +) circle_x =)
	    	(one update_screen =)
	    (endif)
    (endif)

	(((joy_y_axis joy_y_axis_center >) f =) f if+)
	    ((joy_y_axis_center joy_thresh +) joy_move_y =)
	    ((((joy_y_axis joy_move_y >)(circle_y circle_y2_border <) &&) f =) f if)
	        ((circle_y move_speed +) circle_y =)
	    	(one update_screen =)
	    (endif)
   (else)
		((joy_y_axis_center joy_thresh -) joy_move_y =)
		((((joy_y_axis joy_move_y <)(circle_y circle_y_border >) &&) f =) f if)
	        ((circle_y move_speed -) circle_y =)
		    (one update_screen =)
	    (endif)
    (endif)

	(((update_screen one ==) f =) f if)
        // clear screen
		(zero zero width_m height_m col_black col_black col_black alpha :sdl_rectangle_fill !)
        // draw circle
	    (circle_x circle_y radius col_white col_white col_white alpha :sdl_circle !)
        detime (frame_delay)
		(:sdl_update !)
		(zero update_screen =)
    (endif)
	(:loop jmp)
(funcend)
#include <sdl-lib.l1h>
