// math-circle-bignum.l1com
// calculate diameter or circumference of circle
//
// MPFR floating point math demo
// NEW: with OOP
//
#include <intr.l1h>
(main func)
	(set const-int64 1 zero 0)
	(set const-int64 1 one 1)
	(set const-int64 1 two 2)
	(set const-int64 1 three 3)
	(set const-int64 1 four 4)
	(set string s prog_name "math-circle-bignum")
	(set string s menu_diamstr "1: calculate diameter of circle")
	(set string s menu_circstr "2: calculate circumference of circle")
	(set string s menu_areastr "3: calculate area of circle")
	(set string s menu_quitstr "4: quit")
	(set string s menu_chstr "? ")
	(set int64 1 input_menu 0)
	(set int64 1 f 0)

	(zero :mp_math_init !)
    (:init->circle !)

	(:loop)
	print_s (prog_name)
	print_n
	print_s (menu_diamstr)
	print_n
	print_s (menu_circstr)
	print_n
	print_s (menu_areastr)
	print_n
	print_s (menu_quitstr)
	print_n
	print_s (menu_chstr)
	// read input
	input_i (input_menu)
	((input_menu zero +) input_menu =)
	(((input_menu four ==) f =) f if)
		// quit
		exit (zero)
	(endif)
	(reset-reg)
	(((input_menu one ==) f =) f if)
		// reset used variables and set used registers to zero
		// no context register saving here
		(reset-reg)
		(:calc_diam->circle !)
	(endif)
	(((input_menu two ==) f =) f if)
		// reset used variables and set used registers to zero
		// no context register saving here
		(reset-reg)
		(:calc_circ->circle !)
	(endif)
	(((input_menu three ==) f =) f if)
		// reset used variables and set used registers to zero
		// no context register saving here
		(reset-reg)
		(:calc_area->circle !)
	(endif)
	print_n
	print_n
	(:loop jmp)
(funcend)

(circle object)
    #var ~ circle

#docustart
circle object
=============
Calculate diameter, circumference and area of a circle.

init->circle
------------
Set the m_pi Pi variable.

calc_diam->circle
-----------------
Calculate the diameter of a circle.

calc_circ->circle
-----------------
Calculate the circumference of a circle.

calc-area->circle
-----------------
Calculate the area of a circle.
#docuend

	// set constant -----------------------------------------
	(set const-string s m_pi@mp_math "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679")

	(set string s diamstr~ "diameter:      ")
	(set string s circstr~ "circumference: ")
    (set string s radiusstr~  "radius:        ")
    (set string s areastr~ "area:          ")
	(set string s formatstr~ "%.200Ff")

	(set int64 1 precision~ 14)
	(set int64 1 base~ 10)
	(set int64 1 precision_set~ 4096)
	(set int64 1 diam_mp~ 0)
	(set int64 1 circ_mp~ 1)
	(set int64 1 pi_mp~ 2)
	(set int64 1 radius_mp~ 3)
	(set int64 1 area_mp~ 4)
	(set string 4096 diam~ "")
	(set string 4096 circ~ "")
	(set string 4096 radius~ "")
	(set string 4096 area~ "")
	(set string s zerod~ "0.0")
	(set int64 1 input_len~ 4095)

(init->circle func)
	#var ~ circle

	// set pi
	(m_pi@mp_mathaddr base~ precision_set~ pi_mp~ :mp_set_float_prec !)
(funcend)
(calc_diam->circle func)
	 #var ~ circle

	// calculate diameter
	print_s (circstr~)
	// input string circ
	input_s (input_len~, circ~)
	(circ~ base~ precision_set~ circ_mp~ :mp_set_float_prec !)
	(zerod~ base~ precision_set~ diam_mp~ :mp_set_float_prec !)
	(circ_mp~ pi_mp~ diam_mp~ :mp_div_float !)
	print_s (diamstr~)
	(diam_mp~ formatstr~ precision~ :mp_print_float !)
	(loadreg)
(funcend)
(calc_circ->circle func)
	 #var ~ circle

	// calculate circumference
	print_s (diamstr~)
	// input string diam
	input_s (input_len~, diam~)
	(zerod~ base~ precision_set~ circ_mp~ :mp_set_float_prec !)
	(diam~ base~ precision_set~ diam_mp~ :mp_set_float_prec !)
	(diam_mp~ pi_mp~ circ_mp~ :mp_mul_float !)
	print_s (circstr~)
	(circ_mp~ formatstr~ precision~ :mp_print_float !)
(funcend)
(calc_area->circle func)
	 #var ~ circle

	// calculate area
	print_s (radiusstr~)
	// input radius
	input_s (input_len~, radius~)
	(zerod~ base~ precision_set~ area_mp~ :mp_set_float_prec !)
	(radius~ base~ precision_set~ radius_mp~ :mp_set_float_prec !)
    (radius_mp~ radius_mp~ area_mp~ :mp_mul_float !)
	(area_mp~ pi_mp~ area_mp~ :mp_mul_float !)
	print_s (areastr~)
	(area_mp~ formatstr~ precision~ :mp_print_float !)
(funcend)
(objectend)

#include <mpfr-lib-auto.l1h>
