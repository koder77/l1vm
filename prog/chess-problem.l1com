// chess-problem - Brackets - put rice on chess field calculator
//
//
#include <intr.l1h>
(main func)
	(set int64 1 zero 0)
	(set int64 1 one 1)
	(set int64 1 two 2)
	(set int64 1 field 0)
	(set int64 1 total 5)
	(set int64 1 save 6)
	(set int64 1 loop 1)
	(set int64 1 maxloop 64)
	(set string s onestr "1.0")
	(set string s twostr "2.0")
	(set string s fieldstr "0.0")
	(set string s totalstr "1.0")
	(set string s formatstr "%.20Ff")
	(set string s textstr "chess field: ")
	(set string s totalnumstr "total: ")
	(set int64 1 precision 0)
	(set int64 1 base 10)
	(set int64 1 f 0)
	(zero :mp_math_init call)
	(loadreg)
	// set variables
	(onestraddr base one :mp_set_float call)
	(loadreg)
	(twostraddr base two :mp_set_float call)
	(loadreg)
	(fieldstraddr base field :mp_set_float call)
	(loadreg)
	(totalstraddr base total :mp_set_float call)
	(loadreg)
	print_n
	print_n
	(for-loop)
	(((loop maxloop <=) f =) f for)
        print_s (textstr)
        print_i (loop)
        print_n
		(((loop one ==) f =) f if+)
			(field one field :mp_add_float call)
			(loadreg)
		(else)
			(field two field :mp_mul_float call)
			(loadreg)
			(total field total :mp_add_float call)
			(loadreg)
		(endif)
		(field formatstraddr precision :mp_print_float call)
		(loadreg)
		print_n
		print_s (totalnumstr)
		(total formatstraddr precision :mp_print_float call)
		(loadreg)
		print_n
		print_n
		((loop one +) loop =)
	(next)
	(:mp_cleanup call)
	(loadreg)
	exit (zero)
(funcend)
#include <mpfr-lib-auto.l1h>
