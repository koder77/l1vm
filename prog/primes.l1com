// primes.l1com
// check if number in given range is prime or not
//
#include <intr.l1h>
#include <math-const.l1h>
(main func)
	(set const-int64 1 zero 0)
    (set const-int64 1 one 1)
	(set const-int64 1 two 2)
	(set const-int64 1 three 3)
	(set int64 1 start 1)
	(set int64 1 end 100000000)
	(set int64 1 num 0)
	(set int64 1 f 0)
	(set int64 1 i 0)
	(set int64 1 max 0)
	(set double 1 numd 0.0)
	(set int64 1 mod 0)

	(zero :math_init !)

	(start num =)
	(for-loop)
	(((num end <=) f =) f for)
	    (reset-reg)
        // check for 2 or 3
        ((((num two ==) (num three ==) ||) f =) f if)
           (:show_num jmp)
        (endif)
        // check for 1
        (reset-reg)
        (((num one ==) f =) f if)
            (:not_prime jmp)
        (endif)

	    // convert num to double
        (num :math_int2double !)
	    (numd stpop)
	    (numd :math_sqrtdouble !)
	    (numd stpop)
        (numd :math_double2int !)
	    // now get max as the result of sqrt (num)
	    (max stpop)
	    (two i =)
	    (for-loop)
	    (((i max <=) f =) f for)
            // do trial modulo, if found at least one math to zero, then number is not prime
            ((num i %) mod =)
            (((mod zero ==) f =) f if)
                (:not_prime jmp)
            (endif)
            (reset-reg)
            ((i one +) i =)
        (next)

	    (:show_num)
		print_i (num)
        print_n

		(:not_prime)
	    (reset-reg)
        ((num one +) num =)
    (next)

	exit (zero)
(funcend)
#include <math-lib.l1h>
