// primes-4-timer.l1com - Sieve of Eratosthenes
// primenum search
//
//
(main func)
	(set int64 1 zero 0)
	(set byte 1000000000 primes)
	// (set byte 1000000 primes)
	(set int64 1 limit 1000000000)
	// (set int64 1 limit 1000000)
	(set int64 1 one 1)
	(set int64 1 two 2)
	(set int64 1 i 2)
	(set int64 1 j 0)
	(set int64 1 z 1)
	(set int64 1 f 0)
	(set int64 1 a 0)
	(set int64 1 k 0)
	(set int64 1 n 0)
	(set int64 1 timer 0)
	(set string s timestr "time: ")
	(set byte 1 oneb 1)
	// array primes is filled by zeroes
	//
	// search primes
	//
	(optimize-if)
	// start timer
	(24 0 0 0 intr0)
	(two i =)
	(:search_primes)
	((i i *) n =)
	(((n limit <) f =) f if)
		(primes [ i ] a =)
		(((a zero ==) f =) f if)
			(i j =)
			(:search)
			((i j *) k =)
			(((k limit <) f =) f if)
				(oneb primes [ k ] =)
				((j one +) j =)
				(:search jmp)
			(endif)
		(endif)
		((i one +) i =)
		(:search_primes jmp)
	(endif)
	// end timer
	(25 timer 0 0 intr0)
	(6 timestr 0 0 intr0)
	(4 timer 0 0 intr0)
	(7 0 0 0 intr0)
	// exit
	// (255 0 0 0 intr0)
	// print primes
	//
	(two i =)
	(:print_primes)
	(((i limit <) f =) f if)
		(primes [ i ] a =)
		(((a zero ==) f =) f if)
			(4 i 0 0 intr0)
			(7 0 0 0 intr0)
		(endif)
		((i one +) i =)
		(:print_primes jmp)
	(endif)
	(255 0 0 0 intr0)
(funcend)
