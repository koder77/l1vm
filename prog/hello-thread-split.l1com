// hello-thread-split.l1com
// Brackets - Hello world! threads
//
// This is an exammple how to launch threads using the new compiler opcode "loadl".
// In this example I used the "intr-func.l1h" include to use the new interrupt macros.
// This demo show show to run two threads inside the main function.
#include <intr-func.l1h>
#include <misc-macros.l1h>
(main func)
	(set const-int64 1 zero 0)
	(set const-int64 1 one 1)
	(set int64 1 f 0)
	(set int64 1 cpu_number 0)
	(set int64 1 lab_hello_one 0)
	(set int64 1 lab_hello_two 0)
	(set const-int64 1 maxloop 5)
	(set int64 1 i 0)
	(set int64 1 j 0)

	(set string s messagestr "starting...")
	(set string s Thread_astr "Thread a: ")
	(set string s Thread_bstr "Thread b: ")

	(:hello_a lab_hello_one loadl)
	(:hello_b lab_hello_two loadl)

	pull_int64_var (lab_hello_one)
    pull_int64_var (lab_hello_two)

	(lab_hello_one :pull_int64_var !)
	(lab_hello_two :pull_int64_var !)

	// run the two threads inside the main function
    (cpu_number :get_cpu !)
	(((cpu_number zero ==) f =) f if)
		(messagestr :print_s !)
		(:print_n !)
        (lab_hello_one :thread !)
	    (lab_hello_two :thread !)
	    (:join !)
	(endif)
	exit (zero)

    (:hello_a)
    (((i maxloop <) f :=) f for)
	    (Thread_astr :print_s !)
	    (i :print_i !)
        (:print_n !)
	    (i + one i :=)
	(next)
	(return)

	(:hello_b)
	(((j maxloop <) f :=) f for)
	    (Thread_bstr :print_s !)
	    (j :print_i !)
        (:print_n !)
	    (j + one j :=)
	(next)
	(return)
(funcend)
