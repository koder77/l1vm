// pov-edit.l1com
//
// editor for LED POV 8
//
// prog/byte-to-binary
// prog/test-pov-to-num
//
#include <math-const.l1h>
#include <intr.l1h>
(main func)
	(set const-int64 1 zero 0)
	(set const-int64 1 one 1)
	(set const-int64 1 two 2)
	(set const-int64 1 three 3)
	(set const-int64 1 four 4)
	(set const-int64 1 five 5)
	(set const-int64 1 six 6)
	(set const-int64 1 seven 7)
	// window ====================================================================
	(set int64 1 width 920)
	(set int64 1 height 450)
	(set int64 1 width_b 919)
	(set int64 1 height_b 449)
	(set int64 1 bit 32)
	(set int64 1 x 20)
	(set int64 1 y 20)
	(set int64 1 x_quit 770)
	(set int64 1 y_quit 250)
	(set int64 1 x_pattern 20)
	(set int64 1 y_pattern 250)
	(set int64 1 x_load 300)
	(set int64 1 y_load 250)
	(set int64 1 x_save 450)
	(set int64 1 y_save 250)
	(set int64 1 x_erase 300)
	(set int64 1 y_erase 200)
	(set int64 1 x_file 300)
	(set int64 1 y_file 300)
	// flash pattern elements ====================================================
	(set int64 1 x_port 300)
	(set int64 1 y_port 350)
	(set int64 1 portlen 25)
	(set int64 1 gadget_port 406)
	(set string s port_nametstr "Port: ")
	(set string 26 port_valuestr "/dev/ttyUSB0")
	(set int64 1 x_flash 770)
	(set int64 1 y_flash 350)
	(set string s flashstr " Flash ")
	(set int64 1 gadget_flash 407)
	// ===========================================================================
    // flash progressbar elements ================================================
    (set int64 1 x_progress 770)
    (set int64 1 y_progress 400)
    (set int64 1 value_progress 0)
    (set int64 1 gadget_progress 408)
	// filename string len of gadget ============================================
	(set int64 1 filelen 40)
	(set int64 1 gadgets 420)
	(set int64 1 gadget_quit 400)
	(set int64 1 gadget_pattern 401)
	(set int64 1 gadget_load 402)
	(set int64 1 gadget_save 403)
	(set int64 1 gadget_erase 404)
	(set int64 1 gadget_file 405)
	(set int64 1 gadget_erase_state 0)
	(set int64 1 pattern_val 0)
	(set int64 1 pattern_num 8)
	(set int64 1 status 1)
	(set int64 1 delay 10000)
	(set int64 1 delay_gui 1000)
	(set const-int64 1 x_width 50)
	(set const-int64 1 y_height 8)
	// ===========================================================================
	(set string s quitstr "  Quit  ")
	(set string s loadstr "  Load  ")
	(set string s savestr "  Save  ")
	(set string s erasestr "Erase")
	(set string s filenamestr  "File: ")
	(set string 41 filevaluestr "pov-edit/pov-edit.txt")
	(set string s pattern_1_str "pattern 1")
	(set string s pattern_2_str "pattern 2")
	(set string s pattern_3_str "pattern 3")
	(set string s pattern_4_str "pattern 4")
	(set string s pattern_5_str "pattern 5")
	(set string s pattern_6_str "pattern 6")
	(set string s pattern_7_str "pattern 7")
	(set string s pattern_8_str "pattern 8")
	(set string s pattern_str "pattern ")
	(set string s prog_str "progress")
	(set string s window_title_str "POV edit")
	(set string s fontname "fonts/free/FreeMono.ttf")
	(set int64 1 fontsize 20)
	// colors ====================================================================
	(set byte 1 back_r 143)
	(set byte 1 back_g 147)
	(set byte 1 back_b 151)
	(set byte 1 red_r 175)
	(set byte 1 red_g 15)
	(set byte 1 red_b 15)
	(set byte 1 alpha 255)
	(set byte 1 black 0)
	// ===========================================================================
	(set int64 1 gadget_sel 0)
	(set string 256 gadget_retstr "")
	(set int64 1 ret 0)
	(set int64 1 value 0)
	// the pixel pattern array: 8 * 400
	(set byte 3200 pattern 0)
	(set int64 1 pattern_max 399)
	(set int64 1 pattern_x 0)
	(set int64 1 pattern_y 0)
	// current pattern 1 = 0, starts by 0
	(set int64 1 pattern_sel 0)
	// pixel pattern length
	(set byte 8 pattern_len 0)
	// pixel pattern ascii
	(set byte 120 pattern_ascii 0)
	(set int64 1 pattern_ascii_len 119)
	(set int64 1 pattern_ascii_ind 0)
	(set int64 1 f 0)
	(set int64 1 i 0)
	(set int64 1 pattern_save 8)
	(set string s save_patternstr "saving pattern: ")
	(set int64 1 save_pattern_error 0)
	(set string s save_pattern_errstr "SAVE ERROR! Pattern overflow!")
	(set string s gadget_actstr "gadget selected: ")
	// open screen
    (zero width height bit zero :sdl_open_screen call)
	(ret stpopi)
	(window_title_str :sdl_set_window_title call)
	(one :string_init call)
	(two one :file_init call)
	(ret stpopi)
	(three :math_init call)
	(four :rs232_init call)
	// load font
    (fontnameaddr fontsize :sdl_font_ttf call)
	(gadgets :init_gui call)
	(zero zero width_b height_b back_r back_g back_b alpha :sdl_rectangle_fill call)
	(:init_paint_rect call)
	(gadget_quit x_quit y_quit quitstraddr status :set_gadget_button call)
	(x_pattern y_pattern pattern_str pattern_val status pattern_8_str pattern_7_str pattern_6_str pattern_5_str pattern_4_str pattern_3_str pattern_2_str pattern_1_str pattern_num gadget_pattern :set_gadget_cycle call)
	(gadget_load x_load y_load loadstraddr status :set_gadget_button call)
	(gadget_save x_save y_save savestraddr status :set_gadget_button call)
	(gadget_erase x_erase y_erase erasestr gadget_erase_state status :set_gadget_checkbox call)
	(gadget_file x_file y_file filenamestr filevaluestr filelen status :set_gadget_string call)
	(gadget_port x_port y_port port_nametstr port_valuestr portlen status :set_gadget_string call)
	(gadget_flash x_flash y_flash flashstr status :set_gadget_button call)
    (gadget_progress x_progress y_progress prog_str value_progress status :set_gadget_progress call)
	(:loop)
	stack_check
	(gadget_retstraddr :gadget_event call)
	(ret stpopi)
	(value stpopi)
	(gadget_sel stpopi)
	print_s (gadget_actstr)
	print_i (gadget_sel)
	print_n
	(((gadget_sel gadget_quit ==) f =) f if)
		(:sdl_quit jsr)
		free_mod (four)
		free_mod (three)
		free_mod (two)
		free_mod (one)
   		free_mod (zero)
		exit (zero)
	(endif)
	(((gadget_sel gadget_quit <) f =) f if)
		(gadget_sel :draw_grid_pixel call)
		// get x and y coordinate of active pattern pixel
		(gadget_sel x_width y_height :get_pattern_coord call)
		(pattern_x stpopi)
		(pattern_y stpopi)
		(pattern_x pattern_y x_width y_height :get_pattern_pixel call)
		(ret stpopi)
		(:loop jmp)
	(endif)
	(((gadget_sel gadget_pattern ==) f =) f if)
		(value pattern_sel =)
		print_s (pattern_str)
		print_i (pattern_sel)
		print_n
		(pattern_sel :draw_current_pattern call)
		(:loop jmp)
	(endif)
	(((gadget_sel gadget_load ==) f =) f if)
		(27 0 0 0 intr0)
		print_n
        (:save_text_reset call)
		(:flash_text_reset call)
		(:load_pattern_file call)
		(ret stpopi)
	    (((ret one ==) f =) f if+)
	        (:load_pattern_print_error call)
		(else)
		     (:load_pattern_print_ok call)
	    (endif)
		(pattern_sel :draw_current_pattern call)
		(:loop jmp)
	(endif)
	(((gadget_sel gadget_save ==) f =) f if)
		(:flash_text_reset call)
		(27 0 0 0 intr0)
		print_n
		(zero save_pattern_error =)
		(zero pattern_ascii_ind =)
		(zero i =)
		(for-loop)
		(((i pattern_save <) f =) f for)
			print_s (save_patternstr)
			print_i (i)
			print_n
			(i :save_pattern call)
			(ret stpopi)
			((ret zero +) ret =)
			(((ret one ==) f =) f if)
				(:gadget_save_end jmp)
			(endif)
			((i one +) i =)
		(next)
		(((zero save_pattern_error ==) f =) f if+)
			(:save_pattern_file call)
			(ret stpopi)
			(:save_pattern_print_ok call)
		(else)
			print_s (save_pattern_errstr)
			print_n
			print_n
			(:save_pattern_print_error call)
		(endif)
		(:gadget_save_end)
		(:loop jmp)
	(endif)
	(((gadget_sel gadget_erase ==) f =) f if)
		// 1 = do erase in pattern array
		(value gadget_erase_state =)
	(endif)
	(((gadget_sel gadget_file ==) f =) f if)
		(filevaluestr gadget_retstr :string_copy call)
	(endif)
	(((gadget_sel gadget_port ==) f =) f if)
		(port_valuestr gadget_retstr :string_copy call)
	(endif)
	(((gadget_sel gadget_flash ==) f =) f if)
		(:flash_pattern call)
	(endif)
	(:loop jmp)
(funcend)
(update_flash_progress func)
	#var ~ update_flash_progress

	(set int64 1 percent~ 0)
	(set double 1 percentd~ 0.0)
	(set double 1 maxd~ 128.0)
	(set double 1 hundredd~ 100.0)
	(set int64 1 index~ 0)
	(set double 1 indexd~ 0.0)

	(set string s flash_progstr~ "progress: ")
	// get current flash position index
	(index~ stpop)
	(index~ :math_int2double call)
	(indexd~ stpop)
	{percentd~ = (hundredd~ / maxd~) * indexd~}
    (percentd~ :math_double2int call)
	(percent~ stpop)
    // update flash progress_bar
    //
    print_s (flash_progstr~)
	print_i (percent~)
	print_n

    (gadget_progress percent~ status :change_gadget_progress call)
	(:sdl_update call)
(funcend)
(store_pattern_pixel func)
	// store pixel in pattern array
	#var ~ store_pattern_pixel
	(set int64 1 pattern_total_pixelsstore_pattern_pixel 400)
	(set int64 1 pattern_index~ 0)
	(set int64 1 pixel_numberstore_pattern_pixel 0)
	(set int64 1 pattern_currentstore_pattern_pixel 0)
	(set int64 1 pixel_set~ 0)
	(set string s pixel_setstr~ "store_pattern_pixel: pixel_set: ")
	(set string s pattern_indexstr~ "store_pattern_pixel: pattern_index: ")
	(set byte 1 num~ 0)
	// 0 = not set, 1 = set
	(pixel_set~ stpopi)
	print_s (pixel_setstr~)
	print_i (pixel_set~)
	print_n
	// the current pattern (0 - 7)
	(pattern_currentstore_pattern_pixel stpopi)
	// the pixel number as set by the grid array button gadgets
	(pixel_numberstore_pattern_pixel stpopi)
	// calculate pixel index of pattern array
	{pattern_index~ = (pattern_currentstore_pattern_pixel * pattern_total_pixelsstore_pattern_pixel) + pixel_number~}
	print_s (pattern_indexstr~)
	print_i (pattern_index~)
	print_n
	(cast pixel_set~ num~ =)
	(num~ pattern [ pattern_index~ ] =)
(funcend)
(get_pattern_coord func)
	// get x and y coordinates of pattern grid gadget number
	#var ~ get_pattern_coord
	(set int64 1 grid_number~ 0)
	(set int64 1 x~ 0)
	(set int64 1 y~ 0)
	(set int64 1 width~ 0)
	(set int64 1 height~ 0)
	(set int64 1 i~ 0)
	(set string s x_str~ "grid x: ")
	(set string s y_str~ " y: ")
	(height~ stpopi)
	(width~ stpopi)
	(grid_number~ stpopi)
	// calculate x and y coordinates given gadget number and width/height of grid
	((grid_number~ width~ /) y~ =)
	((y~ width~ *) i~ =)
	((grid_number~ i~ -) x~ =)
	print_s (x_str~)
	print_i (x~)
	print_s (y_str~)
	print_i (y~)
	print_n
	(y~ stpushi)
	(x~ stpushi)
(funcend)
(get_pattern_pixel func)
	// get pattern pixel on given coordinate
	#var ~ get_pattern_pixel
	(set const-int64 1 one~ 1)
	(set int64 1 grid_number~ 0)
	(set int64 1 x~ 0)
	(set int64 1 y~ 0)
	(set int64 1 width~ 0)
	(set int64 1 height~ 0)
	(set string s pixel_str~ "pixel: ")
	(height~ stpopi)
	(width~ stpopi)
	(y~ stpopi)
	(x~ stpopi)
	((y~ width~ *) grid_number~ =)
	((grid_number~ x~ +) grid_number~ =)
	// print_s (pixel_str~)
	// print_i (grid_number~)
	// print_n
	(grid_number~ stpushi)
(funcend)
(init_paint_rect func)
	#var ~ draw_paint_rect
	(set const-int64 1 zero~ 0)
	(set const-int64 1 one~ 1)
	(set int64 1 x_start~ 10)
	(set int64 1 y_start~ 10)
	(set const-int64 1 x_width~ 50)
	(set const-int64 1 y_height~ 8)
	(set const-int64 1 tile_width~ 18)
	(set int64 1 x_tiles~ 0)
	(set int64 1 y_tiles~ 0)
	(set byte 1 color~ 0)
	(set byte 1 alpha~ 255)
	(zero~ zero~ x_start~ y_start~ x_width~ y_height~ tile_width~ tile_width~ color~ color~ color~ alpha~ one~ :set_gadget_box_grid call)
(funcend)
(draw_grid_pixel func)
	// get gadget num and draw selected pixel
	#var ~ draw_grid_pixel
	(set const-int64 1 zero~ 0)
	(set const-int64 1 one~ 1)
	(set int64 1 gadget_num~ 0)
	(set int64 1 f~ 0)
	(set int64 1 selected~ 0)
	(set string s gadget_str~ "gadget: ")
	(set string s status_str~ "selected: ")
	(gadget_num~ stpopi)
	print_s (gadget_str~)
	print_i (gadget_num~)
	print_n
	print_s (status_str~)
	print_i (selected~)
	print_n
	(((gadget_erase_state zero~ ==) f~ =) f~ if+)
		(gadget_num~ pattern_sel one~ :store_pattern_pixel call)
		(gadget_num~ selected~ one~ red_r red_g red_b alpha :change_gadget_box_grid call)
	(else)
		(gadget_num~ pattern_sel zero~ :store_pattern_pixel call)
		(gadget_num~ selected~ one~ back_r back_g back_b alpha :change_gadget_box_grid call)
	(endif)
(funcend)
(draw_grid_pixel_pattern func)
	// get pattern grid pixel and draw selected pixel
	#var ~ draw_grid_pixel_pattern
	(set const-int64 1 zero~ 0)
	(set const-int64 1 one~ 1)
	(set int64 1 gadget_num~ 0)
	(set int64 1 f~ 0)
	(set int64 1 selected~ 0)
	(set string s gadget_str~ "draw_grid_pixel_pattern: ")
	(set string s status_str~ "selected: ")
	(selected~ stpopi)
	(gadget_num~ stpopi)
	print_s (gadget_str~)
	print_i (gadget_num~)
	print_n
	print_s (status_str~)
	print_i (selected~)
	print_n
	(((selected~ one~ ==) f~ =) f~ if+)
		(gadget_num~ pattern_sel one~ :store_pattern_pixel call)
		(gadget_num~ selected~ one~ red_r red_g red_b alpha :change_gadget_box_grid call)
	(else)
		(gadget_num~ pattern_sel zero~ :store_pattern_pixel call)
		(gadget_num~ selected~ one~ back_r back_g back_b alpha :change_gadget_box_grid call)
	(endif)
(funcend)
(draw_current_pattern func)
	// draw actual pattern
	#var ~ draw_current_pattern
	(set int64 1 zero~ 0)
	(set int64 1 one~ 1)
	(set int64 1 pixel_number~ 0)
	(set int64 1 pattern_total_pixels~ 400)
	(set int64 1 pattern_index~ 0)
	(set int64 1 pattern_current~ 0)
	(set int64 1 pixel_set~ 0)
	(set int64 1 f~ 0)
	(pattern_current~ stpopi)
	(zero~ pixel_number~ =)
	(for-loop)
	(((pixel_number~ pattern_total_pixels~ <) f =) f for)
		{pattern_index~ = (pattern_current~ * pattern_total_pixels~) + pixel_number~}
		(pattern [ pattern_index~ ] pixel_set~ =)
		// draw gadget grid pixel
		(((pixel_set~ one~ ==) f~ =) f~ if+)
			(pixel_number~ pattern_current~ one~ red_r red_g red_b alpha :change_gadget_box_grid call)
		(else)
			(pixel_number~ pattern_current~ one~ back_r back_g back_b alpha :change_gadget_box_grid call)
		(endif)
		((pixel_number~ one~ +) pixel_number~ =)
	(next)
(funcend)
(save_pattern func)
	// save pattern to output array
	#var ~ save_pattern
	(set int64 1 zero~ 0)
	(set int64 1 one~ 1)
	(set int64 1 notset~ 255)
	(set int64 1 f~ 0)
	(set int64 1 x~ 0)
	(set int64 1 y~ 0)
	(set int64 1 pattern_x~ 0)
	(set byte 1 pixelb~ 0)
	(set int64 1 pixel_number~ 0)
	(set int64 1 pattern_total_pixels~ 400)
	(set int64 1 pattern_index~ 0)
	(set int64 1 pattern_current~ 0)
	(set int64 1 pixel_set~ 0)
	(set int64 1 pixelshift~ 0)
	(set byte 1 num 0)
	(set string s pattern_full_errorstr "ERROR: pattern save overflow!")
	(set string s pattern_savestr "saving pattern: pattern len: ")
	(set byte 1 num~ 0)
	(pattern_current~ stpopi)
	// scan for rightmost pixels in pattern ======================================
	(x_width x~ =)
	((x~ one~ -) x~ =)
	(notset~ pattern_x~ =)
	(for-loop)
	(((x~ zero~ >=) f~ =) f~ for)
		(zero~ y~ =)
		(for-loop)
		(((y~ y_height <) f~ =) f~ for)
			(x~ y~ x_width y_height :get_pattern_pixel call)
			(pixel_number~ stpopi)
			{pattern_index~ = (pattern_current~ * pattern_total_pixels~) + pixel_number~}
			(pattern [ pattern_index~ ] pixel_set~ =)
			((pixel_set~ zero~ +) pixel_set~ =)
			(((pixel_set~ one~  ==) f~ =) f~ if)
				// found red pixel
				// set pattern length
				(x~ pattern_x~ =)
				(:save_pattern_save jmp)
			(endif)
			((y~ one~ +) y~ =)
		(next)
		((x~ one~ -) x~ =)
	(next)
	(:save_pattern_save)
	(((pattern_x~ notset~ !=) f =) f if+)
		// add one to get width in pixels
		((pattern_x~ one~ +) pattern_x~ =)
	(else)
		// no pixel set so length is zero
		(zero~ pattern_x~ =)
	(endif)
	print_s (pattern_savestr)
	print_i (pattern_x~)
	print_n
	(cast pattern_x~ num~ =)
	(num~ pattern_len [ pattern_current~ ] =)
	// save pattern ==============================================================
	(zero~ x~ =)
	(for-loop)
	(((x~ pattern_x~ <) f~ =) f~ for)
		(zero~ y~ =)
		(cast zero~ pixelb~ =)
		(for-loop)
		(((y~ y_height <) f~ =) f~ for)
			(x~ y~ x_width y_height :get_pattern_pixel call)
			(pixel_number~ stpopi)
			{pattern_index~ = (pattern_current~ * pattern_total_pixels~) + pixel_number~}
			(pattern [ pattern_index~ ] pixel_set~ =)
			(((pixel_set~ one~  ==) f~ =) f~ if)
				// found red pixel
				((one~ y~ <<) pixelshift~ =)
				(cast pixelshift~ num~ =)
				((pixelb~ num~ +) pixelb~ =)
			(endif)
			((y~ one~ +) y~ =)
		(next)
		// save in pixel output array
		(pixelb~ pattern_ascii [ pattern_ascii_ind ] =)
		(((pattern_ascii_ind pattern_ascii_len <) f~ =) f~ if+)
			((pattern_ascii_ind one~ +) pattern_ascii_ind =)
		(else)
			print_s (pattern_full_errorstr)
			print_n
			print_n
			(one~ save_pattern_error =)
			(one~ stpushi)
			(:save_pattern_end jmp)
		(endif)
		((x~ one~ +) x~ =)
	(next)
	(zero~ stpushi)
	(:save_pattern_end)
(funcend)
(save_pattern_print_error func)
// print save error message
	#var ~ save_pattern_print_error
	(set int64 1 textx~ 450)
	(set int64 1 texty~ 205)
	(set int64 1 textx2~ 800)
	(set int64 1 texty2~ 230)
	(set string s save_error_str~ "SAVE ERROR: pattern overflow!")
	// clear text position background
	(textx~ texty~ textx2~ texty2~ back_r back_g back_b alpha :sdl_rectangle_fill call)
	(textx~ texty~ red_r red_g red_b save_error_str~ :sdl_text_ttf call)
	(:sdl_update call)
(funcend)
(save_pattern_print_ok func)
// print save OK message
	#var ~ save_pattern_print_ok
	(set int64 1 textx~ 450)
	(set int64 1 texty~ 205)
	(set int64 1 textx2~ 800)
	(set int64 1 texty2~ 230)
	(set byte 1 black~ 0)
	(set string s save_ok_str~ "SAVE OK!")
	// clear text position background
	(textx~ texty~ textx2~ texty2~ back_r back_g back_b alpha :sdl_rectangle_fill call)
	(textx~ texty~ black~ black~ black~ save_ok_str~ :sdl_text_ttf call)
	(:sdl_update call)
(funcend)
(load_pattern_print_error func)
// print save error message
	#var ~ load_pattern_print_error
	(set int64 1 textx~ 450)
	(set int64 1 texty~ 205)
	(set int64 1 textx2~ 800)
	(set int64 1 texty2~ 230)
	(set string s load_error_str~ "LOAD ERROR: can't load!")
	// clear text position background
	(textx~ texty~ textx2~ texty2~ back_r back_g back_b alpha :sdl_rectangle_fill call)
	(textx~ texty~ red_r red_g red_b load_error_str~ :sdl_text_ttf call)
	(:sdl_update call)
(funcend)
(load_pattern_print_ok func)
// print save OK message
	#var ~ load_pattern_print_ok
	(set int64 1 textx~ 450)
	(set int64 1 texty~ 205)
	(set int64 1 textx2~ 800)
	(set int64 1 texty2~ 230)
	(set byte 1 black~ 0)
	(set string s load_ok_str~ "LOAD OK!")
	// clear text position background
	(textx~ texty~ textx2~ texty2~ back_r back_g back_b alpha :sdl_rectangle_fill call)
	(textx~ texty~ black~ black~ black~ load_ok_str~ :sdl_text_ttf call)
	(:sdl_update call)
(funcend)
(save_text_reset func)
	#var ~ save_text_reset
	(set int64 1 textx~ 450)
	(set int64 1 texty~ 205)
	(set int64 1 textx2~ 800)
	(set int64 1 texty2~ 230)
	// clear text position background
	(textx~ texty~ textx2~ texty2~ back_r back_g back_b alpha :sdl_rectangle_fill call)
	(:sdl_update call)
(funcend)
(save_pattern_file func)
// save pattern array to file
	#var ~ save_pattern_file
	(set int64 1 zero~ 0)
	(set int64 1 one~ 1)
	(set int64 1 f~ 0)
	(set int64 1 ret~ 0)
	(set int64 1 fhandle~ 0)
	(set int64 1 ind~ 0)
	(set int64 1 outind~ 0)
	(set int64 1 maxind~ 128)
	(set int64 1 maxleninfo~ 8)
	(set int64 1 len~ 0)
	(set int64 1 pixelb~ 0)
	(set int64 1 chksum~ 0)
	(set string 256 bufstr~ "")
	(set string 256 linebufstr~ "")
	(set string s emptystr~ "")
	(set int64 1 bufstrlen~ 255)
	(set string s commastr~ ",")
	// (set string s pattern_filestr~ "pov-edit.txt")
	(set string s fopenerrstr~ "ERROR: can't open pattern file!")
	(set string s fwriteerrstr~ "ERROR: can't write pattern file!")
	(set string s saveokstr~ "SAVE OK!")
	(set byte 1 mode_read~ 1)
	(set byte 1 mode_write~ 2)
	(set byte 1 newline~ 10)
	// open pattern output file
	(mode_write~ filevaluestr :file_open call)
	(fhandle~ stpopi)
	(((fhandle~ zero~ <) f~ =) f~ if)
		// error can't open file
		print_s (fopenerrstr~)
		print_n
		(one~ stpushi)
		(:save_pattern_file_end jmp)
	(endif)
	// save pattern lengths of the 8 patterns
	(zero~ ind~ =)
	(zero~ outind~ =)
	(for-loop)
	(((ind~ maxleninfo~ <) f~ =) f~ for)
		(linebufstr~ emptystr~ :string_copy call)
		// write byte index number (0 - 127) to output line buffer
		(outind~ bufstr~ bufstrlen~ :string_int64tostring call)
		(linebufstr~ bufstr~ :string_cat call)
		// write comma to line buffer
		(linebufstr~ commastr~ :string_cat call)
		// write data length to line buffer
		(pattern_len [ ind~ ] len~ =)
		((len~ zero~ +) len~ =)
		(len~ bufstr~ bufstrlen~ :string_int64tostring call)
		(linebufstr~ bufstr~ :string_cat call)
		// write comma to line buffer
		(linebufstr~ commastr~ :string_cat call)
		// write checksum xor to line buffer
		((outind~ len~ ^) chksum~ =)
		(chksum~ bufstr~ bufstrlen~ :string_int64tostring call)
		(linebufstr~ bufstr~ :string_cat call)
		// write output buffer line
		(fhandle~ linebufstr~ :file_put_string call)
		(ret stpopi)
		(((ret zero~ !=) f =) f if)
			// write error
			print_s (fwriteerrstr~)
			print_n
			(one~ stpushi)
			(:save_pattern_file_end jmp)
		(endif)
		// save newline char
		(fhandle~ newline~ :file_putc call)
		(ret stpopi)
		(((ret zero~ !=) f =) f if)
			// write error
			print_s (fwriteerrstr~)
			print_n
			(one~ stpushi)
			(:save_pattern_file_end jmp)
		(endif)
		((ind~ one~ +) ind~ =)
		((outind~ one~ +) outind~ =)
	(next)
	// save pattern data (8 - 127) pixel patterns
	(zero~ pattern_ascii_ind =)
	(for-loop)
	(((ind~ maxind~ <) f~ =) f~ for)
		(linebufstr~ emptystr~ :string_copy call)
		// write byte index number (0 - 127) to output line buffer
		(outind~ bufstr~ bufstrlen~ :string_int64tostring call)
		(linebufstr~ bufstr~ :string_cat call)
		// write comma to line buffer
		(linebufstr~ commastr~ :string_cat call)
		// write data length to line buffer
		(pattern_ascii [ pattern_ascii_ind ] pixelb~ =)
		((pixelb~ zero~ +) pixelb~ =)
		(pixelb~ bufstr~ bufstrlen~ :string_int64tostring call)
		(linebufstr~ bufstr~ :string_cat call)
		// write comma to line buffer
		(linebufstr~ commastr~ :string_cat call)
		// write checksum xor to line buffer
		((outind~ pixelb~ ^) chksum~ =)
		(chksum~ bufstr~ bufstrlen~ :string_int64tostring call)
		(linebufstr~ bufstr~ :string_cat call)
		// write output buffer line
		(fhandle~ linebufstr~ :file_put_string call)
		(ret stpopi)
		(((ret zero~ !=) f =) f if)
			// write error
			print_s (fwriteerrstr~)
			print_n
			(one~ stpushi)
			(:save_pattern_file_end jmp)
		(endif)
		// save newline char
		(fhandle~ newline~ :file_putc call)
		(ret stpopi)
		(((ret zero~ !=) f =) f if)
			// write error
			print_s (fwriteerrstr~)
			print_n
			(one~ stpushi)
			(:save_pattern_file_end jmp)
		(endif)
		((ind~ one~ +) ind~ =)
		((outind~ one~ +) outind~ =)
		((pattern_ascii_ind one~ +) pattern_ascii_ind =)
	(next)
	(zero~ stpushi)
	(:save_pattern_file_end)
	(fhandle~ :file_close call)
	print_n
	print_s (saveokstr~)
	print_n
	print_n
(funcend)
(load_pattern_file func)
// load pattern array from file
	#var ~ load_pattern_file
	(set int64 1 zero~ 0)
	(set int64 1 one~ 1)
	(set int64 1 f~ 0)
	(set int64 1 ret~ 0)
	(set int64 1 fhandle~ 0)
	(set string 256 linebufstr~ "")
	(set string s emptystr~ "")
	(set int64 1 bufstrlen~ 255)
	(set int64 1 pattern_max~ 8)
	(set int64 1 maxind~ 128)
	(set string s fopenerrstr~ "ERROR: can't open pattern file!")
	(set string s freaderrstr~ "ERROR: can't read pattern file!")
	(set string s chksum_errstr~ "ERROR: checksum error!")
	(set string s load_pattern_startstr~ "load pattern start...")
	(set string s load_pattern_filestr~ "try to load file: '")
	(set string s load_pattern_readstr~ "reading file...")
    (set string s hcommastr "'")
    (set string s okstr~ "ok!")
	(set byte 1 mode_read~ 1)
	(set byte 1 mode_write~ 2)
	(set int64 1 i~ 0)
	(set int64 1 ind~ 0)
	(set int64 1 len~ 0)
	(set int64 1 chksum~ 0)
	(set int64 1 chksum_calc~ 0)
	(set int64 1 x~ 0)
	(set int64 1 y~ 0)
	(set int64 1 pixelb~ 0)
	(set int64 1 y_height~ 8)
	(set int64 1 pattern_total_pixelsload_pattern_file 400)
	(set int64 1 pattern_index~ 0)
	(set int64 1 pattern_currentload_pattern_file 0)
	(set int64 1 pixel_set~ 0)
	(set int64 1 pixelshift~ 0)
	(set int64 1 bitset~ 0)
	(set int64 1 pixel_numberload_pattern_file 0)
	(set byte 1 num~ 0)
	print_s (load_pattern_startstr~)
	print_n
	// set all pattern pixels to zero
	(zero~ i~ =)
	(for-loop)
	(((i~ pattern_total_pixelsload_pattern_file <) f =) f for)
		(cast zero~ num~ =)
		(num~ pattern [ i~ ] =)
		((i~ one~ +) i~ =)
	(next)
	print_s (load_pattern_filestr~)
	print_s (filevaluestr)
    print_s (hcommastr)
	print_n
	// open pattern input file
	(mode_read~ filevaluestr :file_open call)
	(fhandle~ stpopi)
	(((fhandle~ zero~ <) f~ =) f~ if)
		// error can't open file
		print_s (fopenerrstr~)
		print_n
		(one~ stpushi)
		(:load_pattern_file_error_end jmp)
	(endif)
	print_s (load_pattern_readstr~)
	print_n
	(zero~ i~ =)
	// load pattern lengths from file
	(for-loop)
	(((i~ pattern_max~ <) f~ =) f~ for)
		(fhandle~ linebufstr~ bufstrlen~ :file_get_string call)
		(ret~ stpopi)
		(((ret~ zero~ <) f~ =) f~ if)
			// error can't read file
			print_s (freaderrstr~)
			print_n
			(one~ stpushi)
			(:load_pattern_file_end jmp)
		(endif)
		(linebufstr~ :get_pov_data call)
		(ind~ stpopi)
		(len~ stpopi)
		(chksum~ stpopi)
		// calculate read checksum
		((ind~ len~ ^) chksum_calc~ =)
		(((chksum~ chksum_calc~ !=) f~ =) f~ if)
			print_s (chksum_errstr~)
			print_n
			(one~ stpushi)
			(:load_pattern_file_end jmp)
		(endif)
		(cast len~ num~ =)
		(num~ pattern_len [ ind~ ] =)
		((i~ one~ +) i~ =)
	(next)
	// load pov byte data
	(zero~ pattern_currentload_pattern_file =)
	(zero~ i~ =)
	(for-loop)
	(((i~ pattern_max~ <) f~ =) f~ for)
		(pattern_len [ i~ ] len~ =)
		((len~ zero~ +) len~ =)
		(zero~ x~ =)
		(for-loop)
		(((x~ len~ <) f~ =) f~ for)
			// load pixel byte from file
			(fhandle~ linebufstr~ bufstrlen~ :file_get_string call)
			(ret~ stpopi)
			(((ret~ zero~ <) f~ =) f~ if)
				// error can't read file
				print_s (freaderrstr~)
				print_n
				(one~ stpushi)
				(:load_pattern_file_end jmp)
			(endif)
			(linebufstr~ :get_pov_data call)
			(ind~ stpopi)
			(pixelb~ stpopi)
			(chksum~ stpopi)
			// calculate read checksum
			((ind~ pixelb~ ^) chksum_calc~ =)
			(((chksum~ chksum_calc~ !=) f~ =) f~ if)
				print_s (chksum_errstr~)
				print_n
				(one~ stpushi)
				(:load_pattern_file_end jmp)
			(endif)
			(zero~ y~ =)
			(for-loop)
			(((y~ y_height~ <) f~ =) f~ for)
				// get the set bits from input byte and store them in pixel array
				(pixelb~ y~ :check_bitset call)
				(bitset~ stpopi)
				(((bitset~ zero~ !=) f~ =) f~ if)
					// bit is set store pixel in pixel array
					(x~ y~ x_width y_height :get_pattern_pixel call)
			        (pixel_numberload_pattern_file stpopi)
			        {pattern_index~ = (pattern_currentload_pattern_file * pattern_total_pixelsload_pattern_file) + pixel_number~}
					(cast one~ num~ =)
			        (num~ pattern [ pattern_index~ ] =)
				(endif)
				((y~ one~ +) y~ =)
			(next)
			((x~ one~ +) x~ =)
		(next)
		((pattern_currentload_pattern_file one~ +) pattern_currentload_pattern_file =)
		((i~ one~ +) i~ =)
	(next)
	(zero~ stpushi)
	(:load_pattern_file_end)
	(fhandle~ :file_close call)
	(:load_pattern_file_error_end)
(funcend)
// load pov data help functions ===============================================
(check_bitset func)
	#var ~ check_bitset
	(set int64 1 one~ 1)
	(set int64 1 bit~ 0)
	(set int64 1 shift~ 0)
	(set int64 1 bitset~ 0)
	(set int64 1 num~ 0)
	(bit~ stpopi)
	(num~ stpopi)
	((one~ bit~ <<) shift~ =)
	((num~ shift~ &) bitset~ =)
	(bitset~ stpushi)
(funcend)
(get_pov_data func)
	#var ~ get_pov_data
	(set int64 1 zero~ 0)
	(set int64 1 one~ 1)
	(set int64 1 two~ 2)
	(set int64 1 negone~ -1)
	(set int64 1 datalen~ 0)
	(set int64 1 datastr~ 0)
	(set string 256 bufstr~ "")
	(set string s emptystr~ "")
	(set string 2 commastr~ ",")
	(set int64 1 ind~ 0)
	(set int64 1 povbyte~ 0)
	(set int64 1 chksum~ 0)
	(set int64 1 i~ 0)
	(set string 2 ch~ "")
	(set int64 1 f~ 0)
	(set int64 1 rightlen~ 0)
	(set int64 1 comp~ 0)
	(set int64 1 found_comma~ 0)
	(datastr~ stpopi)
	// get length of data string
	(datastr~ :string_len call)
	(datalen~ stpopi)
	(((datalen~ zero~ ==) f~ =) f~ if)
		// error input string empty, return -1
		(negone~ stpushi)
		(negone~ stpushi)
		(negone~ stpushi)
		(:get_pov_data_end jmp)
	(endif)
	(zero~ i~ =)
	(zero~ found_comma~ =)
	(bufstr~ emptystr~ :string_copy call)
	(:get_pov_data_loop)
		// get char from data string
		(datastr~ ch~ i~ :string_mid call)
		(ch~ commastr~ :string_compare call)
		(comp~ stpopi)
		(((comp~ zero~ ==) f~ =) f~ if+)
			// found comma
			((found_comma~ one~ +) found_comma~ =)
			(((found_comma~ one~ ==) f~ =) f~ if)
				(bufstr~ :string_to_int call)
				(ind~ stpopi)
				(bufstr~ emptystr~ :string_copy call)
			(endif)
			(((found_comma~ two~ ==) f~ =) f~ if)
				(bufstr~ :string_to_int call)
				(povbyte~ stpopi)
				(bufstr~ emptystr~ :string_copy call)
				(:get_pov_data_loop_end jmp)
			(endif)
		(else)
			// add char to buffer
			(bufstr~ ch~ :string_cat call)
		(endif)
		((i~ one~ +) i~ =)
		(:get_pov_data_loop jmp)
	(:get_pov_data_loop_end)
	// get checksum
	((i~ one~ +) i~ =)
	((datalen~ i~ -) rightlen~ =)
	(datastr~ bufstr~ rightlen~ :string_right call)
	(bufstr~ :string_to_int call)
	(chksum~ stpopi)
	(:get_pov_data_end)
	(chksum~ stpushi)
	(povbyte~ stpushi)
	(ind~ stpushi)
(funcend)
// flash pattern to RS232 port functions ======================================
(flash_pattern_print_error func)
// print flash error message
	#var ~ flash_pattern_print_error
	(set int64 1 textx~ 300)
	(set int64 1 texty~ 400)
	(set int64 1 textx2~ 600)
	(set int64 1 texty2~ 425)
	(set string s save_error_str~ "FLASH ERROR !")
	// clear text position background
	(textx~ texty~ textx2~ texty2~ back_r back_g back_b alpha :sdl_rectangle_fill call)
	(textx~ texty~ red_r red_g red_b save_error_str~ :sdl_text_ttf call)
(funcend)
(flash_pattern_print_ok func)
// print flash OK message
	#var ~ flash_pattern_print_ok
	(set int64 1 textx~ 300)
	(set int64 1 texty~ 400)
	(set int64 1 textx2~ 600)
	(set int64 1 texty2~ 425)
	(set byte 1 black~ 0)
	(set string s save_ok_str~ "FLASH OK!")
	// clear text position background
	(textx~ texty~ textx2~ texty2~ back_r back_g back_b alpha :sdl_rectangle_fill call)
	(textx~ texty~ black~ black~ black~ save_ok_str~ :sdl_text_ttf call)
(funcend)
(flash_text_reset func)
	#var ~ flash_text_reset
	(set int64 1 textx~ 300)
	(set int64 1 texty~ 400)
	(set int64 1 textx2~ 600)
	(set int64 1 texty2~ 425)
	// clear text position background
	(textx~ texty~ textx2~ texty2~ back_r back_g back_b alpha :sdl_rectangle_fill call)
(funcend)
// include one of them: ========================================================
// libserialport

// the flashing pattern function using RS232 libserial library
(flash_pattern func)
	#var ~ flash_pattern
	(set int64 1 zero~ 0)
	(set int64 1 one~ 1)
	(set byte 1 address~ 0)
	(set byte 1 i~ 160)
	(set byte 1 checksum_send~ 0)
	(set byte 1 checksum_rec~ 0)
	(set int64 1 baudrate~ 19200)
	(set int64 1 retcode~ 0)
	(set int64 1 f~ 0)
	(set string 4096 buf~ "")
	(set int64 1 bufsize~ 4095)
	(set int64 1 readsize~ 0)
	(set string s ready_endstr~ "V1.0 ready")
	(set string s open_port_failstr~ "can't open serial port!")
	(set string s open_port_okstr~ "serial port opened")
	(set string s receive_readystr~ "LED POV 8 ready for flashing...")
	(set string s read_errorstr~ "can't read 1 byte!")
	(set string s write_errorstr~ "can't write 1 byte!")
	(set string s flashstr~ "flashing LED POV 8...")
	(set string s fopenerrstr~ "ERROR: can't open pattern file!")
	(set string s freaderrstr~ "ERROR: can't read pattern file!")
	(set int64 1 delay~ 100)
	(set int64 1 shandle~ 0)
	(set int64 1 fhandle~ 0)
	(set byte 1 mode_read~ 1)
	(set int64 1 ind~ 0)
	(set int64 1 ret~ 0)
	(set int64 1 ch~ 0)
	(set string 256 bufstr~ "")
	(set int64 1 bufstrlen~ 0)
	(set int64 1 buflen~ 0)
	(set string 2 chstr~ "")
	(set string s quotechstr~ "'")
	(set int64 1 newline~ 10)
	(set string 2 newlinestr~ "")
	(set int64 1 flash_ind~ 0)
	(set int64 1 flash_max~ 127)
    (flash_ind~ :update_flash_progress call)
	(newline~ newlinestr~ :string_bytenumtostring call)
	(:flash_text_reset call)
	(shandle~ port_valuestr baudrate~ :rs232_open_comport call)
	(retcode~ stpopi)
	(loadreg)
	(((retcode~ zero~ !=) f~ =) f~ if+)
		print_s (open_port_failstr~)
		print_n
		// error can't open port
		(:flash_pattern_print_error call)
		(:flash_pattern_end jmp)
	(else)
		print_s (open_port_okstr~)
		print_n
	(endif)
	// wait for "V1.0 ready" message
	(:flash_pattern_loop_wait)
	(shandle~ buf~ bufsize~ :rs232_poll_comport_wait call)
	(readsize~ stpopi)
	(loadreg)
	(((readsize~ zero~ <=) f~ =) f~ if)
		print_s (read_errorstr~)
		print_n
		detime (delay~)
		(:flash_pattern_loop_wait jmp)
	(endif)
	print_s (quotechstr~)
	print_s (buf~)
	print_s (quotechstr~)
	print_n
	// compare read byte with ready message
	(buf~ ready_endstr~ :string_compare call)
	(retcode~ stpopi)
	(((retcode~ zero~ ==) f~ =) f~ if+)
		print_s (receive_readystr~)
		print_n
	(else)
		(:flash_pattern_loop_wait jmp)
	(endif)
	(:flash_pattern_start)
	// got "V1.0 ready" message, flash patterns now
	print_s (flashstr~)
	print_n
	(zero ind~ =)
	// open pattern input file
	(mode_read~ filevaluestr :file_open call)
	(fhandle~ stpopi)
	(((fhandle~ zero <) f~ =) f~ if)
		// error can't open file
		print_s (fopenerrstr~)
		print_n
		(:flash_pattern_print_error call)
		(:flash_pattern_end jmp)
	(endif)
	(:flash_loop)
		(fhandle~ bufstr~ buflen~ :file_get_string call)
		(ret~ stpopi)
		(((ret~ zero~ !=) f~ =) f~ if)
			// EOF, exit flash loop
			(:flash_pattern_cleanup jmp)
		(endif)
		// add newline to read buffer
		(bufstr~ newlinestr~ :string_cat call)
		print_s (quotechstr~)
		print_s (bufstr~)
		print_s (quotechstr~)
		print_n
		(bufstr~ :string_len call)
		(bufstrlen~ stpopi)
		detime (delay~)
		// send byte buffer to serial port
		(shandle~ bufstr~ bufstrlen~ :rs232_send_buf call)
		(ret~ stpopi)
		(((ret~ zero <) f =) f if)
			print_s (write_errorstr~)
			print_n
			(:flash_pattern_print_error call)
			(:flash_pattern_end jmp)
		(endif)
		((flash_ind~ one~ +) flash_ind~ =)
	    (flash_ind~ :update_flash_progress call)
		(((flash_ind~ flash_max~ <=) f =) f if)
			(:flash_loop jmp)
		(endif)
	(:flash_pattern_cleanup)
	(shandle~ :rs232_close_comport call)
	(fhandle~ :file_close call)
	(zero~ flash_ind~ =)
	(:flash_pattern_print_ok call)
	(:flash_pattern_end)
(funcend)

#include <rs232-lib-libserialport.l1h>
// rs232 library ===============================================================
// include <rs232-normal.l1h>
// include <rs232-lib.l1h>
// =============================================================================
#include <sdl-lib.l1h>
#include <string.l1h>
#include <file-lib.l1h>
#include <math-lib.l1h>
