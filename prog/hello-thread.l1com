// Brackets - Hello world! threads
//
// This is an exammple how to launch threads using inline assembly.
//
(main func)
	(set int64 1 zero 0)
	(set int64 1 one 1)
	(set int64 1 two 2)
	(set int64 1 three 3)
	(set int64 1 four 4)
	(set int64 1 run 0)
	(set int64 1 f 0)
	(set string s infostr "starting threads...")
	// run the two threads
	(((run zero ==) f =) f if)
		(6 infostr 0 0 intr0)
		(7 0 0 0 intr0)
		(:start_thread !)
		(one run =)
	(endif)
	(255 0 0 0 intr0)
(funcend)
(start_thread func)
	(set int64 1 delay 2000)
	(set int64 1 run 0)
	// use inline assembly to start threads
	(ASM)
	// load the function labels into the registers 9 and 10
	loadl :hello_one, 9
	loadl :hello_two, 10
	// load the variables into the registers
	loada delay, 0, 11
	loada run, 0, 20
	loada zero, 0, 0
	loada one, 0, 1
	// start new threads if run = zero
	neqi 20, 0, 30
	jmpi 30, :start_thread_wait
	// start the threads using the labels in the registers
	intr1 0, 9, 0, 0
	intr1 0, 10, 0, 0
	// set variable run to one
	load run, 0, 40
	pullqw 1, 40, 0
	// wait for all threads to finish!
	:start_thread_wait
	intr0 8, 11, 0, 0
	intr1 1, 0, 0, 0
	(ASM_END)
(funcend)
(hello_one func)
	(set string s hello@hello_one "Hello world! thread 1")
	(set int64 1 delay@hello_one 2000)
	(6 hello@hello_one 0 0 intr0)
	(7 0 0 0 intr0)
	(8 delay@hello_one 0 0 intr0)
(funcend)
(hello_two func)
	(set string s hello@hello_two "Hello world! thread 2")
	(set int64 1 delay@hello_two 2000)
	(6 hello@hello_two 0 0 intr0)
	(7 0 0 0 intr0)
	(8 delay@hello_two 0 0 intr0)
(funcend)
