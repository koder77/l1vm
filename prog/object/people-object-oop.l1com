// people-object-oop.l1com
// use . variable names to build something like a pseudo data structure like in other
// programming languages
//
// NEW: using:
// #var ~ main to be more safe!
// using object for data and functions
//
#include <intr-func.l1h>
#include <vars.l1h>
(main func)
    #var ~ main

	(set int64 1 zero 0)
    (set int64 1 one  1)
    // person data with person. names
    (set string 256 person.first_name~ "Jane")
    (set string 256 person.last_name~ "Doe")
    (set string 256 person.gender~ "female")
    (set int64 1 person.age~ 30)
    (set double 1 person.height~ 1.80)
    (set string 256 person.eye_color~ "brown")
    (set string s meminitstr~ "ERROR can't init memory!")
	(set string s memerrstr~ "ERROR can't allocate memory!")
	(set string s saveerrstr~ "ERROR can't save to memory object!")
    (set int64 1 memaddr~ 0)
    (set int64 1 memind~ 0)
    (set int64 1 memsize~ 1)
	(set int64 1 variables~ 6)
    (set int64 1 ret~ 0)
    (set int64 1 f~ 0)
    // include memory object variable types
    #include <mem-obj-lib-types.l1h>
    (zero one :mem_obj_init !)
	(ret~ stpopi)
    (((ret~ zero !=) f~ =) f~ if)
		// ERROR can't allocate memory
		(meminitstr~ :print_s !)
		(:print_n !)
		(one :exit !)
	(endif)
    // allocate memory for the 6 variables
	(variables~ memsize~ :alloc_obj_memobj !)
	(memaddr~ stpopi)
	(loadreg)
	(((memaddr~ zero <) f~ =) f~ if)
		// ERROR can't allocate memory
        (memerrstr~ :print_s !)
		(:print_n !)
		(one :exit !)
	(endif)

	// store person data in mem object using memory variable types: s_type, i_type and d_type
    // going from right to left with variable types first before variable
    (person.eye_color~ s_type person.height~ d_type person.age~ i_type person.gender~ s_type person.last_name~ s_type person.first_name~ s_type variables~ zero memaddr~ :save_obj_memobj !)
    (ret~ stpopi)
	(((ret~ zero !=) f~ =) f~ if)
		// ERROR can't allocate memory
        (saveerrstr~ :print_s !)
		(:print_n !)
        (one :exit !)
	(endif)
    (memaddr~ :list_data->person !)
    // free memory
    (zero :free_obj_memobj !)
    (:free_memobj !)
    (zero :free_mod !)
    (zero :exit !)
(funcend)

// set variable ending check on: only local variables ending with "person" or globals ending with "main" allowed!
(variable-local-on)

// get person data from mem object
(person object)
    #var ~ person

    (set int64 1 f~)
    (set int64 1 zero~ 0)
    (set int64 1 variables~ 6)
    (set int64 1 memaddr~ 0)
    (set int64 1 ret~ 0)
    (set string s height_format~ "%.2lf")
    (set string 256 first_name~ "")
    (set string 256 last_name~ "")
    (set string 256 gender~ "")
    (set int64 1 age~ 0)
    (set double 1 height~ 0.0)
    (set string 256 eye_color~ "")
    (set string s memobj_err_str~ "ERROR reading memobject array!")
    // data pointer, make only changeable by "pointer" function to avoid memory errors
    (set const-int64 1 Pfirst_name~ 0)
    (set const-int64 1 Plast_name~ 0)
    (set const-int64 1 Pgender~ 0)
    (set const-int64 1 Page~ 0)
    (set const-int64 1 Pheight~ 0)
    (set const-int64 1 Peye_color~ 0)

(Pshow_data->person func)
    #var ~ person

    (Peye_color~ Pheight~ Page~ Pgender~ Plast_name~ Pfirst_name~ variables~ zero~ memaddr~ :load_obj_array_memobj !)
    (ret~ stpopi)
    (((ret~ zero~ !=) f~ =) f~ if+)
        (memobj_err_str~ :print_s !)
        (:print_n !)
    (else)
        (first_name~ :print_s !)
        (:print_n !)
        (last_name~ :print_s !)
        (:print_n !)
        (gender~ :print_s !)
        (:print_n !)
        (age~ :print_i !)
        (:print_n !)
        (height_format~ height~ :printf_d !)
        (:print_n !)
        (eye_color~ :print_s !)
        (:print_n !)
    (endif)
(funcend)

(variable-local-off)

(list_data->person func)
    #var ~ person

    // get mem address of person data
    (memaddr~ stpopi)

     // set pointers, use new check_pointer interrupt for pointer type checks
    (first_name~ Pfirst_name~ pointer)
    (Pfirst_name~ byte_ptr :check_pointer !)

    (last_name~ Plast_name~ pointer)
    (Plast_name~ byte_ptr :check_pointer !)

    (gender~ Pgender~ pointer)
    (Pgender~ byte_ptr :check_pointer !)

    (age~ Page~ pointer)
    (Page~ int64_ptr :check_pointer !)

    (height~ Pheight~ pointer)
    (Pheight~ double_ptr :check_pointer !)

    (eye_color~ Peye_color~ pointer)
    (Peye_color~ byte_ptr :check_pointer !)

    (:Pshow_data->person !)
(funcend)
(objectend)

#include <mem-obj-lib.l1h>
