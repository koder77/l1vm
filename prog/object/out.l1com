// people-object-oop.l1com
// use . variable names to build something like a pseudo data structure like in other
// programming languages
//
// NEW: using:
// #var ~ main to be more safe!
// using object for data and functions
//
FILE: intr-func.l1h























































































FILE END
FILE: vars.l1h
// vars.l1h
// variables byte sizes
(set const-int64 1 byte_size 1)
(set const-int64 1 int16_size 2)
(set const-int64 1 int32_size 4)
(set const-int64 1 int64_size 8)
(set const-int64 1 double_size 8)
// pointer check variable types
(set const-int64 1 byte_ptr 8)
(set const-int64 1 int16_ptr 9)
(set const-int64 1 int32_ptr 10)
(set const-int64 1 int64_ptr 11)
(set const-int64 1 double_ptr 12)
// mem object types
(set const-int64 1 mem_obj_empty 0)
(set const-int64 1 mem_obj_int64 1)
(set const-int64 1 mem_obj_double 2)
(set const-int64 1 mem_obj_string 3)
// stack types
(set const-int64 1 byte_stack 0)
(set const-int64 1 int64_stack 1)
(set const-int64 1 double_stack 2)
// string sort
(set const-int64 1 sort_string_asc 0)
(set const-int64 1 sort_string_desc 1)
FILE END
(main func)


 (set int64 1 zero 0)
    (set int64 1 one 1)
    // person data with person. names
    (set string 256 person.first_namemain "Jane")
    (set string 256 person.last_namemain "Doe")
    (set string 256 person.gendermain "female")
    (set int64 1 person.agemain 30)
    (set double 1 person.heightmain 1.80)
    (set string 256 person.eye_colormain "brown")
    (set string s meminitstrmain "ERROR can't init memory!")
 (set string s memerrstrmain "ERROR can't allocate memory!")
 (set string s saveerrstrmain "ERROR can't save to memory object!")
    (set int64 1 memaddrmain 0)
    (set int64 1 memindmain 0)
    (set int64 1 memsizemain 1)
 (set int64 1 variablesmain 6)
    (set int64 1 retmain 0)
    (set int64 1 fmain 0)
    // include memory object variable types
FILE: mem-obj-lib-types.l1h
// mem-obj-lib-types.l1h
//
// set mem objects defines for the variable types
//
(set const-int64 1 i_type 1)
(set const-int64 1 d_type 2)
(set const-int64 1 s_type 3)
FILE END
    (zero one :mem_obj_init !)
 (retmain stpopi)
    (((retmain zero !=) fmain =) fmain if)
  // ERROR can't allocate memory
(6 meminitstrmain 0 0 intr0)
    (7 0 0 0 intr0)
(255 one 0 0 intr0)
 (endif)
    // allocate memory for the 6 variables
 (variablesmain memsizemain :alloc_obj_memobj !)
 (memaddrmain stpopi)
 (loadreg)
 (((memaddrmain zero <) fmain =) fmain if)
  // ERROR can't allocate memory
(6 memerrstrmain 0 0 intr0)
    (7 0 0 0 intr0)
(255 one 0 0 intr0)
 (endif)

 // store person data in mem object using memory variable types: s_type, i_type and d_type
    // going from right to left with variable types first before variable
    (person.eye_colormain s_type person.heightmain d_type person.agemain i_type person.gendermain s_type person.last_namemain s_type person.first_namemain s_type variablesmain zero memaddrmain :save_obj_memobj !)
    (retmain stpopi)
 (((retmain zero !=) fmain =) fmain if)
  // ERROR can't allocate memory
(6 saveerrstrmain 0 0 intr0)
    (7 0 0 0 intr0)
(255 one 0 0 intr0)
 (endif)
    (memaddrmain :list_data->person !)
    // free memory
    (zero :free_obj_memobj !)
    (:free_memobj !)
(1 zero 0 0 intr0)
(255 zero 0 0 intr0)
(funcend)

// set variable ending check on: only local variables ending with "person" or globals ending with "main" allowed!
(variable-local-on)

// get person data from mem object
(person object)


    (set int64 1 fperson)
    (set int64 1 zeroperson 0)
    (set int64 1 variablesperson 6)
    (set int64 1 memaddrperson 0)
    (set int64 1 retperson 0)
    (set string s height_formatperson "%.2lf")
    (set string 256 first_nameperson "")
    (set string 256 last_nameperson "")
    (set string 256 genderperson "")
    (set int64 1 ageperson 0)
    (set double 1 heightperson 0.0)
    (set string 256 eye_colorperson "")
    (set string s memobj_err_strperson "ERROR reading memobject array!")
    // data pointer, make only changeable by "pointer" function to avoid memory errors
    (set const-int64 1 Pfirst_nameperson 0)
    (set const-int64 1 Plast_nameperson 0)
    (set const-int64 1 Pgenderperson 0)
    (set const-int64 1 Pageperson 0)
    (set const-int64 1 Pheightperson 0)
    (set const-int64 1 Peye_colorperson 0)

(Pshow_data->person func)


    (Peye_colorperson Pheightperson Pageperson Pgenderperson Plast_nameperson Pfirst_nameperson variablesperson zeroperson memaddrperson :load_obj_array_memobj !)
    (retperson stpopi)
    (((retperson zeroperson !=) fperson =) fperson if+)
(6 memobj_err_strperson 0 0 intr0)
          (7 0 0 0 intr0)
    (else)
(6 first_nameperson 0 0 intr0)
          (7 0 0 0 intr0)
(6 last_nameperson 0 0 intr0)
          (7 0 0 0 intr0)
(6 genderperson 0 0 intr0)
          (7 0 0 0 intr0)
(4 ageperson 0 0 intr0)
          (7 0 0 0 intr0)
(21 heightperson height_formatperson 0 intr0)
          (7 0 0 0 intr0)
(6 eye_colorperson 0 0 intr0)
          (7 0 0 0 intr0)
    (endif)
(funcend)

(variable-local-off)

(list_data->person func)


    // get mem address of person data
    (memaddrperson stpopi)

     // set pointers, use new check_pointer interrupt for pointer type checks
    (first_nameperson Pfirst_nameperson pointer)
(30 Pfirst_nameperson byte_ptr 0 intr0)

    (last_nameperson Plast_nameperson pointer)
(30 Plast_nameperson byte_ptr 0 intr0)

    (genderperson Pgenderperson pointer)
(30 Pgenderperson byte_ptr 0 intr0)

    (ageperson Pageperson pointer)
(30 Pageperson int64_ptr 0 intr0)

    (heightperson Pheightperson pointer)
(30 Pheightperson double_ptr 0 intr0)

    (eye_colorperson Peye_colorperson pointer)
(30 Peye_colorperson byte_ptr 0 intr0)

    (:Pshow_data->person !)
(funcend)
(objectend)

FILE: mem-obj-lib.l1h
// mem-obj-lib.l1h
//
// mem object library
//
(mem_obj_init func)
 (set string s modulestr@memobj "libl1vmmemobj")
 (set string s initstr@memobj "init_mem")
 (set string s freestr@memobj "free_mem")
 (set string s alloc_obj_memstr@memobj "alloc_obj_mem")
 (set string s free_obj_memstr@memobj "free_obj_mem")
 (set string s save_obj_memstr@memobj "save_obj_mem")
 (set string s load_obj_memstr@memobj "load_obj_mem")
 (set string s load_obj_string_memstr@memobj "load_string_obj_mem")
 (set string s load_obj_array_memstr@memobj "load_obj_mem_array")
 (set string s get_obj_mem_typestr@memobj "get_obj_mem_type")
 (set int64 1 init@memobj 0)
 (set int64 1 free@memobj 1)
 (set int64 1 alloc_obj_mem@memobj 2)
 (set int64 1 free_obj_mem@memobj 3)
 (set int64 1 save_obj_mem@memobj 4)
 (set int64 1 load_obj_mem@memobj 5)
 (set int64 1 load_obj_string_mem@memobj 6)
 (set int64 1 load_obj_array_mem@memobj 7)
    (set int64 1 get_obj_mem_type@memobj 8)
 (set int64 1 maxind@memobj 0)
 (set int64 1 mod@memobj 0)
 // get arguments from stack
 (maxind@memobj stpopi)
 (mod@memobj stpopi)
 // load mem module
 (0 modulestr@memobjaddr mod@memobj 0 intr0)
 // set functions
 (2 mod@memobj init@memobj initstr@memobjaddr intr0)
 (2 mod@memobj free@memobj freestr@memobjaddr intr0)
 (2 mod@memobj alloc_obj_mem@memobj alloc_obj_memstr@memobjaddr intr0)
 (2 mod@memobj free_obj_mem@memobj free_obj_memstr@memobjaddr intr0)
 (2 mod@memobj save_obj_mem@memobj save_obj_memstr@memobjaddr intr0)
 (2 mod@memobj load_obj_mem@memobj load_obj_memstr@memobjaddr intr0)
 (2 mod@memobj load_obj_string_mem@memobj load_obj_string_memstr@memobjaddr intr0)
 (2 mod@memobj load_obj_array_mem@memobj load_obj_array_memstr@memobjaddr intr0)
    (2 mod@memobj get_obj_mem_type@memobj get_obj_mem_typestr@memobjaddr intr0)
 // init module
 (maxind@memobj stpushi)
 (3 mod@memobj init@memobj 0 intr0)
 // return value back to caller
(funcend)
// wrapper functions
(free_memobj func)
 (3 mod@memobj free@memobj 0 intr0)
(funcend)
(alloc_obj_memobj func)
 (3 mod@memobj alloc_obj_mem@memobj 0 intr0)
(funcend)
(free_obj_memobj func)
 (3 mod@memobj free_obj_mem@memobj 0 intr0)
(funcend)
(save_obj_memobj func)
 (3 mod@memobj save_obj_mem@memobj 0 intr0)
(funcend)
(load_obj_memobj func)
 (3 mod@memobj load_obj_mem@memobj 0 intr0)
(funcend)
(load_obj_string_memobj func)
 (3 mod@memobj load_obj_string_mem@memobj 0 intr0)
(funcend)
(load_obj_array_memobj func)
 (3 mod@memobj load_obj_array_mem@memobj 0 intr0)
(funcend)
(get_obj_mem_type func)
    (3 mod@memobj get_obj_mem_type@memobj 0 intr0)
(funcend)
FILE END
