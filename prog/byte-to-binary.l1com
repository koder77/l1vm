// byte-to-binary.l1com
// check if bit is set in int variable (0 - 255), 8 bits
#include <intr.l1h>
(main func)
	(set int64 1 zero 0)
	(set int64 1 one 1)
	(set int64 1 f 0)
	(set int64 1 num 134)
	(set int64 1 i 0)
	(set int64 1 maxbit 8)
	(set int64 1 shift 0)
	(set int64 1 bitset)
	(set string s bitstr "bit: ")
	(set string s bitsetstr " = 1")
	(set string s bitzerostr  " = 0")
	(set string s numstr "number: ")
	print_s (numstr)
	print_i (num)
	print_n
	print_n
	(for-loop)
	(((i maxbit <) f =) f for)
		print_s (bitstr)
		print_i (i)
		(num i :check_bitset call)
		(bitset stpopi)
		(((bitset zero !=) f =) f if+)
			print_s (bitsetstr)
		(else)
			print_s (bitzerostr)
		(endif)
		print_n
		(reset-reg)
		((i one +) i =)
	(next)
	(255 zero 0 0 intr0)
(funcend)
(check_bitset func)
	#var ~ @check_bitset
	(set int64 1 one~ 1)
	(set int64 1 bit~ 0)
	(set int64 1 shift~ 0)
	(set int64 1 bitset~ 0)
	(set int64 1 num~ 0)
	(bit~ stpopi)
	(num~ stpopi)
	((one~ bit~ <<) shift~ =)
	((num~ shift~ &) bitset~ =)
	(bitset~ stpushi)
(funcend)
