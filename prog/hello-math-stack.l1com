// hello-math-stack.l1com - Brackets - Hello world
// This shows how to use the new stack_type function in Brackets!
//
#include <intr.l1h>
#include <vars.l1h>
#include <misc-macros.l1h>
#include <zero.l1h>
#include <math-const.l1h>
(main func)
    (set const-int64 1 zero 0)
    (set double 1 xd 23.0)
	(set double 1 yd 42.0)
	(set double 1 zd 0.0)
	(set int64 1 x 1024)
    (set int64 1 y 512)
    (set int64 1 z 256)

    (zero :math_init !)

    (x yd :mul !)
    (zd stpop)
    print_d (zd)
    print_n

    exit (zero)
(funcend)

(mul func)
    #var ~ add
    (set double 1 xd~ 0.0)
    (set double 1 yd~ 0.0)
    (set double 1 zd~ 0.0)
    (set int64 1 i~ 0)
    (set int64 1 st_type~ 0)
    (set int64 1 f~ 0)

    // get xd type from stack
    stack_type (st_type~)
    pull_int64_var (st_type~)
    (((st_type~ int64_stack ==) f~ =) f~ if+)
        // int64 type, convert to double
        (i~ stpop)
        (i~ :math_int2double !)
        (xd~ stpop)
    (else)
         (xd~ stpop)
    (endif)

    // get yd type from stack
    stack_type (st_type~)
    pull_int64_var (st_type~)
    (((st_type~ int64_stack ==) f~ =) f~ if+)
        // int64 type, convert to double
        (i~ stpop)
        (i~ :math_int2double !)
        (yd~ stpop)
    (else)
         (yd~ stpop)
    (endif)

    {zd~ = (xd~ * yd~)}
    (zd~ stpush)
(funcend)
#include <math-lib.l1h>
