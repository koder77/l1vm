// hello-print.l1com
// This shows how to use the pointer_type interrupt to get the pointer array variable type.
//
#include <intr-func.l1h>
#include <vars.l1h>
#include <misc-macros.l1h>
(main func)
    (set const-int64 1 zero 0)
    (set int64 1 x 23)
    (set int64 1 y 42)
    (set int64 1 a 0)
    (set string 13 hello "Hello world!")
    (set double 1 d 123.456)
    (set int64 1 Pvar 0)

    // get string pointer
    (hello Pvar pointer)
    (Pvar :print_var !)
    (:print_n !)

    ((x y *) a :=)
    // get int64 pointer
    (a Pvar pointer)
    (Pvar :print_var !)
    (:print_n !)

    // get double pointer
    (d Pvar pointer)
    (Pvar :print_var !)
    (:print_n !)

    exit (zero)
(funcend)

(print_var func)
    // Print variable the pointer points at.
    #var ~ print_var
    (set const-int64 1 zero~ 0)
    (set int64 1 Pvar~ 0)
    (set int64 1 vartype~ 0)
    (set int64 1 f~ 0)
    (set int64 1 int_var~)
    (set double 1 double_var~)
    (set string s stringvar~ "")
    (Pvar~ stpop)

    // get pointer type
    (Pvar~ vartype~ :pointer_type !)
    // pull vartype~ to variable
    (vartype~ :pull_int64_var !)

    // Check pointer type and print the variable.
    (switch)
        (vartype~ byte_ptr ?)
            (Pvar~ stringvar~addr :=)
            (stringvar~ :print_s !)
            (break)

        (vartype~ int64_ptr ?)
            (Pvar~ [ zero~ ] int_var~ :=)
            (int_var~ :print_i !)
            (break)

        (vartype~ double_ptr ?)
            (Pvar~ [ zero~ ] double_var~ :=)
            (double_var~ :print_d !)
            (break)
    (switchend)
(funcend)
