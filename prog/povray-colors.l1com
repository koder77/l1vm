// povray-colors.l1com
//
// just convert RGB values to POVray colors: 0.0 - 1.0 range
#include <intr.l1h>
(main func)
	(set int64 1 zero 0)
	(set int64 1 one 1)
	(set int64 1 four 4)
	(set int64 1 col_r 0)
	(set int64 1 col_g 0)
	(set int64 1 col_b 0)
	(set double 1 pov_r 0.0)
	(set double 1 pov_g 0.0)
	(set double 1 pov_b 0.0)
	(set double 1 one_d 1.0)
	(set double 1 maxcol_d 255.0)
	(set double 1 colfac_d 0.0)
	(set string s info_str "Enter rgb color, only RETURN to Exit:")
	(set string s r_str "r? ")
	(set string s g_str "g? ")
	(set string s b_str "b? ")
	(set string 256 inp_str "")
	(set string s pov_collinestr "color rgb<")
	(set string s pov_commastr ", ")
	(set string s pov_closestr ">")
	(set int64 1 input_len 255)
	(set int64 1 str_len 0)
	(set int64 1 f 0)
	(set int64 1 delay 500)
	(set string 256 roundedstr "")
	(set int64 1 roundedlen 255)
	(zero :math_init !)
	(loadreg)
	(one :string_init call)
	(loadreg)
	((one_d maxcol_d /d) colfac_d =)
	(:loop)
	(reset-reg)
	print_s (info_str)
	print_n
	// get RGB color r
	print_s (r_str)
	input_s (input_len, inp_str)
	(inp_str :string_len !)
    (str_len stpopi)
	(((str_len zero ==) f =) f if)
		// empty user input, just exit!
		exit (zero)
	(endif)
	(inp_str :string_to_int !)
	(col_r stpopi)
	// get RGB color g
	(reset-reg)
	print_s (g_str)
	input_s (input_len, inp_str)
	(inp_str :string_to_int !)
	(col_g stpopi)
	// get RGB color b
	(reset-reg)
	print_s (b_str)
	input_s (input_len, inp_str)
	(inp_str :string_to_int !)
	(col_b stpopi)
	// calculate POV color: 0.0 to 1.0 values
	// convert int to double
	(reset-reg)
	(col_r :math_int2double !)
	(pov_r stpopd)
	(col_g :math_int2double !)
	(pov_g stpopd)
	(col_b :math_int2double !)
	(pov_b stpopd)
	(reset-reg)
	// calculate POVray colors
	print_n
	{pov_r = (pov_r * colfac_d)}
	(reset-reg)
	{pov_g = (pov_g * colfac_d)}
	(reset-reg)
	{pov_b = (pov_b * colfac_d)}
	(reset-reg)
	// print out POVray color line
	print_s (pov_collinestr)
	(pov_r four roundedstr roundedlen :double_rounded_string !)
	print_s (roundedstr)
	print_s (pov_commastr)
	(pov_g four roundedstr roundedlen :double_rounded_string !)
	print_s (roundedstr)
	print_s (pov_commastr)
	(pov_b four roundedstr roundedlen :double_rounded_string !)
	print_s (roundedstr)
	print_s (pov_closestr)
	print_n
	print_n
	(:loop jmp)
(funcend)
#include <math-lib.l1h>
#include <string.l1h>
