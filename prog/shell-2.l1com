// shell-2.l1com - Brackets - L1VM shell
//
#include <intr.l1h>
(main func)
	(set const-int64 1 zero 0)
	(set const-int64 1 one 1)
	(set const-int64 1 two 2)
	(set int64 1 ret 0)
	(set int64 1 f 0)
	(set string s promptstr "l1vm-sh $ ")
	(set string 256 inputstr "")
	(set string s runstr "run")
	(set const-int64 1 runlen 3)
	(set const-int64 1 inputmax 255)
	(set int64 1 inputlen 0)
	(set int64 1 strlen 0)
	(set string 256 bufstr "")
	(set int64 1 rightpart 0)
	(set string s run_l1vmstr "l1vm")
	(set string s runshortstr "!")
	(set string 256 run_shellstr "")
	(set string s historyupstr "hist")
	(set string 5120 historystr "")
	(set const-int64 1 history_size 5120)
	(set const-int64 1 history_len 256)
	(set int64 1 history_ind -1)
	(set const-int64 1 history_reset -1)
	(set const-int64 1 history_max 19)
	(zero :string_init !)
	(one :process_init !)
	(two :math_init !)
	(:loop)
		print_s (promptstr)
		input_s (inputmax, inputstr)
		// check input
		(reset-reg)
		(:loop_history_set)
		(inputstr :string_len !)
		(inputlen stpopi)
		// add input to history
		(((history_ind history_max <) f =) f if+)
			((history_ind one +) history_ind =)
			(inputstr historystr history_ind history_len history_size :string_to_array !)
		(else)
			(:cycle_history !)
			(history_reset history_ind =)
		(endif)
		// check for history
		(inputstr historyupstr :string_compare !)
		(ret stpopi)
		(((ret zero ==) f =) f if)
			// history up
			(:show_history !)
			(:choose_history !)
			(:loop_history_set jmp)
		(endif)
		(((inputlen one >) f =) f if)
			// check if run short command
			(inputstr bufstr one :string_left !)
			(bufstr runshortstr :string_compare !)
			(ret stpopi)
			(((ret zero ==) f =) f if)
				// found run command, get string part after run
				((inputlen one -) rightpart =)
				(inputstr bufstr rightpart :string_right !)
				(run_shellstr run_l1vmstr :string_copy !)
				(run_shellstr bufstr :string_cat !)
				(run_shellstr :run_shell !)
				(ret stpopi)
				(:loop jmp)
			(endif)
		(endif)
		(((inputlen runlen >) f =) f if+)
			// check if run command
			(inputstr bufstr runlen :string_left !)
			(bufstr runstr :string_compare !)
			(ret stpopi)
			(((ret zero ==) f =) f if+)
				// found run command, get string part after run
				((inputlen runlen -) rightpart =)
				(inputstr bufstr rightpart :string_right !)
				(run_shellstr run_l1vmstr :string_copy !)
				(run_shellstr bufstr :string_cat !)
				(run_shellstr :run_shell !)
				(ret stpopi)
			(else)
				// not run command, execute input
				(inputstr :run_shell !)
				(ret stpopi)
			(endif)
		(else)
			// not run command, execute input
			(inputstr :run_shell !)
			(ret stpopi)
		(endif)
		(:loop jmp)
(funcend)
(show_history func)
	#var ~ @show_history
	(set int64 1 i~ 0)
	(set string 256 historylinestr~ "")
	(set string s colonstr~ " : ")
	(set int64 1 f~ 0)
	(history_max i~ =)
	((i~ one -) i~ =)
	(for-loop)
	(((i~ zero >=) f~ =) f~ for)
		(historystr historylinestr~ i~ history_len history_size :array_to_string !)
		print_i (i~)
		print_s (colonstr~)
		print_s (historylinestr~)
		print_n
		(reset-reg)
		((i~ one -) i~ =)
	(next)
(funcend)
(choose_history func)
	#var ~ @choose_history
	(set string 256 inputhistorystr~ "")
	(set string s histchstr " hist? ")
	(set int64 1 inputindex~ 0)
	(set int64 1 f~ 0)
	(:choose_history_loop)
	print_s (promptstr)
	print_s (histchstr)
	input_s (inputmax, inputhistorystr~)
	(inputhistorystr~ :string_to_int !)
	(inputindex~ stpopi)
	(((inputindex~ zero >=) f =) f if)
		(((inputindex~ history_max <=) f =) f if)
			(historystr inputstr inputindex~ history_len history_size :array_to_string !)
			(:choose_history_end jmp)
		(endif)
	(endif)
	// no legal input, ask again
	(:choose_history_loop jmp)
	(:choose_history_end)
(funcend)
(cycle_history func)
	// delete oldest entry and shuffle history array
	#var ~ @cycle_history
	(set string 256 linesrcstr~ "")
	(set int64 1 index_src~ 0)
	(set int64 1 index_dst~ 0)
	(set int64 1 f~ 0)
	((history_max two -) index_src~ =)
	((index_src~ one +) index_dst~ =)
	(for-loop)
	(((index_src~ zero >) f~ =) f~ for)
		(historystr linesrcstr~ index_src~ history_len history_size :array_to_string !)
	 	(linesrcstr~ historystr index_dst~ history_len history_size :string_to_array !)
		((index_src~ one -) index_src~ =)
		((index_src~ one +) index_dst~ =)
	(next)
	(inputstr historystr index_dst~ history_len history_size :string_to_array !)
(funcend)
#include <string.l1h>
#include <process-lib.l1h>
#include <math-lib.l1h>
