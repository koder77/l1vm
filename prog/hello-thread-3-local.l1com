// hello-thread-3-local.l1com
// Brackets - Hello world! threads
//
// This is an exammple how to launch threads using the new compiler opcode "loadl".
// In this example I used the "intr.l1h" include to use the new interrupt macros.
//
// This demo shows how to use data local interrupts.
// The two instances of the hello function allocate a data local memory.
// So all data in global memory gets copied to data local memory.
// And the two hello functions operate on their own data copies.
// So the variables they use are local!
//
#include <intr.l1h>
#include <misc-macros.l1h>
(main func)
	(set int64 1 zero 0)
	(set int64 1 one 1)
	(set int64 1 two 2)
	(set int64 1 three 3)
	(set int64 1 four 4)
	(set int64 1 run 0)
	(set int64 1 f 0)
	(set int64 1 delay 4000)
	(set int64 1 cpu_number 0)
	(set int64 1 global_num 0)
	(set string s messagestr "starting...")
	// run the two threads
	get_cpu (cpu_number)
	(((cpu_number zero ==) f =) f if)
		print_s (messagestr)
		print_n
		(:start_thr !)
		detime (delay)
		(one run =)
	(endif)
	exit (zero)
(funcend)
(hello func)
	#var ~ hello
	(set string s hellostr~ "Thread: ")
    (set string s spacestr~ " ")
    (set const-int64 1 zero~ 0)
    (set const-int64 1 one~ 1)
	(set int64 1 delay~ 2000)
    (set int64 1 i~ 0)
    (set int64 1 f~ 0)
    (set int64 1 max~ 200)
    (set int64 1 cpu~ 0)
    data_local_alloc
    data_local
    get_cpu (cpu~)
    ((cpu~ zero~ +) cpu~ =)
    (for-loop)
    (((i~ max~ <) f~ =) f~ for)
        print_s (hellostr~)
        print_i (cpu~)
        print_s (spacestr~)
        print_i (i~)
        print_n

       ((i~ one~ +) i~ =)
    (next)

    data_global
	globallock (zero~)
    {global_num = (global_num + one~)}
    globalunlock (zero~)
    threadexit (zero)
(funcend)
(start_thr func)
	(set int64 1 run_th 0)
	(set int64 1 lab_hello 0)
	(set int64 1 zero_th 0)
	(set int64 1 one_th 1)
	(set int64 1 f_th 0)
	(set int64 1 delay_th 2500)
    (set int64 1 loop 0)
    (set int64 1 maxloop 25)
	(reset-reg)
	(:hello lab_hello loadl)
    pull_int64_var (lab_hello)
	(((run_th zero_th ==) f_th =) f_th if)
		// run threads
		thread (lab_hello)
		thread (lab_hello)
		(one_th run_th =)
	(endif)
	detime (delay_th)
	join
	print_i (global_num)
	print_n
	exit (zero)
(funcend)
