// cyrypt-otp.l1com - (C) 2023 Stefan Pietzonke aka koder77
// crypt/decrypt one time pad

#include <intr.l1h>
#include <misc-macros.l1h>
(main func)
    #include <file-def.l1h>
    #include <math-const.l1h>

    (set const-int64 1 zero 0)
    (set const-int64 1 one 1)
    (set const-int64 1 three 3)
    (set int64 1 i 0)
    (set int64 1 f 0)
    (set int64 1 ret 0)
    (set string 4096 input_file_name_str "")
    (set string 4096 output_file_name_str "")
    (set string 4096 otp_file_name_str "")
    (set int64 1 file_name_max 4095)
    (set int64 1 input_file_handle 0)
    (set int64 1 output_file_handle 0)
    (set int64 1 otp_file_handle 0)
    (set int64 1 inpbyte 0)
    (set int64 1 outbyte 0)
    (set byte 1 inpbyteb 0)
    (set byte 1 outpbyteb 0)
    (set int64 1 outpbyte 0)
    (set int64 1 outbyte_int 0)
    (set int64 1 otpbyte 0)
    (set byte 1 otpbyteb 0)
    (set int64 1 remove_output_file 0)
    (set string s error_init_files_str "error: can't allocate file handles!")
    (set string s error_open_file_str "error: can't open file!")
    (set string s error_write_file_str "error: can't write file!")
    (set string s error_read_file_str "error: can't read file!")
    (set string s error_remove_file_str "error: can't remove output file: ")
    (set string s pinput_file_name_str "input file name: ")
    (set string s poutput_file_name_str "output filename: ")
    (set string s potp_file_name_str "otp file name: ")
    (set string s done_str "finished crypting!")
    (set string s space_str ", ")

    (zero three :file_init !)
    (ret stpop)
    (((ret zero !=) f =) f if)
        print_s (error_init_files_str)
        print_n
        exit (one)
	(endif)

    (one :file_tools_init !)

    // get input
    print_s (pinput_file_name_str)
    input_s (file_name_max, input_file_name_str)

    print_s (poutput_file_name_str)
    input_s (file_name_max, output_file_name_str)

    print_s (potp_file_name_str)
    input_s (file_name_max, otp_file_name_str)

    // open files
    (file_mode_read input_file_name_str :file_open !)
    (input_file_handle stpop)
    (((input_file_handle zero <) f =) f if)
        print_s (error_open_file_str)
        print_n
        print_s (input_file_name_str)
        print_n
        exit (one)
    (endif)

    (file_mode_write output_file_name_str :file_open !)
    (output_file_handle stpop)
    (((output_file_handle zero <) f =) f if)
        print_s (error_open_file_str)
        print_n
        print_s (output_file_name_str)
        print_n
        exit (one)
    (endif)

    (file_mode_read otp_file_name_str :file_open !)
    (otp_file_handle stpop)
    (((otp_file_handle zero <) f =) f if)
        print_s (error_open_file_str)
        print_n
        print_s (otp_file_name_str)
        print_n
        exit (one)
    (endif)

    (:loop)
        (input_file_handle :file_getc !)
        (ret stpop)
        (inpbyte stpop)
        (((ret zero !=) f =) f if)
            (:cleanup !)
        (endif)

        (otp_file_handle :file_getc !)
        (ret stpop)
        (otpbyte stpop)
        (((ret zero !=) f =) f if)
            print_s (error_read_file_str)
            print_n
            print_s (otp_file_name_str)
            print_n
            // no more otp chars left
            (one remove_output_file =)
            (:cleanup !)
        (endif)

        (reset-reg)
        pull_int64_var (inpbyte)
        pull_int64_var (otpbyte)
        // do crypt calculation
        //print_i (inpbyte)
        //print_s (space_str)
        //print_i (otpbyte)
        //print_s (space_str)

        (cast inpbyte inpbyteb =)
        (cast otpbyte otpbyteb =)
        ((inpbyteb otpbyteb ^) outpbyte =)
        (cast outpbyte outpbyteb =)

        //print_i (outpbyte)
        //print_n

        (reset-reg)
        (output_file_handle outpbyteb :file_putc !)
        (ret stpop)
        (((ret zero !=) f =) f if)
            print_s (error_write_file_str)
            print_n
            print_s (output_file_name_str)
            print_n
            (:cleanup !)
        (endif)
    (:loop !)

    (:cleanup)
    (input_file_handle :file_close !)
    (output_file_handle :file_close !)
    (otp_file_handle :file_close !)

    (((remove_output_file one ==) f =) f if+)
        (output_file_name_str :file_tools_remove !)
        (ret stpop)
        (((ret zero !=) f =) f if)
            print_s (error_remove_file_str)
            print_s (output_file_name_str)
            print_n
        (endif)
    (else)
        print_s (done_str)
        print_n
    (endif)
    exit (zero)
(funcend)

#include <file-lib.l1h>
#include <file-tools-lib.l1h>
