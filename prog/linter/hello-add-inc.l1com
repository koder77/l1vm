// hello-add-inc.l1com - with the new linter args
// Precondition check of a function demo
#include <intr-func.l1h>
#include <number-limits.l1h>
// this is the function declaration for the l1vm-linter:
// it has two int64 numbers as arguments:
//
// (func args add_incP int64)
//
// set the return variable type:
// (return args add_incP int64 int64)
(main func)
    (linter)
    #var ~ main

    (set const-int64 1 zero 0)
    (set const-int64 1 one~ 1)
    (set int64 1 num~ 9223372036854775806)
    (set int64 1 num_inc~ 0)
    (set int64 1 ret~ 0)
    (set int64 1 f~ 0)
    (set int64 1 int64_limit_maxadd_incP int64_limit_max)
    (set const-string s error_str "add_inc: return error!")

    (num~ :add_incP !) (ret~ num_inc~ stpop)
    (((ret~ one~ ==) f~ =) f~ if)
        (error_str :print_s !)
        (:print_n !)

        (one~ :exit !)
    (endif)

    (num_inc~ :print_i !)
    (:print_n !)

    (zero :exit !)
(funcend)

(variable-local-only-on)

(add_incP func)
    // pure function

    #var ~ add_incP

    (set const-int64 1 zero~ 0)
    (set const-int64 1 one~ 1)
    (set int64 1 num~ 0)
    (set int64 1 ret~ 0)
    (set int64 1 f~ 0)
    (set const-string s exception_str~ "add_inc: exception variable overflow!")

    (num~ stpop)

    // precondition check
    (((num~ int64_limit_max~ ==) f~ =) f~ if+)
        // variable would overflow!
        (exception_str~ :print_s !)
        (:print_n !)

        (ret~ one~ stpush) (return)
    (else)
        // variable less than maximum value
        (num~ + one~ ret~ :=)
        (ret~ zero~ stpush) (return)
    (endif)
(funcend)
