// Brackets - L1VM shell
//
#include <intr.l1h>
(main func)
	(set const-int64 1 zero 0)
	(set const-int64 1 one 1)
	(set int64 1 ret 0)
	(set int64 1 f 0)
	(set string s promptstr "l1vm-sh $ ")
	(set string 256 inputstr "")
	(set string s runstr "run")
	(set const-int64 1 runlen 3)
	(set const-int64 1 inputmax 255)
	(set int64 1 inputlen 0)
	(set int64 1 strlen 0)
	(set string 256 bufstr "")
	(set int64 1 rightpart 0)
	(set string s run_l1vmstr "l1vm")
	(set string s runshortstr "!")
	(set string 256 run_shellstr "")
	(zero :string_init !)
	(one :process_init !)
	(:loop)
		print_s (promptstr)
		input_s (inputmax, inputstr)
		// check input
		(inputstr :string_len !)
		(inputlen stpopi)
		(((inputlen one >) f =) f if)
			// check if run short command
			(inputstr bufstr one :string_left !)
			(bufstr runshortstr :string_compare !)
			(ret stpopi)
			(((ret zero ==) f =) f if)
				// found run command, get string part after run
				((inputlen one -) rightpart =)
				(inputstr bufstr rightpart :string_right !)
				(run_shellstr run_l1vmstr :string_copy !)
				(run_shellstr bufstr :string_cat !)
				(run_shellstr :run_shell !)
				(ret stpopi)
				(:loop jmp)
			(endif)
		(endif)
		(((inputlen runlen >) f =) f if+)
			// check if run command
			(inputstr bufstr runlen :string_left !)
			(bufstr runstr :string_compare !)
			(ret stpopi)
			(((ret zero ==) f =) f if+)
				// found run command, get string part after run
				((inputlen runlen -) rightpart =)
				(inputstr bufstr rightpart :string_right !)
				(run_shellstr run_l1vmstr :string_copy !)
				(run_shellstr bufstr :string_cat !)
				(run_shellstr :run_shell !)
				(ret stpopi)
			(else)
				// not run command, execute input
				(inputstr :run_shell !)
				(ret stpopi)
			(endif)
		(else)
			// not run command, execute input
			(inputstr :run_shell !)
			(ret stpopi)
		(endif)
		(:loop jmp)
(funcend)
#include <string.l1h>
#include <process-lib.l1h>
