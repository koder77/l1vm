// 3x1.l1com
//
// This is a demo program for the 3x1 problem: https://en.wikipedia.org/wiki/Collatz_conjecture
// It uses the int64 number type for the calculations.
#include <intr-func.l1h>
#include <math-const.l1h>

(main func)
    #var ~ main

    (set const-int64 1 zero 0)
    (set const-int64 1 one 1)
    (set const-int64 1 math_mod~ 0)
    (set int64 1 numstart~ 0)
    (set int64 1 numend~ 0)

    (set int64 1 args~ 0)
    (set int64 1 args_num~ 2)
    (set int64 1 f~ 0)
    (set string 256 numstartstr~ "")
    (set string 256 numendstr~ "")
    (set string s usagestr~ "l1vm 3x1 -args <startnum> <endnum>")

    // load math module
    (math_mod~ :math_init !)

    shell_args (args~)
    (((args~ args_num~ !=) f~ =) f~ if)
       (usagestr~ :print_s !)
       (:print_n !)
       (one :exit !)
    (endif)

    // get arg strings
    (zero numstartstr~ :get_shell_arg !)
    (one numendstr~ :get_shell_arg !)

    // convert arg strings to numbers
    (numstartstr~ :string_to_int !)
    (numstart~ stpop)
    (numendstr~ :string_to_int !)
    (numend~ stpop)

    // call calc function
    (numstart~ numend~ :3n1_calc !)

    // exit program with error code zero: all ok!
    (zero :exit !)
(funcend)

(3n1_calc func)
    #var ~ 3n1_calc

    (set const-int64 1 two~ 2)
    (set const-int64 1 one~ 1)
    (set const-int64 1 three~ 3)

    (set int64 1 num~ 0)
    (set int64 1 numstart~ 0)
    (set int64 1 numend~ 0)
    (set int64 1 rem~ 0)
    (set int64 1 ret~ 0)
    (set int64 1 f~ 0)

    (set string s passstr~ " pass!")

    (numend~ numstart~ stpop)

    (:loop_next)
    (reset-reg)
    (((numstart~ numend~ >) f~ =) f~ if)
        // last number was reached, return to main program
        (return)
    (endif)

    (numstart~ num~ :=)

    (num~ :print_i !)

    (:loop)
    // check if number is even
    ((num~ two~ %) rem~ =)

    (((rem~ one~ ==) f~ =) f~ if+)
        // number odd, multiply by 3 and add 1
        (num~ * three~ num~ :=)
        (num~ + one~ num~ :=)
    (else)
        // number even, divide by 2
        (num~ / two~ num~ :=)
    (endif)

    // check if number is 1
    // if true print " pass!"
    // and continue with next number
    (((num~ one~ ==) f~ =) f~ if+)
       (passstr~ :print_s !)
       (:print_n !)

       // next number:
       (numstart~ + one~ numstart~ :=)

       (:loop_next jmp)
    (else)
       (:loop jmp)
    (endif)
(funcend)

#include <math-lib.l1h>
