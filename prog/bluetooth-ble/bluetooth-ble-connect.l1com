// bluetooth-ble-list.l1com
//
//
#include <intr-func.l1h>
(main func)
	(set const-int64 1 zero 0)
	(set const-int64 1 one 1)
	(set const-int64 1 bluetooth_ble_mod 0)
    (set const-int64 1 string_mod 1)
	(set const-int64 1 bluetooth_ble_sock 10)
	(set int64 1 adapter 0)
	(set const-string s bltadaptersstr "bluetooth adapters: ")
    (set const-string s periph_errorstr "error: can't get first bluetooth device info!")
    (set const-string s periph_devstr "peripheral: ")
    (set const-string s periph_maxstr "peripherals: ")
    (set const-string s connstr "connected!")
    (set const-string s spacestr " ")

    // device:
    (set const-string s devicestr "your device name")

    (set int64 1 f 0)
	(set int64 1 ret 0)
	(set int64 1 periph 0)
    (set string 256 periph_namestr "")
    (set string 256 periph_macstr "")
    (set string 256 characteristicstr "")
    // your service string UUID:
    (set const-string s service_str "0000180a-0000-1000-8000-00805f9b34fb")
    (set string 256 servicestr "")
    (set int64 1 periph_handle 0)
    (set int64 1 character_max 0)
    (set int64 1 character_index 0)
    (set int64 1 periph_max 0)
    (set int64 1 periph_myphone 0)
    (set string 256 data_read "")
    (set const-int64 1 Pdata_on_ptr 0)
    (set const-string s read_startstr "reading...")
    (set const-string s read_errorstr "read error!")
    (set const-string s read_okstr "read ok!")
    (set int64 1 found_device_name 0)
    (set int64 1 found_service 0)
    (set int64 1 oneb 1)
    (set const-string s service_infostr "service: ")
    (set const-string s characteristic_infostr "characteristic: ")

	// open modules
    (bluetooth_ble_mod :bluetoothble_init !)
    (string_mod :string_init !)

	// get number of adapters
	(bluetooth_ble_sock :bluetoothble_get_adapter !)
	(ret stpop)
    (((ret zero >=) f :=) f if)
        (ret adapter :=)
    (endif)

	(bltadaptersstr :print_s !)
	(adapter :print_i !)
	(:print_n !)

	(((adapter zero ==) f :=) f if)
	   (one :exit !)
	(endif)

	// set adapter zero
	(zero :bluetoothble_set_adapter !)
    (ret stpop)
    (((ret one ==) f :=) f if)
       (one :exit !)
    (endif)

    (:bluetoothble_open_adapter !)
    (periph_max stpop)
    (((periph zero <) f :=) f if)
       (one :exit !)
    (endif)

    (periph_maxstr: print_s !)
    (spacestr :print_s !)
    (periph_max :print_i !)
    (:print_n !)

    (zero found_device_name :=)

    (zero periph :=)
    (((periph periph_max <) f :=) f for)
        (periph periph_namestr periph_macstr :bluetoothble_get_peripheral !)
        (ret stpop)
        (((ret zero !=) f :=) f if+)
            (periph_errorstr :print_s !)
            (:print_n !)
        (else)
            // get handle
            (periph_namestr devicestr :string_compare !)
            (ret stpop)
            (((ret zero ==) f :=) f if)
                (periph_devstr :print_s !)
                (periph_namestr :print_s !)
                (spacestr :print_s !)
                (periph_macstr :print_s !)
                (:print_n !)
                (periph periph_handle :=)
                (one found_device_name :=)
                (:found_device jmp)
            (endif)
        (endif)
        (periph + one periph :=)
    (next)
    (:found_device)
    (((found_device_name zero ==) f :=) f if)
        (:end jmp)
    (endif)
    (periph_handle :bluetoothble_connect !)
    (character_max stpop)
    (((character_max zero >=) f :=) f if)
        (connstr :print_s !)
        (:print_n !)
    (endif)

    // get characteristic
    (zero found_service :=)
    (zero character_index :=)
    (((character_index character_max <) f :=) f for)
        (character_index characteristicstr servicestr :bluetoothble_get_characteristic !)

        (service_infostr :print_s !)
        (servicestr :print_s !)
        (:print_n !)

        (characteristic_infostr :print_s !)
        (characteristicstr :print_s !)
        (:print_n !)

        (servicestr service_str :string_compare !)
        (ret stpopi)
        (((ret zero ==) f :=) f if)
            (one found_service :=)
            (:found_service jmp)
        (endif)
        (character_index + one character_index :=)
    (next)

    (:found_service)
    (((found_service zero ==) f :=) f if)
        (:end jmp)
    (endif)
    (read_startstr :print_s !)
    (:print_n !)
    // read data from device:
    (zero periph_handle character_index data_read :bluetoothble_read !)
    (ret stpop)
    (((ret zero !=) f :=) f if+)
        (read_errorstr :print_s !)
        (:print_n !)
    (else)
        (read_okstr :print_s !)
        (:print_n !)
        (data_read :print_s !)
        (:print_n !)
    (endif)

    (:end)
	(zero :exit !)
(funcend)

#include <bluetooth-ble.l1h>
#include <string.l1h>
