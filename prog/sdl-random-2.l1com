(main func)
    (set int64 1 zero 0)
    (set int64 1 one 1)
    (set int64 1 two 2)
    (set int64 1 three 3)
    (set int64 1 width 1280Q)
    (set int64 1 height 900Q)
    (set int64 1 rand_init 2018)
    (set int64 1 bit 32)
    (set int64 1 ret 0)
    (set int64 1 x1 350)
    (set int64 1 y1 300)
    (set int64 1 x2 0)
    (set int64 1 y2 0)
    (set byte 1 col 0)
    (set int64 1 maxcol 255)
    (set byte 1 maxcol_b 255)
    (set double 1 maxcol_d 255.0)
    (set int64 1 loops 0)
    (set int64 1 loopsmax 1000)
    (set int64 1 delay_rect 500)
    (set int64 1 f 0)
    // colors
    (set byte 1 r 255)
    (set byte 1 g 255)
    (set byte 1 b 255)
    (set int64 1 delay 20000)
    (set string s fontname "fonts/FreeMono.ttf")
    (set string s welcome "Rectangles, a demo by Stefan Pietzonke aka koder77.")
    (set int64 1 fontsize 20)
    (set int64 1 delay_welcome 8000)
    #include <math-const.l1h>
    // open screen
    (zero width height bit zero :sdl_open_screen call)
    (ret stpopi)
    (loadreg)
    (one :math_init call)
    (loadreg)
    // load font
    (fontnameaddr fontsize :sdl_font_ttf call)
    (loadreg)
    // show welcome text
	(x1 y1 r g b welcome :sdl_text_ttf call)
    (loadreg)
    (:sdl_update call)
    (loadreg)
    (8 delay_welcome 0 0 intr0)
    // draw gfx
    (:math_randinit call)
    (loadreg)
    (:loop)
    // first edge
    (width :math_randintmax call)
    (x1 stpopi)
    (loadreg)
    (height :math_randintmax call)
    (y1 stpopi)
    (loadreg)
    // second edge
    (width :math_randintmax call)
    (x2 stpopi)
    (loadreg)
    (height :math_randintmax call)
    (y2 stpopi)
    (loadreg)
// colors
    (maxcol :math_randintmax call)
    (r stpopi)
    (loadreg)
    (maxcol :math_randintmax call)
    (g stpopi)
    (loadreg)
    (maxcol :math_randintmax call)
    (b stpopi)
    (loadreg)
// draw colored box
    (x1 y1 x2 y2 r g b maxcol_b :sdl_rectangle_fill call)
    (loadreg)
    (:sdl_update call)
    (loadreg)
    (8 delay_rect 0 0 intr0)
    ((loops one +) loops =)
    ((loops loopsmax <) f =)
    (f if)
    (:loop jmp)
    (endif)
    // wait
    (8 delay 0 0 intr0)
    (:sdl_quit jsr)
    // close math module
    (1 one 0 0 intr0)
    // close sdl module
    (1 zero 0 0 intr0)
    // quit
    (255 0 0 0 intr0)
(funcend)
#include <sdl-lib.l1h>
#include <math-lib.l1h>
