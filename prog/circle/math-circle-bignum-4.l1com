// math-circle-bignum-4.l1com
// calculate diameter or circumference of circle
//
// MPFR floating point math demo
// NEW: with OOP
//
// This demo shows how to use private OOP functions, which start with a uppercase "P".
//
// new: load pi from text file
//
#include <intr.l1h>
#include <file-def.l1h>
(main func)
	#var ~ main
    (set const-int64 1 zero 0)
	(set const-int64 1 zero~ 0)
	(set const-int64 1 math_mod~ 0)
	(set const-int64 1 file_mod~ 1)
    (set const-int64 1 string_mod~ 2)
	(set const-int64 1 one~ 1)
	(set const-int64 1 two~ 2)
	(set const-int64 1 three~ 3)
	(set const-int64 1 four~ 4)
	(set string s prog_name~ "math-circle-bignum")
	(set string s menu_diamstr~ "1: calculate diameter of circle")
	(set string s menu_circstr~ "2: calculate circumference of circle")
	(set string s menu_areastr~ "3: calculate area of circle")
	(set string s menu_quitstr~ "4: quit")
	(set string s menu_chstr~ "? ")
	(set string s error_file_initstr~ "error: can't init files mod!")
    (set string s error_file_openstr~ "error: can't open pi file!")
    (set string s error_file_readstr~ "error can't read pi file!")
    (set string s pifilestr~ "pi/pi-100000.html")
    (set string s quitstr "quit!")
	(set int64 1 input_menu~ 0)
	(set int64 1 f~ 0)
    (set int64 1 ret~ 0)
    (set int64 1 handle~ 0)
    (set string s pistartstr~ "3.14")
    (set string 100003 m_picircle "")
    (set int64 1 pi_read_len~ 100002)
    (set string 256 readbufstr~ "")
    (set string 256 firstlinestr~ "")
    (set int64 1 readbuflen~ 255)
    (set int64 1 pistart~ 0)
    (set int64 1 len~ 0)

    // load file module
    (file_mod~ one~ :file_init !)
	(ret~ stpopi)
	(((ret~ zero~ !=) f~ =) f~ if)
        print_s (error_file_initstr~)
        print_n
        (:file_free_mem call)
        // error quit
        exit (zero~)
    (endif)

    (string_mod~ :string_init !)

    // open pi text file
    (file_mode_read pifilestr~ :file_open !)
	(handle~ stpopi)
	(((handle~ zero~ <) f~ =) f~ if)
        print_s (error_file_openstr~)
        print_n
	    (:file_free_mem call)
	    free_mod (file_mod~)
        // error quit
        exit (zero~)
    (endif)

	// read pi string from file
	(:read_pi)
	    (handle~ readbufstr~ readbuflen~ :file_get_string !)
	    (ret~ stpop)
	    (((ret~ zero~ !=) f~ =) f~ if)
	        print_s (error_file_readstr~)
            print_n
	        (:end jmp)
        (endif)
        // DEBUG
        //print_s (readbufstr~)
        //print_n
        // check for start of pi
        (((pistart~ zero~ ==) f~ =) f~ if+)
            (readbufstr~ pistartstr~ :string_search !)
            (ret~ stpop)
            (((ret~ zero~ >=) f~ =) f~ if)
                (readbufstr~ :string_len !)
                (len~ stpop)
                (len~ - one~ len~ :=)
                (readbufstr~ firstlinestr~ len~ :string_right !)
                (m_picircle firstlinestr~ :string_copy !)
                (one~ pistart~ :=)
            (endif)
        (else)
            // check if line is empty
            (readbufstr~ :string_len !)
            (len~ stpop)
            (((len~ four~ <=) f~ =) f~ if)
                (:read_pi_end jmp)
            (endif)
            (m_picircle readbufstr~ :string_cat !)
        (endif)
        (:read_pi jmp)
    (:read_pi_end)

	// load math module
	(math_mod~ :mp_math_init !)
    (:init->circle !)

    print_s (m_picircle)
    print_n
    print_n

	(:loop)
	print_s (prog_name~)
	print_n
	print_s (menu_diamstr~)
	print_n
	print_s (menu_circstr~)
	print_n
	print_s (menu_areastr~)
	print_n
	print_s (menu_quitstr~)
	print_n
	print_s (menu_chstr~)
	// read input
	input_i (input_menu~)
	((input_menu~ zero~ +) input_menu~ =)
	(((input_menu~ four~ ==) f~ =) f~ if)
		(:end jmp)
	(endif)
	(reset-reg)
	(((input_menu~ one~ ==) f~ =) f~ if)
		(:do_calc_diam->circle !)
	(endif)
	(((input_menu~ two~ ==) f~ =) f~ if)
		(:do_calc_circ->circle !)
	(endif)
	(((input_menu~ three~ ==) f~ =) f~ if)
		(:do_calc_area->circle !)
	(endif)
	print_n
	print_n
	(:loop jmp)

    (:end)
    // quit
    // close file module
    (handle~ :file_close !)
    (:file_free_mem !)
    (:mp_cleanup !)
    free_mod (math_mod~)
	free_mod (file_mod~)
    free_mod (string_mod~)
	print_s (quitstr)
    print_n
	exit (zero~)
(funcend)

(variable-local-only-on)

(circle object)
    #var ~ circle

#docustart
circle object
=============
Calculate diameter, circumference and area of a circle.

init->circle
------------
Set the m_pi Pi variable.

calc_diam->circle
-----------------
Calculate the diameter of a circle.

calc_circ->circle
-----------------
Calculate the circumference of a circle.

calc-area->circle
-----------------
Calculate the area of a circle.
#docuend

	(set string s diamstr~ "diameter:      ")
	(set string s circstr~ "circumference: ")
    (set string s radiusstr~  "radius:        ")
    (set string s areastr~ "area:          ")
	(set string s formatstr~ "%.200Ff")

	(set int64 1 precision~ 14)
	(set int64 1 base~ 10)
	(set int64 1 precision_set~ 3276800)
	(set int64 1 diam_mp~ 0)
	(set int64 1 circ_mp~ 1)
	(set int64 1 pi_mp~ 2)
	(set int64 1 radius_mp~ 3)
	(set int64 1 area_mp~ 4)
	(set string 409600 diam~ "")
	(set string 409600 circ~ "")
	(set string 409600 radius~ "")
	(set string 409600 area~ "")
	(set string s zerod~ "0.0")
	(set int64 1 input_len~ 409599)

(init->circle func)
	#var ~ circle

	// set pi
	(m_pi~ base~ precision_set~ pi_mp~ :mp_set_float_prec !)
(funcend)

// calc diam ===================================================================
(do_calc_diam->circle func)
	 #var ~ circle

	(:Pcalc_diam_input->circle !)
	(:calc_diam->circle !)
	(:Pprint_calc_diam->circle !)
(funcend)
(Pcalc_diam_input->circle func)
	#var ~ circle

	print_s (circstr~)
	// input string circ
	input_s (input_len~, circ~)
(funcend)
(Pprint_calc_diam->circle func)
    #var ~ circle

    print_n
	print_s (diamstr~)
	(diam_mp~ formatstr~ precision~ :mp_print_float !)
(funcend)
(calc_diam->circle func)
	#var ~ circle

	(circ~ base~ precision_set~ circ_mp~ :mp_set_float_prec !)
	(zerod~ base~ precision_set~ diam_mp~ :mp_set_float_prec !)
	(circ_mp~ pi_mp~ diam_mp~ :mp_div_float !)
(funcend)

// calc circumference ==========================================================
(do_calc_circ->circle func)
	#var ~ circle

	(:Pcalc_circ_input->circle !)
	(:calc_circ->circle !)
	(:Pprint_calc_circ->circle !)
(funcend)
(Pcalc_circ_input->circle func)
	#var ~ circle

	print_s (diamstr~)
	// input string diam
	input_s (input_len~, diam~)
(funcend)
(Pprint_calc_circ->circle func)
    #var ~ circle

    print_n
	print_s (circstr~)
	(circ_mp~ formatstr~ precision~ :mp_print_float !)
(funcend)
(calc_circ->circle func)
    #var ~ circle

    (zerod~ base~ precision_set~ circ_mp~ :mp_set_float_prec !)
	(diam~ base~ precision_set~ diam_mp~ :mp_set_float_prec !)
	(diam_mp~ pi_mp~ circ_mp~ :mp_mul_float !)
(funcend)

// calc area ===================================================================
(do_calc_area->circle func)
	#var ~ circle

	(:Pcalc_area_input->circle !)
	(:calc_area->circle !)
	(:Pprint_calc_area->circle !)
(funcend)
(Pcalc_area_input->circle func)
	#var ~ circle

	print_s (radiusstr~)
	// input string diam
	input_s (input_len~, radius~)
(funcend)
(Pprint_calc_area->circle func)
    #var ~ circle

    print_n
	print_s (areastr~)
	(area_mp~ formatstr~ precision~ :mp_print_float !)
(funcend)
(calc_area->circle func)
    #var ~ circle

	(zerod~ base~ precision_set~ area_mp~ :mp_set_float_prec !)
	(radius~ base~ precision_set~ radius_mp~ :mp_set_float_prec !)
    (radius_mp~ radius_mp~ area_mp~ :mp_mul_float !)
	(area_mp~ pi_mp~ area_mp~ :mp_mul_float !)
(funcend)
(objectend)

(variable-local-only-off)

#include <mpfr-lib-auto.l1h>
#include <file-lib.l1h>
#include <string.l1h>
