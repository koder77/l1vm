// math-circle-bignum-8-4billion .l1com
// calculate diameter or circumference of circle
// Pi is 4 GiB digits generated by y-cruncher.
//
// MPFR floating point math demo
// NEW: with OOP
//
// This demo shows how to use private OOP functions, which start with a uppercase "P".
//
// new: load pi from text file
//
#include <intr-func.l1h>
#include <file-def.l1h>
(main func)
	#var ~ main
    (set const-int64 1 zero 0)
	(set const-int64 1 zero~ 0)
	(set const-int64 1 math_mod~ 1)
    (set const-int64 1 string_mod~ 0)
	(set const-int64 1 one~ 1)
	(set const-int64 1 two~ 2)
	(set const-int64 1 three~ 3)
	(set const-int64 1 four~ 4)
	(set string s prog_name~ "math-circle-bignum")
	(set string s menu_diamstr~ "1: calculate diameter of circle")
	(set string s menu_circstr~ "2: calculate circumference of circle")
	(set string s menu_areastr~ "3: calculate area of circle")
	(set string s menu_quitstr~ "4: quit")
	(set string s menu_chstr~ "? ")
    (set string s quitstr "quit!")
	(set int64 1 input_menu~ 0)
	(set int64 1 f~ 0)
    (set int64 1 ret~ 0)
    (set string s m_picircle "pi/pi-4g.txt")
    (set string s pi_len_str "Pi with 4g billion digits.")

	// load modules
	(string_mod~ :string_init !)
	(math_mod~ :mp_math_init !)

    (:init->circle !)

	(:loop)
	(prog_name~ :print_s !)
	(:print_n !)
    (pi_len_str :print_s !)
    (:print_n !)
	(menu_diamstr~ :print_s !)
	(:print_n !)
	(menu_circstr~ :print_s !)
	(:print_n !)
	(menu_areastr~ :print_s !)
	(:print_n !)
	(menu_quitstr~ :print_s !)
	(:print_n !)
	(menu_chstr~ :print_s !)
	// read input
	input_i (input_menu~)
	((input_menu~ zero~ +) input_menu~ =)
	(((input_menu~ four~ ==) f~ =) f~ if)
		(:end jmp)
	(endif)
	(reset-reg)
	(((input_menu~ one~ ==) f~ =) f~ if)
		(:do_calc_diam->circle !)
	(endif)
	(((input_menu~ two~ ==) f~ =) f~ if)
		(:do_calc_circ->circle !)
	(endif)
	(((input_menu~ three~ ==) f~ =) f~ if)
		(:do_calc_area->circle !)
	(endif)
	(:print_n !)
	(:print_n !)
	(:loop jmp)

    (:end)
    // quit
    (:mp_cleanup !)
    free_mod (math_mod~)
    free_mod (string_mod~)
	(quitstr :print_s !)
    (:print_n !)
	exit (zero~)
(funcend)

(variable-local-only-on)

(circle object)
    #var ~ circle

#docustart
circle object
=============
Calculate diameter, circumference and area of a circle.

init->circle
------------
Set the m_pi Pi variable.

calc_diam->circle
-----------------
Calculate the diameter of a circle.

calc_circ->circle
-----------------
Calculate the circumference of a circle.

calc-area->circle
-----------------
Calculate the area of a circle.
#docuend

	(set string s diamstr~ "diameter:      ")
	(set string s circstr~ "circumference: ")
    (set string s radiusstr~  "radius:        ")
    (set string s areastr~ "area:          ")
	(set string s formatstr~ "%.200Ff")

	(set int64 1 precision~ 14)
	(set int64 1 base~ 10)
    (set int64 1 precision_digits~ 40000000000)
	(set int64 1 precision_set~ 0)

	(set int64 1 diam_mp~ 0)
	(set int64 1 circ_mp~ 1)
	(set int64 1 pi_mp~ 2)
	(set int64 1 radius_mp~ 3)
	(set int64 1 area_mp~ 4)
	(set string 409600 diam~ "")
	(set string 409600 circ~ "")
	(set string 409600 radius~ "")
	(set string 409600 area~ "")
	(set string s zerod~ "0.0")
	(set int64 1 input_len~ 409599)

(init->circle func)
	#var ~ circle

    (precision_digits~ :mp_get_precision_bits !)
    (precision_set~ stpop)
    (precision_set~ :print_i !)
    (:print_n !)

	// set pi
	(m_pi~ base~ precision_set~ pi_mp~ :mp_set_float_prec_file !)
(funcend)

// calc diam ===================================================================
(do_calc_diam->circle func)
	 #var ~ circle

	(:Pcalc_diam_input->circle !)
	(:calc_diam->circle !)
	(:Pprint_calc_diam->circle !)
(funcend)
(Pcalc_diam_input->circle func)
	#var ~ circle

	(circstr~ :print_s !)
	// input string circ
	(input_len~ circ~ :input_s !)
(funcend)
(Pprint_calc_diam->circle func)
    #var ~ circle

    (:print_n !)
	(diamstr~ :print_s !)
	(diam_mp~ formatstr~ precision~ :mp_print_float !)
(funcend)
(calc_diam->circle func)
	#var ~ circle

	(circ~ base~ precision_set~ circ_mp~ :mp_set_float_prec !)
	(zerod~ base~ precision_set~ diam_mp~ :mp_set_float_prec !)
	(circ_mp~ pi_mp~ diam_mp~ :mp_div_float !)
(funcend)

// calc circumference ==========================================================
(do_calc_circ->circle func)
	#var ~ circle

	(:Pcalc_circ_input->circle !)
	(:calc_circ->circle !)
	(:Pprint_calc_circ->circle !)
(funcend)
(Pcalc_circ_input->circle func)
	#var ~ circle

	(diamstr~ :print_s !)
	// input string diam
	(input_len~ diam~ :input_s !)
(funcend)
(Pprint_calc_circ->circle func)
    #var ~ circle

    (:print_n !)
	(circstr~ :print_s !)
	(circ_mp~ formatstr~ precision~ :mp_print_float !)
(funcend)
(calc_circ->circle func)
    #var ~ circle

    (zerod~ base~ precision_set~ circ_mp~ :mp_set_float_prec !)
	(diam~ base~ precision_set~ diam_mp~ :mp_set_float_prec !)
	(diam_mp~ pi_mp~ circ_mp~ :mp_mul_float !)
(funcend)

// calc area ===================================================================
(do_calc_area->circle func)
	#var ~ circle

	(:Pcalc_area_input->circle !)
	(:calc_area->circle !)
	(:Pprint_calc_area->circle !)
(funcend)
(Pcalc_area_input->circle func)
	#var ~ circle

	(radiusstr~ :print_s !)
	// input string diam
	(input_len~ radius~ :input_s !)
(funcend)
(Pprint_calc_area->circle func)
    #var ~ circle

    (:print_n !)
	(areastr~ :print_s !)
	(area_mp~ formatstr~ precision~ :mp_print_float !)
(funcend)
(calc_area->circle func)
    #var ~ circle

	(zerod~ base~ precision_set~ area_mp~ :mp_set_float_prec !)
	(radius~ base~ precision_set~ radius_mp~ :mp_set_float_prec !)
    (radius_mp~ radius_mp~ area_mp~ :mp_mul_float !)
	(area_mp~ pi_mp~ area_mp~ :mp_mul_float !)
(funcend)
(objectend)

(variable-local-only-off)

#include <mpfr-lib-auto.l1h>
#include <string.l1h>
