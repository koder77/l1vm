// webserver-thread.l1com
//
// simple http webserver
// demo opens on port 2000:
// http://127.0.0.1:2000
//
// Use new thread for socket connection of client
//
#include <intr.l1h>
(main func)
	(set int64 1 zero 0)
	(set int64 1 one 1)
	(set int64 1 ret 0)
	(set int64 1 maxsockets 10)
	(set int64 1 f 0)
	(set int64 1 server 0)
	(set int64 1 portnum 2000)
	(set int64 1 server_open 0)
	(set int64 1 server_accept 0)
	(set string s ip "127.0.0.1")
	(set int64 1 ip_len 10)
	(set string s filenamestr "")
	// (set string 256 mimetypestr "")
	// (set int64 1 mimetype_len 255)
	(set string 256 buf "")
	(set int64 1 bufsize 255)
	(set int64 1 buflen 0)
	(set int64 1 socket_handle 0)
	(set string s netinitstr "error: can't init networking sockets!")
	(set string s erroropenstr "error: can't open accept server socket!")
	(set string s errorserverstr "error: can't open server socket!")
	(set string 11 waiting "waiting...")
	(set int64 1 request_len 0)
	(set int64 1 lab_run 0)
	(set int64 1 cpu_number 0)
	// (set string 256 command "")
	// (set int64 1 rightstr 0)
	(zero maxsockets :net_init call)
	(ret stpopi)
	(loadreg)
	(((ret zero !=) f =) f if)
		// ERROR can't allocate memory
		(6 netinitstr 0 0 intr0)
		(7 0 0 0 intr0)
		(255 one 0 0 intr0)
	(endif)
	(one :string_init call)
	(loadreg)
	(ipaddr bufaddr :get_hostbyname call)
	(ret stpopi)
	(loadreg)
	// (:end jmp)
	((ret zero !=) f =)
	(f :try_hostbyaddr jmpi)
	(:open_socket jmp)
	(:try_hostbyaddr)
	(ipaddr bufaddr :get_hostbyaddr call)
	(ret stpopi)
	(loadreg)
	((ret zero !=) f =)
	(f :end jmpi)
	(:open_socket)
	(6 bufaddr 0 0 intr0)
	(7 0 0 0 intr0)
	(4 portnum 0 0 intr0)
	(7 0 0 0 intr0)
	(bufaddr portnum :open_server_socket call)
	(ret stpopi)
	(socket_handle stpopi)
	(loadreg)
	(((ret zero !=) f =) f if)
		(6 errorserverstr 0 0 intr0)
		(7 0 0 0 intr0)
		(:wait_conn jmp)
	(endif)
	// save run function label
	(:run lab_run loadl)
	((lab_run zero +) lab_run =)
	(:wait_conn)
		(6 waitingaddr 0 0 intr0)
		(7 0 0 0 intr0)
		(socket_handle :open_accept_server call)
		(ret stpopi)
		(server_accept stpopi)
		(loadreg)
		(((ret zero !=) f =) f if)
			(6 erroropenstr 0 0 intr0)
			(7 0 0 0 intr0)
			(:wait_conn jmp)
		(endif)
		// (socket_handle server_accept :run call)
		get_cpu (cpu_number)
		(((cpu_number zero ==) f =) f if)
			// (socket_handle stpushi)
			// (server_accept stpushi)
			thread (lab_run)
		(endif)
		(((cpu_number zero !=) f =) f if)
			join
		(endif)
		// do loop
		(:wait_conn jmp)
	(:end)
		(:socket_free_mem call)
		(255 0 0 0 intr0)
		(loadreg)
(funcend)
(run func)
	(set int64 1 server 0)
	(set int64 1 accept 0)
	(set int64 1 two 2)
	(set int64 1 three 3)
	(set int64 1 four 4)
	(set int64 1 five 5)
	(set int64 1 server_open 1)
	(set int64 1 server_act_open 1)
	(set int64 1 shutdown 0)
	(set int64 1 err 0)
	(set int64 1 err_ok 0)
	(set int64 1 len 0)
	(set int64 1 i 0)
	(set int64 1 filehandle 0)
	(set int64 1 filesize 255)
	(set int64 1 n 0)
	(set int64 1 ret 0)
	(set int64 1 stringlen 255)
	(set int64 1 slen 0)
	// (set string 256 buf)
	(set string 256 comm)
	(set string s comm_get "GET")
	(set string 2 ch)
	(set string 256 filename "")
	(set string 256 filesend)
	// (set string 256 filesize)
	(set string 256 header)
	(set string s space " ")
	(set string 256 read "r")
	(set string 256 client)
	(set string 256 mimetype)
	(set string s emptystr "")
	(set int64 1 mimetype_len 255)
	(set string s error_clientaddr "webserver run ERROR: can't get client address!")
	(set string s error_sread "webserver run ERROR: can't read request!")
	(set string s file_req "Got file request: ")
	(set string s error_mimetype "webserver: ERROR can't get file mimentype!")
	(set string s error_send_file "webserver: ERROR can't send file!")
	(set string s error_get_filename "webserver: ERROR can't get filename!")
	(set string s file_send "try to send file: ")
	(set string s error_close_accept "ERROR: close accept socket call!")
	(set string s webserver_rootstr "web")
	(set string 256 filename_realstr "")
	// get values from stack
	// (accept stpopi)
	// (server stpopi)
	(server_accept accept =)
	(socket_handle server =)
	(7 0 0 0 intr0)
	// (accept clientaddr :get_clientaddr call)
	// (ret stpopi)
	// (loadreg)
	// (((ret zero !=) f =) f if)
	//	(6 error_clientaddr 0 0 intr0)
	//	(7 0 0 0 intr0)
	//	(:parse_end jmp)
	// (endif)
	//
	//
	// parse loop =============================================================
	//
	//
	(:run_parse)
	(accept bufaddr stringlen :socket_read_string call)
	(ret stpopi)
	(loadreg)
	(((ret zero !=) f =) f if)
		(6 error_clientaddr 0 0 intr0)
		(7 0 0 0 intr0)
		(:parse_end jmp)
	(endif)
	// print request
	(6 buf 0 0 intr0)
	(7 0 0 0 intr0)
	// get filename
	(bufaddr filenameaddr filesize :socket_handle_get call)
	(ret stpopi)
	(loadreg)
	(((ret zero !=) f =) f if)
		(6 error_get_filename 0 0 intr0)
		(7 0 0 0 intr0)
		(:close_accept jmp)
	(endif)
	(filename_realstraddr webserver_rootstraddr :string_copy call)
	(filename_realstraddr filenameaddr :string_cat call)
	(filenameaddr filename_realstraddr :string_copy call)
	(:parse_end)
	//
	//
	// get mimetype and send file =============================================
	//
	//
	(6 filename 0 0 intr0)
	(7 0 0 0 intr0)
	(filenameaddr mimetypeaddr mimetype_len :get_mimetype_from_filename call)
	(ret stpopi)
	(loadreg)
	(((ret zero !=) f =) f if)
		(6 error_mimetype 0 0 intr0)
		(7 0 0 0 intr0)
	(endif)
	(accept filenameaddr mimetypeaddr :socket_send_file call)
	(ret stpopi)
	(loadreg)
	(((ret zero !=) f =) f if)
		(6 error_send_file 0 0 intr0)
		(7 0 0 0 intr0)
	(endif)
	(:close_accept)
	// close accept server
	(accept :close_accept_server call)
	(ret stpopi)
	(loadreg)
	(((ret zero !=) f =) f if)
		(6 error_close_accept 0 0 intr0)
		(7 0 0 0 intr0)
	(endif)
	threx (zero)
(funcend)
#include <net-lib.l1h>
#include <string.l1h>
