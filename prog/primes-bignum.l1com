// primes-bignum.l1com
// check if number in given range is prime or not
//
// NEW: mp_set_float_prec function to set numbers base and precision (internal bits)
//
#include <intr.l1h>

(main func)
	(set const-int64 1 zero 0)
    (set const-int64 1 one 1)
	(set const-int64 1 two 2)
	(set const-int64 1 three 3)

    (set string s zerostr "0")
    (set string s onestr "1")
    (set string s twostr "2")
    (set string s threestr "3")
	(set string s startstr "10000000000")
	(set string s endstr "10000000100")
    (set string s formatstr "%.20Ff")

    (set string s endloopstr "ending loop!")

    (set string 4096 outstr "")
    (set const-int64 1 outstr_len 4095)
    (set const-int64 1 precision 0)
    (set const-int64 1 precision_set 4096)

    (set const-int64 1 base 10)

    (set const-int64 1 startaddr 0)
    (set const-int64 1 endaddr 1)
	(set const-int64 1 numaddr 2)
    (set const-int64 1 iaddr 3)
    (set const-int64 1 maxaddr 4)
    (set const-int64 1 modaddr 5)
    (set const-int64 1 oneaddr 6)
    (set const-int64 1 twoaddr 7)
    (set const-int64 1 threeaddr 8)
    (set const-int64 1 zeroaddr 12)
    (set const-int64 1 flooraddr 13)
    (set const-int64 1 fnumaddr 14)
    (set const-int64 1 divaddr 16)
	(set int64 1 f 0)
    (set int64 1 ret 0)

    (set string s modretstr "mod: ")
    (set string s loop_startstr "loop:")
    (set string s numstr "num: ")
    (set string s not_primestr "not prime!")
    (set string s fnumstr "fnumstr: ")
    (set string s floorstr "floor: ")

    (set string s isprimestr " is prime!")

	(zero :mp_math_init !)

    // create MPFR bignums
    (zerostr base zeroaddr :mp_set_float !)
    (onestr base oneaddr :mp_set_float !)
    (twostr base twoaddr :mp_set_float !)
    (threestr base threeaddr :mp_set_float !)
    (startstr base precision_set startaddr :mp_set_float_prec !)
    (endstr base precision_set endaddr :mp_set_float_prec !)
    (startstr base precision_set numaddr :mp_set_float_prec !)

	(:run_loop)
    (numaddr endaddr :mp_less !)
    (ret stpop)
    (((ret one !=) f =) f if)
        //print_s (endloopstr)
        // print_n
        (:loop_end jmp)
    (endif)

    (numaddr twoaddr :mp_equal !)
    (ret stpop)
    (((ret one ==) f =) f if)
        (:show_num jmp)
    (endif)

    (numaddr threeaddr :mp_equal !)
    (ret stpop)
    (((ret one ==) f =) f if)
        (:show_num jmp)
    (endif)

    (numaddr oneaddr :mp_equal !)
    (ret stpop)
    (((ret one ==) f =) f if)
        (:not_prime jmp)
    (endif)

    //print_s (loop_startstr)
    //print_n

    (twostr base iaddr :mp_set_float !)


    (numaddr outstraddr outstr_len formatstr precision :mp_prints_float !)
    print_n
    print_s (numstr)
    print_s (outstr)
    print_n

    (:loop)
    //(iaddr outstraddr outstr_len formatstr precision :mp_prints_float !)
    //print_s (outstr)
    //print_n
    (reset-reg)
    (iaddr numaddr :mp_less_equal !)
    (ret stpop)
    (((ret zero ==) f =) f if)
        (:loop_end jmp)
    (endif)

    // do trial modulo, if found at least one math to zero, then number is not prime
    (numaddr iaddr divaddr :mp_div_float !)
    (divaddr flooraddr :mp_floor_float !)

    (flooraddr outstraddr outstr_len formatstr precision :mp_prints_float !)
    //print_s (floorstr)
    //print_s (outstr)
    //print_n

    (flooraddr iaddr fnumaddr :mp_mul_float !)
    (fnumaddr numaddr modaddr :mp_sub_float !)

    (fnumaddr outstraddr outstr_len formatstr precision :mp_prints_float !)
    //print_s (fnumstr)
    //print_s (outstr)
    //print_n
    //print_n

    // sane check
    (numaddr fnumaddr :mp_equal !)
    (ret stpop)
    (((ret zero !=) f =) f if)
        (flooraddr oneaddr :mp_equal !)
        (ret stpop)
        (((ret zero !=) f =) f if)
            (:show_num jmp)
        (endif)
    (endif)

    (reset-reg)
    (modaddr zeroaddr :mp_equal !)
    (ret stpop)

    //print_i (ret)
    // print_n
    (((ret zero !=) f =) f if)
        //print_s (not_primestr)
        // print_n
        (:not_prime jmp)
    (endif)
    (iaddr oneaddr iaddr :mp_add_float !)
    (:loop jmp)

    (:show_num)
    (numaddr outstraddr outstr_len formatstr precision :mp_prints_float !)
    print_s (outstr)
    print_s (isprimestr)
    print_n

    (:not_prime)
    (numaddr oneaddr numaddr :mp_add_float !)
    (:run_loop jmp)

    (:loop_end)
	exit (zero)
(funcend)
#include <mpfr-lib-auto.l1h>
