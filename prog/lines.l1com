// lines.l1com
// a draw lines program
//
#include <intr.l1h>
(main func)
    (set int64 1 zero 0)
    (set int64 1 one 1)
    (set int64 1 two 2)
    (set int64 1 three 3)
    (set int64 1 width 640Q)
    (set int64 1 height 512Q)
    (set int64 1 bit 32)
    (set int64 1 ret 0)
	(set int64 1 posstep 50)
	(set int64 1 xpos 70)
	(set int64 1 ypos 6)
	(set int64 1 xmax 570)
	(set int64 1 ymax 506)
    (set int64 1 f 0)
    (set int64 1 delay 1000)
    (set int64 1 x 0)
	(set int64 1 y 0)
	(set int64 1 mouse_button_left 0)
	(set int64 1 mouse_button_middle 0)
	(set int64 1 mouse_button_right 0)
    (set int64 1 max_delay 20)
    (set int64 1 dsec 1)
	(set string s sdl_errorstr "SDL: ERROR can't open screen!")
	(set string s sdl_okstr "SDL: screen opened")
	(set string s sdl_finishedstr "SDL: program successfully finished!")
    // open screen
    (zero width height bit zero :sdl_open_screen !)
    (ret stpopi)
    (loadreg)
	(((ret zero !=) f =) f if+)
		print_s (sdl_errorstr)
		print_n
		free_mod (zero)
		exit (one)
	(else)
		print_s (sdl_okstr)
		print_n
	(endif)
    // draw gfx
    (:draw_ptop !)
	// ! sdl update
    (:sdl_update !)
    (:wait_loop)
	detime (delay)
    (((dsec max_delay <) f =) f if)
        // do sdl update
        (:sdl_update !)
        (:sdl_get_mouse_state !)
	    (x stpopi)
	    (y stpopi)
	    (mouse_button_left stpopi)
	    (mouse_button_middle stpopi)
	    (mouse_button_right stpopi)
        ((dsec one +) dsec =)
        (:wait_loop jmp)
    (endif)
    (:sdl_quit jsr)
    // close sdl module
   free_mod (zero)
   print_s (sdl_finishedstr)
   print_n
   exit (zero)
(funcend)
(draw_ptop func)
	(set int64 1 one 1)
	(set int64 1 f 0)
	(set int64 1 y 0)
	(set int64 1 x 0)
	(set byte 1 col 255)
	(ypos y =)
	(for-loop)
	(((y ymax <=) f =) f for)
		(xpos x =)
		(for-loop)
		(((x xmax <=) f =) f for)
			(x ypos xmax y col col col col :sdl_line !)
			((x posstep +) x =)
		(next)
		((y posstep +) y =)
	(next)
	(ymax y =)
	(for-loop)
	(((y ypos >=) f =) f for)
		(xmax x =)
		(for-loop)
		(((x xpos >=) f =) f for)
			(x ymax xpos y col col col col :sdl_line !)
			((x posstep -) x =)
		(next)
		((y posstep -) y =)
	(next)
	(ypos y =)
	(for-loop)
	(((y ymax <=) f =) f for)
		(xmax x =)
		(for-loop)
		(((x xpos >=) f =) f for)
			(x ypos xpos y col col col col :sdl_line !)
			((x posstep -) x =)
		(next)
		((y posstep +) y =)
	(next)
	(ymax y =)
	(for-loop)
	(((y ypos >=) f =) f for)
		(xpos x =)
		(for-loop)
		(((x xmax <=) f =) f for)
			(x ymax xmax y col col col col :sdl_line !)
			((x posstep +) x =)
		(next)
		((y posstep -) y =)
	(next)
(funcend)
#include <sdl-lib.l1h>
