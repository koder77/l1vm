// sum.l1com
// split space separated number input into a string array. and add all the numbers.
#include <intr.l1h>
#include <math-const.l1h>
#include <misc-macros.l1h>
(main func)
	(set const-int64 1 zero 0)
    (set const-int64 1 one 1)
	(set string s reqstr "numbers? ")
    (set string s sumstr "sum: ")
    (set string s hintstr "type in numbers separated by spaces, the sum of all numbers will be shown")
    (set int64 1 str_len 4096)
	(set string 4097 inputstr "")
	(set string 4097 numstr "")
	(set string 4097 arraystr "")
	(set int64 1 array_size 4096)
	(set int64 1 array_strlen 256)
	(set string s separstr " ")
	(set int64 1 numindex 0)
	(set int64 1 num_strlen 0)
    (set int64 1 num 0)
    (set int64 1 sum 0)
	(set int64 1 f 0)
    (set int64 1 inputstr_len 0)
    (set int64 1 numbers 0)
	(zero :string_init !)
    (one :math_init !)
    print_s (hintstr)
    print_n
	(:loop)
	    (zero numindex =)
        (zero sum =)
	    print_s (reqstr)
	    input_s (str_len, inputstr)
        (inputstr :string_len !)
        (inputstr_len stpop)
        (((inputstr_len zero ==) f =) f if)
            exit (zero)
        (endif)

        // split input string
        (inputstr arraystr array_strlen array_size separstr :string_split_to_array !)
        (numbers stpop)
        (:get_number)
            (arraystr numstr numindex array_strlen array_size :array_to_string !)
            (((numindex numbers <) f =) f if+)
                (numstr :string_to_int !)
                (num stpop)
                ((sum num +) sum =)
                ((numindex one +) numindex =)
			(else)
                 print_s (sumstr)
                 pull_int64_var (sum)
                 print_i (sum)
                 print_n
				(:loop jmp)
			(endif)
		(:get_number jmp)
    (:loop jmp)
(funcend)

#include <string.l1h>
#include <string-tools.l1h>
#include <math-lib.l1h>
