// crosswords.l1com
//
// crosswords designer
//
//  +-+-+-+-+-+-+
//  |w|o|r|l|d|#|
//  +-+-+-+-+-+-+
//
// set your username in the wordfile below in the set line:
//
// (set byte 4862542 wordfile $/home/stefan/l1vm/dictionary/words-english.txt)
//
#include <intr.l1h>
#include <math-const.l1h>
#include <misc-macros.l1h>
(main func)
    #include <file-def.l1h>
    (set const-int64 1 zero 0)
    (set const-int64 1 one 1)
    (set const-int64 1 two 2)
    (set const-int64 1 three 3)
    (set const-int64 1 max_x 30)
    (set const-int64 1 max_y 30)
    (set byte 900 cells)
    (set byte 900 cells_seed)
    (set byte 1 chb 0)
    (set int64 1 ret 0)
    (set int64 1 chi 0)
    (set string s error_init_filesstr "error: can't allocate file handles!")
    (set string s error_write_wordliststr "error: can't write to wordlist!")
    (set string s placed_hstr "placed horizontaly: ")
    (set string s placed_vstr "placed verticaly: ")
    (set string s seedstr "uncopyrightable")
    (set string 2 charstr "")
    (set string s regexstr "^[a-z]+$")
    (set string s check1_str "telephone")
    (set string s check2_str "elephant")
    (set string s check3_str "leopard")
    (set string s check4_str "dice")
    (set string s check5_str "hand")
    (set string s check6_str "dart")
    (set string s gridstart_str "grid:")
    (set int64 1 x 0)
    (set int64 1 y 0)
    (set int64 1 cells_ind 0)
    (set int64 1 i 0)
    // direction: 0 = horizontal, 1 = vertical
    (set int64 1 direction 0)
    (set int64 1 seedstr_len 0)
    (set int64 1 f 0)
    // global file handle
    (set int64 1 wordlist 0)
    (set string 256 wordstr "")
    (set const-int64 1 Pwordstr 0)
    (set const-int64 1 search_max 10000)
    // (set const-int64 1 search_max 250000)
    (set int64 1 search 0)
    (set int64 1 wordlen 0)
    (set int64 1 wordlen_max 10)
    (set int64 1 retval 0)
    (set byte 1 newline 10)
    (set int64 1 wordfile_len 4862542)
    (set byte 4862542 wordfile $/home/stefan/l1vm/dictionary/words-english.txt)
    (set int64 1 wordfile_index 0)
    (set int64 1 randstart 2000)

    (wordstr Pwordstr pointer)

    (zero :string_init !)
    (one :math_init !)

    // init file library
    (two one :file_init !)
	(ret stpopi)
	(((ret zero !=) f =) f if)
        print_s (error_init_filesstr)
        print_n
        (:file_free_mem call)
        (one retval =)
        (:quit jmp)
	(endif)

    // init random number generator
    (randstart :math_randinit !)

    (:open_wordlist !)
    (ret stpop)
    (((ret zero !=) f =) f if)
        exit (one)
    (endif)

    // place seedstr in cells array
    (seedstr :string_len !)
    (seedstr_len stpop)
    (zero i =)
    (:init_grid !)

    (for-loop)
    (((i seedstr_len <) f =) f for)
        // get char at position i
        (seedstr i :string_mid_to_byte !)
        (chb stpop)
        (((direction one ==) f =) f if+)
            (x y chb :set_cell !)
            (x y chb :set_seed_cell !)
            ((y one +) y =)
        (else)
            (x y chb :set_cell !)
            (x y chb :set_seed_cell !)
            ((x one +) x =)
        (endif)
        ((i one +) i =)
    (next)

    // loop starts here
    (:loop)
    (Pwordstr :read_wordfile !)

    //print_s (Pwordstr)
    //print_n

    (Pwordstr :string_len !)
    (wordlen stpop)
    (((wordlen wordlen_max >=) f =) f if)
         // error word to long
        (:loop jmp)
    (endif)

    (((wordlen three <) f =) f if)
        // word to short skip!
        (:loop jmp)
    (endif)

    (Pwordstr regexstr :string_regex !)
	(ret stpop)
    (((ret zero !=) f =) f if)
        // found not all lowercase words, read next word
        (:loop jmp)
    (endif)

    // print_s (Pwordstr)
    // print_n

    // check if word list words fit
    // alternate between horizontal and vertical direction
    (((direction zero ==) f =) f if+)
       (Pwordstr :check_insert_horizontal !)
       (ret stpop)
       (((ret zero ==) f =) f if)
           //print_s (placed_hstr)
           //print_s (Pwordstr)
           //print_n
           (wordlist Pwordstr :file_put_string !)
           (ret stpop)
           (((ret zero !=) f =) f if)
               print_s (error_write_wordliststr)
               print_n
               (one retval =)
               (:quit jmp)
           (endif)
           (wordlist newline :file_putc !)
           (ret stpop)
           (((ret zero !=) f =) f if)
               print_s (error_write_wordliststr)
               print_n
               (one retval =)
               (:quit jmp)
           (endif)

           (:file_flush !)
           (ret stpop)

           //print_n
           //print_s (gridstart_str)
           //print_n
           //print_n
           //(:print_grid !)
           //print_n
           //print_n

           // exit (one)
       (endif)
       (one direction =)
    (else)
       (Pwordstr :check_insert_vertical !)
       (ret stpop)
       (((ret zero ==) f =) f if)
           //print_s (placed_vstr)
           //print_s (Pwordstr)
           //print_n
           (wordlist Pwordstr :file_put_string !)
           (ret stpop)
           (((ret zero !=) f =) f if)
               print_s (error_write_wordliststr)
               print_n
               (one retval =)
               (:quit jmp)
           (endif)
           (wordlist newline :file_putc !)
           (ret stpop)
           (((ret zero !=) f =) f if)
               print_s (error_write_wordliststr)
               print_n
               (one retval =)
               (:quit jmp)
           (endif)

           (:file_flush !)
           (ret stpop)

           //print_n
           //print_s (gridstart_str)
           //print_n
           //print_n
           //(:print_grid !)
           //print_n
           //print_n

           // exit (one)
       (endif)
       (zero direction =)
    (endif)

    // print_i (search)
    // print_n

    ((search one +) search =)
    (((search search_max <) f =) f if)
        (:loop jmp)
    (endif)

    (:quit)
    (wordlist :file_close !)

    print_n
    print_n
    (:print_grid !)

    print_n
    print_n
    (:print_puzzle_grid !)
    exit (retval)
(funcend)

(open_wordlist func)
    #var ~ open_wordlist

#docustart
open_wordlist
=============
Open the wordlist file: "wordlist.txt" to write the grid matching words.
Returns "zero" if file is opened.

#docuend

    (set const-int64 1 zero~ 0)
    (set const-int64 1 one~ 1)
    (set int64 1 ret~ 0)
    (set int64 1 f~ 0)
    (set string s wordliststr~ "crosswords/wordlist.txt")
    (set string s error_open_filestr~ "error: can't open wordlist!")

    (file_mode_write wordliststr~ :file_open !)
	//
	// get file handle from file_open call
	//
    (wordlist stpopi)
	(((wordlist zero~ <) f~ =) f~ if+)
        // ERROR open file
        print_s (error_open_filestr~)
        print_n
        (one~ stpush)
    (else)
        (zero~ stpush)
	(endif)
(funcend)

(read_wordfile func)
    #var ~ read_wordfile

#docustart
read_wordfile
=============
Read words from word file byte array: "wordfile".
Skip "skip_count~" words and get the next word, to make things more random.
Reset the byte array index to 0 on array end.

#docuend

    (set const-int64 1 zero~ 0)
    (set const-int64 1 one~ 1)
    (set int64 1 f~ 0)
    (set byte 1 ch~ 0)
    (set int64 1 chi~ 0)
    (set int64 1 word_end~ 10)
    (set string 2 chstr~ "")
    (set string s emptystr~ "")
    (set int64 1 wordstr~ 0)
    (set string s word_endstr~ "word-end")
    (set int64 1 random_max~ 400)
    (set int64 1 skip_count~ 0)

    (wordstr~ stpop)
    (wordstr~ emptystr~ :string_copy !)

    // get random skip over words
    (random_max~ :math_randintmax !)
    (skip_count~ stpop)

    (:read_wordfile_loop)
        (wordfile [ wordfile_index ] chi~ =)
        pull_int64_var (chi~)

        (((chi~ word_end~ ==) f~ =) f~ if+)
            ((wordfile_index one~ +) wordfile_index =)
            (((wordfile_index wordfile_len ==) f~ =) f~ if)
                // reached end of wordfile data array, set back to zero
                (zero~ wordfile_index =)
            (endif)

            (:read_wordfile_end jmp)
        (else)
            (chi~ chstr~ :string_bytenumtostring !)
            (wordstr~ chstr~ :string_cat !)
        (endif)
        ((wordfile_index one~ +) wordfile_index =)
        (((wordfile_index wordfile_len ==) f~ =) f~ if)
            // reached end of wordfile data array, set back to zero
            (zero~ wordfile_index =)
        (endif)
        (:read_wordfile_loop jmp)

    (:read_wordfile_end)
    ((skip_count~ one~ -) skip_count~ =)
    (((skip_count~ zero~ >) f~ =) f~ if)
        (wordstr~ emptystr~ :string_copy !)
        (:read_wordfile_loop jmp)
    (endif)
(funcend)

// cell words
(set_cell func)
    #var ~ set_cell

#docustart
set_cell
========
Set char in word grid at given coordinate "x~", "y~".

#docuend

    (set int64 1 real_ind~ 0)
    (set int64 1 x~ 0)
    (set int64 1 y~ 0)
    (set byte 1 chb~ 0)
    (chb~ stpopb)
    (y~ stpopi)
    (x~ stpopi)

    ((y~ max_y *) real_ind~ =)
    ((real_ind~ x~ +) real_ind~ =)
    (chb~ cells [ real_ind~ ] =)
(funcend)
(get_cell func)
    #var ~ get_cell

#docustart
get_cell
========
Get char from word grid at given coordinate "x~", "y~".

#docuend

    (set int64 1 real_ind~ 0)
    (set int64 1 x~ 0)
    (set int64 1 y~ 0)
    (set byte 1 chb~ 0)
    (y~ x~ stpop)

    ((y~ max_y *) real_ind~ =)
    ((real_ind~ x~ +) real_ind~ =)
    (cells [ real_ind~ ] chb~ =)

    (chb~ stpushb)
(funcend)

// cells_seed
(set_seed_cell func)
    #var ~ set_seed_cell

#docustart
set_seed_cell
=============
Set char in seed word grid at given coordinate "x~", "y~".

#docuend

    (set int64 1 real_ind~ 0)
    (set int64 1 x~ 0)
    (set int64 1 y~ 0)
    (set byte 1 chb~ 0)
    (chb~ stpopb)
    (y~ stpopi)
    (x~ stpopi)

    ((y~ max_y *) real_ind~ =)
    ((real_ind~ x~ +) real_ind~ =)
    (chb~ cells_seed [ real_ind~ ] =)
(funcend)
(get_seed_cell func)
    #var ~ get_seed_cell

#docustart
get_seed_cell
=============
Get char from seed word grid at given coordinate "x~", "y~".

#docuend

    (set int64 1 real_ind~ 0)
    (set int64 1 x~ 0)
    (set int64 1 y~ 0)
    (set byte 1 chb~ 0)
    (y~ x~ stpop)

    ((y~ max_y *) real_ind~ =)
    ((real_ind~ x~ +) real_ind~ =)
    (cells_seed [ real_ind~ ] chb~ =)

    (chb~ stpushb)
(funcend)


(init_grid func)
    #var ~ init_grid

#docustart
init_grid
=========
Set the whole word grid and the seed grid to empty chars.

#docuend

    (set const-int64 1 zero~ 0)
    (set const-byte 1 zerob~ 0)
    (set const-int64 1 one~ 1)
    (set const-byte 1 spacec~ 32)
    (set int64 1 x~ 0)
    (set int64 1 y~ 0)
    (set int64 1 f~ 0)
    (zero~ x~ =)
    (zero~ y~ =)
    (for-loop)
    (((y~ max_y <) f~ =) f~ for)
        (zero~ x~ =)
        (for-loop)
        (((x~ max_x <) f~ =) f~ for)
            (reset-reg)
            (x~ y~ spacec~ :set_cell !)
            (x~ y~ spacec~ :set_seed_cell !)
            ((x~ one~ +) x~ =)
        (next)
        //print_n
        ((y~ one~ +) y~ =)
    (next)
(funcend)

(print_grid func)
    #var ~ print_grid

#docustart
print_grid
==========
Print the words in the grid to show the solution at program end.
Also used for debugging.

#docuend

    (set const-int64 1 zero~ 0)
    (set const-byte 1 zerob~ 0)
    (set const-int64 1 one~ 1)
    (set const-int64 1 chlen~ 2)
    (set int64 1 real_ind~ 0)
    (set int64 1 x~ 0)
    (set int64 1 y~ 0)
    (set int64 1 f~ 0)
    (set byte 1 chb~ 0)
    (set int64 1 chi~ 0)
    (set string 2 ch~ "")
    (set string s formstr~ "%c")
    (zero~ x~ =)
    (zero~ y~ =)
    (for-loop)
    (((y~ max_y <) f~ =) f~ for)
        (zero~ x~ =)
        (for-loop)
        (((x~ max_x <) f~ =) f~ for)
            (reset-reg)
            (x~ y~ :get_cell !)
            (chb~ stpopb)
            // ((chb~ zerob~ +) chb~ =)
            (chb~ chi~ =)
            // print_i (chi~)
            // print_n
             printf_i (formstr~, chi~)
            //print_i (chi~)
            //print_n
            ((x~ one~ +) x~ =)
        (next)
        print_n
        ((y~ one~ +) y~ =)
    (next)
(funcend)

(print_puzzle_grid func)
// print puzzle grid with the text input field empty and the not used marks
//  +-+-+-+-+-+-+
//  |w|o|r|l|d|#|
//  +-+-+-+-+-+-+

    #var ~ print_puzzle_grid

#docustart
print_puzzle_grid
=================
Print the grid with the seed words in it.

#docuend

    (set const-int64 1 zero~ 0)
    (set const-byte 1 zerob~ 0)
    (set const-int64 1 one~ 1)
    (set const-int64 1 chlen~ 2)
    (set int64 1 real_ind~ 0)
    (set int64 1 x~ 0)
    (set int64 1 y~ 0)
    (set int64 1 f~ 0)
    (set byte 1 chb~ 0)
    (set int64 1 chi~ 0)
    (set const-int64 1 spacec~ 32)
    (set string 2 ch~ "")
    (set string s formstr~ "%c")
    (set string s top_str~ "+-")
    (set string s plus_str~ "+")
    (set string s sep_str~ "|")
    // set ASCI code of #
    (set int64 1 space_markc~ 35)
    (set string s space_str~ " ")
    (set byte 1 seedb~ 0)
    (set int64 1 seedi~ 0)
    (zero~ x~ =)
    (zero~ y~ =)
    (for-loop)
    (((y~ max_y <) f~ =) f~ for)
        (zero~ x~ =)
        (for-loop)
        (((x~ max_x <) f~ =) f~ for)
            print_s (top_str~)
            ((x~ one~ +) x~ =)
        (next)
        print_s (plus_str~)
        print_n
        print_s (sep_str~)
        (zero~ x~ =)
        (for-loop)
        (((x~ max_x <) f~ =) f~ for)
            (reset-reg)
            (x~ y~ :get_cell !)
            (chb~ stpopb)
            (((chb~ spacec~ ==) f~ =) f~ if+)
                 printf_i (formstr~, space_markc~)
            (else)
                (x~ y~ :get_seed_cell !)
                (seedb~ stpop)
                (((seedb~ spacec~ !=) f~ =) f~ if+)
                    (seedb~ seedi~ =)
                    printf_i (formstr~, seedi~)
                    (:print_puzzle_grid_next jmp)
                (else)
                    print_s (space_str~)
                (endif)
            (endif)

            (:print_puzzle_grid_next)
            print_s (sep_str~)
            ((x~ one~ +) x~ =)
        (next)
        print_n
        ((y~ one~ +) y~ =)
    (next)
     (zero~ x~ =)
    (for-loop)
    (((x~ max_x <) f~ =) f~ for)
        print_s (top_str~)
        ((x~ one~ +) x~ =)
    (next)
    print_s (plus_str~)
    print_n
(funcend)


(check_insert_vertical func)
    #var ~ check_insert_vertical

#docustart
check_insert_vertical
====================
Try to fit the random word into the grid.
Check if vertical orientation fits.
Returns "zero" if word fits.

#docuend

    (set const-int64 1 zero~ 0)
    (set const-byte 1 zerob~ 0)
    (set const-int64 1 one~ 1)
    (set const-int64 1 two~ 2)
    (set const-int64 1 chlen~ 2)
    (set int64 1 real_ind~ 0)
    (set int64 1 x~ 0)
    (set int64 1 y~ 0)
    (set int64 1 f~ 0)
    (set byte 1 chb~ 0)
    (set int64 1 chi~ 0)
    (set string 2 ch~ "")
    (set int64 1 Pwordstr~ 0)
    (set int64 1 word_ind~ 0)
    (set int64 1 wordstr_len~ 0)
    (set byte 1 wordb~ 0)
    (set int64 1 match~ 0)
    (set int64 1 match_x~ 0)
    (set int64 1 match_y~ 0)
    (set int64 1 space~ 0)
    (set int64 1 i~ 0)
    (set const-int64 1 spacec~ 32)
    (set int64 1 ysp~ 0)
    (set string s errstr~ "insert_vertical: ERROR string to long: ")
    (set string s matchstartstr~ "found match start")
    (set string s matchxstr~ "match x: ")
    (set string s insertstr~ "found match end: OK to insert")
    (set string s spacestr~ " ")
    (set string s commastr~ ",")
    (set string s breakstr~ "match break")
    (set int64 1 ret~ 0)
    (set int64 1 mod~ 0)
    (set int64 1 match_two_chars~ 0)
    (set int64 1 chars_check~ 0)
    (set string s found_two_set_str~ "found two already set chars, skipping!")
    (set int64 1 max_loop~ 0)
    (set int64 1 space_max_y~ 0)
    (set int64 1 space_pos_y~ 0)
    (set int64 1 space_pos_x~ 0)
    (set int64 1 char_pos_x~ 0)
    (one~ ret~ =)
    (Pwordstr~ stpop)
    (Pwordstr~ :string_len !)
    (wordstr_len~ stpop)
    (((wordstr_len~ max_y >=) f~ =) f~ if)
        print_s (errstr~)
        print_i (wordstr_len~)
        print_n
        (:check_insert_vertical_end !)
    (endif)
    (zero~ word_ind~ =)
    (zero~ x~ =)
    (zero~ y~ =)
    (zero~ match~ =)
    (for-loop)
    (((y~ max_y <) f~ =) f~ for)
        (zero~ x~ =)
        (for-loop)
        (((x~ max_x <) f~ =) f~ for)
            (reset-reg)
            (x~ y~ :get_cell !)
            (chb~ stpopb)

            (Pwordstr~ word_ind~ :string_mid_to_byte !)
            (wordb~ stpop)

            (reset-reg)
            (((chb~ wordb~ ==) f~ =) f~ if)
                // check if x coordinate is even
                ((x~ two~ ^) mod~ =)
                (((mod~ one~ ==) f~ =) f~ if)
                      (zero~ match~ =)
                      (:check_insert_vertical_next jmp)
                (endif)

                // found matching char
                (one~ match~ =)
                (x~ match_x~ =)
                (y~ match_y~ =)

                // check if space fits
                ((y~ wordstr_len~ +) space~ =)
                //((space~ one~ -) space~ =)
                (((space~ max_y >=) f~ =) f~ if)
                    // not enough space, skip
                    (zero~ match~ =)
                    (:check_insert_vertical_next jmp)
                (endif)
                    (y~ i~ =)
                    (zero~ match_two_chars~ =)
                    (zero~ chars_check~ =)
                    (for-loop)
                    (((word_ind~ wordstr_len~ <) f~ =) f~ for)
                        ((i~ one~ +) i~ =)
                        ((chars_check~ one~ +) chars_check~ =)
                        ((word_ind~ one~ +) word_ind~ =)
                        (x~ i~ :get_cell !)
                        (chb~ stpopb)

                        (Pwordstr~ word_ind~ :string_mid_to_byte !)
                        (wordb~ stpop)

                        (reset-reg)
                        // check if equal or zero (unset char)
                        (zero~ match~ =)
                        (((word_ind~ zero~ ==) f~ =) f~ if+)
                            (((chb~ wordb~ ==) f~ =) f~ if)
                                (one~ match~ =)
                                ((match_two_chars~ one~ +) match_two_chars~ =)
                            (endif)
                        (else)
                            (((chb~ spacec~ ==) f~ =) f~ if+)
                                 (((x~ zero~ >) f~ =) f~ if+)
                                     // get position of left side char
                                     ((x~ one~ -) char_pos_x~ =)
                                     (char_pos_x~ i~ :get_cell !)
                                     (chb~ stpopb)
                                     (((chb~ spacec~ !=) f~ =) f~ if+)
                                         // char left from current x is not space, no insert word
                                         (zero~ match~ =)
                                         (:check_insert_vertical_next jmp)
                                      (else)
                                          (one~ match~ =)
                                      (endif)
                                 (else)
                                       (one~ match~ =)
                                 (endif)
                            (else)
                                 // found no space, set match to zero
                                 (zero~ match~ =)
                                 (:check_insert_vertical_next jmp)
                            (endif)
                        (endif)

                        // check if space before y coord
                        (((y~ zero~ >) f~ =) f~ if)
                            ((y~ one~ -) ysp~ =)
                            (x~ ysp~ :get_cell !)
                            (chb~ stpopb)
                            (((chb~ spacec~ !=) f~ =) f~ if)
                                (zero~ match~ =)
                                (:check_insert_vertical_next jmp)
                            (endif)
                        (endif)

                        // check if last char bottom side is space
                        ((wordstr_len~ one~ -) max_loop~ =)
                        (((word_ind~ max_loop~ ==) f~ =) f~ if)
                            ((max_y two~ -) space_max_y~ =)
                            (((i~ space_max_y~ <=) f~ =) f~ if)
                                ((i~ one~ +) space_pos_y~ =)
                                (x~ space_pos_y~ :get_cell !)
                                (chb~ stpopb)
                                (((chb~ spacec~ !=) f~ =) f~ if)
                                   (zero~ match~ =)
                                   (:check_insert_vertical_next jmp)
                                (endif)
                            (endif)
                        (endif)
                    (next)
                    (((match~ one~ ==) f~ =) f~ if)
                        (:check_insert_vertical_insert jmp)
                    (endif)
            (endif)
            (:check_insert_vertical_next)
            (zero~ word_ind~ =)
            ((x~ two~ +) x~ =)
        (next)
        ((y~ one~ +) y~ =)
    (next)
    (:check_insert_vertical_insert)
    (((match~ one~ ==) f~ =) f~ if)
        // insert word into grid
        (match_x~ x~ =)
        (match_y~ y~ =)
        (zero~ word_ind~ =)

        (for-loop)
        (((word_ind~ wordstr_len~ <) f~ =) f~ for)
            (Pwordstr~ word_ind~ :string_mid_to_byte !)
            (wordb~ stpop)
            (match_x~ y~ wordb~ :set_cell !)
            ((y~ one~ +) y~ =)
            ((word_ind~ one~ +) word_ind~ =)
        (next)
        (zero~ ret~ =)
    (endif)

    (:check_insert_vertical_end)
    (ret~ stpush)
(funcend)

(check_insert_horizontal func)
    #var ~ check_insert_horizontal

#docustart
check_insert_horizontal
=======================
Try to fit the random word into the grid.
Check if horizontal orientation fits.
Returns "zero" if word fits.

#docuend

    (set const-int64 1 zero~ 0)
    (set const-byte 1 zerob~ 0)
    (set const-int64 1 one~ 1)
    (set const-int64 1 two~ 2)
    (set const-int64 1 chlen~ 2)
    (set int64 1 real_ind~ 0)
    (set int64 1 x~ 0)
    (set int64 1 y~ 0)
    (set int64 1 f~ 0)
    (set byte 1 chb~ 0)
    (set int64 1 chi~ 0)
    (set string 2 ch~ "")
    (set int64 1 Pwordstr~ 0)
    (set int64 1 word_ind~ 0)
    (set int64 1 wordstr_len~ 0)
    (set byte 1 wordb~ 0)
    (set int64 1 match~ 0)
    (set int64 1 match_x~ 0)
    (set int64 1 match_y~ 0)
    (set int64 1 space~ 0)
    (set int64 1 i~ 0)
    (set const-int64 1 spacec~ 32)
    (set int64 1 xsp~ 0)
    (set string s errstr~ "insert_horizontal: ERROR string to long: ")
    (set string s matchstartstr~ "found match start")
    (set string s matchxstr~ "match x: ")
    (set string s insertstr~ "found match end: OK to insert")
    (set string s spacestr~ " ")
    (set string s commastr~ ",")
    (set string s breakstr~ "match break")
    (set int64 1 ret~ 0)
    (set int64 1 mod~ 0)
    (set int64 1 print~ 0)
    (set int64 1 space_end_x~ 0)
    (set int64 1 space_top_y~ 0)
    // empty space left side of insert word
    (one~ ret~ =)
    (Pwordstr~ stpop)
    (Pwordstr~ :string_len !)
    (wordstr_len~ stpop)
    (((wordstr_len~ max_y >=) f~ =) f~ if)
        print_s (errstr~)
        print_i (wordstr_len~)
        print_n
        (:check_insert_vertical_end jmp)
    (endif)
    (zero~ word_ind~ =)
    (zero~ x~ =)
    (zero~ y~ =)
    (zero~ match~ =)
    (for-loop)
    (((y~ max_y <) f~ =) f~ for)
        (zero~ x~ =)
        (for-loop)
        (((x~ max_x <) f~ =) f~ for)
            (reset-reg)
            (x~ y~ :get_cell !)
            (chb~ stpopb)

            (Pwordstr~ word_ind~ :string_mid_to_byte !)
            (wordb~ stpop)

            (reset-reg)
            (((chb~ wordb~ ==) f~ =) f~ if)
                // found matching char

                (one~ match~ =)
                (x~ match_x~ =)
                (y~ match_y~ =)

                // check if space fits
                ((x~ wordstr_len~ +) space~ =)
                //((space~ one~ -) space~ =)
                (((space~ max_x >=) f~ =) f~ if)
                    // not enough space, skip
                    (zero~ match~ =)
                    (:check_insert_horizontal_next jmp)
                (endif)

                // check if space char is before x start
                (((x~ zero~ >) f~ =) f~ if)
                    (reset-reg)
                    ((x~ one~ -) xsp~ =)
                    (xsp~ y~ :get_cell !)
                    (chb~ stpopb)

                    (((chb~ spacec~ !=) f~ =) f~ if)
                        (zero~ match~ =)
                        (:check_insert_horizontal_next jmp)
                    (endif)
                (endif)

                // check if space at end
                (((x~ max_x <) f~ =) f~ if)
                    ((space~ one~ +) space_end_x~ =)
                    (space_end_x~ y~ :get_cell !)
                    (chb~ stpopb)
                    (((chb~ spacec~ !=) f~ =) f~ if)
                        (zero~ match~ =)
                        (:check_insert_horizontal_next jmp)
                    (endif)
                (endif)

                    (reset-reg)
                    (x~ i~ =)
                    (for-loop)
                    (((word_ind~ wordstr_len~ <) f~ =) f~ for)
                        ((i~ one~ +) i~ =)
                        ((word_ind~ one~ +) word_ind~ =)
                        (i~ y~ :get_cell !)
                        (chb~ stpopb)

                        (reset-reg)
                        (((chb~ spacec~ ==) f~ =) f~ if+)
                             (((y~ zero~ >) f~ =) f~ if)
                                 // check if space in up position
                                 ((y~ one~ -) space_top_y~ =)
                                 (i~ space_top_y~ :get_cell !)
                                 (chb~ stpopb)
                                 (((chb~ spacec~ !=) f~ =) f~ if+)
                                     (zero~ match~ =)
                                     (:check_insert_horizontal_next jmp)
                                 (else)
                                     (one~ match~ =)
                                 (endif)
                            (endif)
                        (else)
                            (zero~ match~ =)
                            (:check_insert_horizontal_next jmp)
                        (endif)
                    (next)
                    (((match~ one~ ==) f~ =) f~ if)
                        (:check_insert_horizontal_insert jmp)
                    (endif)
            (endif)
            (:check_insert_horizontal_next)
            (reset-reg)
            (zero~ word_ind~ =)
            ((x~ one~ +) x~ =)
        (next)
        ((y~ two~ +) y~ =)
    (next)
    (:check_insert_horizontal_insert)
    (((match~ one~ ==) f~ =) f~ if)
        // insert word into grid
        (match_x~ x~ =)
        (match_y~ y~ =)
        (zero~ word_ind~ =)

        (for-loop)
        (((word_ind~ wordstr_len~ <) f~ =) f~ for)
            (Pwordstr~ word_ind~ :string_mid_to_byte !)
            (wordb~ stpop)

            (x~ match_y~ wordb~ :set_cell !)
            ((x~ one~ +) x~ =)
            ((word_ind~ one~ +) word_ind~ =)
        (next)
        (zero~ ret~ =)
    (endif)

    (:check_insert_horizontal_end)
    (ret~ stpush)
(funcend)

#include <string.l1h>
#include <math-lib.l1h>
#include <file-lib.l1h>
