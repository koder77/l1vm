// GPIO library - Raspberry Pi
//
// NOTE: include "gpio-vars.l1h" at the top of your program!
(gpio_init func)
	(set string s modulestr@gpio "libl1vmgpio")
	(set string s setupstr@gpio "gpio_setup")
	(set string s digital_writestr@gpio "gpio_digital_write")
	(set string s digital_readstr@gpio  "gpio_digital_read")
	(set string s pwm_writestr@gpio "gpio_pwm_write")
	(set string s pwm_Set_modestr@gpio "gpio_pwm_Set_mode")
	(set string s pwm_set_rangestr@gpio "gpio_pwm_set_range")
	(set string s pwm_set_clockstr@gpio "gpio_pwm_set_clock")
	(set string s pullupdn_controlstr@gpio "gpio_pullupdn_control")
	(set string s pinmodestr@gpio "gpio_pinmode")
	(set string s i2c_setupstr@gpio "i2c_setup")
	(set string s i2c_readstr@gpio "i2c_read")
	(set string s i2c_writestr@gpio "i2c_write")
	(set string s i2c_writereg8str@gpio "i2c_writereg8")
	(set string s i2c_writereg16str@gpio "i2c_writereg16")
	(set string s i2c_readreg8str@gpio "i2c_readreg8")
	(set string s i2c_readreg16str@gpio "i2c_readreg16")
	(set int64 1 setup@gpio 0)
	(set int64 1 digital_write@gpio 1)
	(set int64 1 digital_read@gpio 2)
	(set int64 1 pwm_write@gpio 3)
	(set int64 1 pwm_Set_mode@gpio 4)
	(set int64 1 pwm_set_range@gpio 5)
	(set int64 1 pwm_set_clock@gpio 6)
	(set int64 1 pullupdn_control@gpio 7)
	(set int64 1 pinmode@gpio 8)
	(set int64 1 i2c_setup@gpio 9)
	(set int64 1 i2c_read@gpio 10)
	(set int64 1 i2c_write@gpio 11)
	(set int64 1 i2c_writereg8@gpio 12)
	(set int64 1 i2c_writereg16@gpio 13)
	(set int64 1 i2c_readreg8@gpio 14)
	(set int64 1 i2c_readreg16@gpio 15)
	(set int64 1 mod@gpio 0)
	// get arguments from stack
	(mod@gpio stpopi)
	// load gpio module
    (0 modulestr@gpioaddr mod@gpio 0 intr0)
    // set functions
    (2 mod@gpio setup@gpio setupstr@gpioaddr intr0)
	(2 mod@gpio digital_write@gpio digital_writestr@gpioaddr intr0)
	(2 mod@gpio digital_read@gpio digital_readstr@gpioaddr intr0)
	(2 mod@gpio pwm_write@gpio pwm_writestr@gpioaddr intr0)
	(2 mod@gpio pwm_Set_mode@gpio pwm_Set_modestr@gpioaddr intr0)
	(2 mod@gpio pwm_set_range@gpio pwm_set_rangestr@gpioaddr intr0)
	(2 mod@gpio pwm_set_clock@gpio pwm_set_clockstr@gpioaddr intr0)
	(2 mod@gpio pullupdn_control@gpio pullupdn_controlstr@gpioaddr intr0)
	(2 mod@gpio pinmode@gpio pinmodestr@gpioaddr intr0)
	(2 mod@gpio i2c_setup@gpio i2c_setupstr@gpioaddr intr0)
	(2 mod@gpio i2c_read@gpio i2c_readstr@gpioaddr intr0)
	(2 mod@gpio i2c_write@gpio i2c_writestr@gpioaddr intr0)
	(2 mod@gpio i2c_writereg8@gpio i2c_writereg8str@gpioaddr intr0)
	(2 mod@gpio i2c_writereg16@gpio i2c_writereg16str@gpioaddr intr0)
	(2 mod@gpio i2c_readreg8@gpio i2c_readreg8str@gpioaddr intr0)
	(2 mod@gpio i2c_readreg16@gpio i2c_readreg16str@gpioaddr intr0)
	// init library
	(3 mod@gpio setup@gpio 0 intr0)
(funcend)
// wrapper functions
(gpio_digital_write func)
	(3 mod@gpio digital_write@gpio 0 intr0)
(funcend)
(gpio_digital_read func)
	(3 mod@gpio digital_read@gpio 0 intr0)
(funcend)
(gpio_pwm_write func)
	(3 mod@gpio pwm_write@gpio 0 intr0)
(funcend)
(gpio_pwm_Set_mode func)
	(3 mod@gpio pwm_Set_mode@gpio 0 intr0)
(funcend)
(gpio_pwm_set_range func)
	(3 mod@gpio pwm_set_range@gpio 0 intr0)
(funcend)
(gpio_pwm_set_clock func)
	(3 mod@gpio pwm_set_clock@gpio 0 intr0)
(funcend)
(gpio_pullupdn_control func)
	(3 mod@gpio pullupdn_control@gpio 0 intr0)
(funcend)
(gpio_pin_mode func)
	(3 mod@gpio pinmode@gpio 0 intr0)
(funcend)
(i2c_setup func)
	(3 mod@gpio i2c_setup@gpio 0 intr0)
(funcend)
(gpio_i2c_read func)
	(3 mod@gpio i2c_read@gpio 0 intr0)
(funcend)
(gpio_i2c_write func)
	(3 mod@gpio i2c_write@gpio 0 intr0)
(funcend)
(i2c_readreg8 func)
	(3 mod@gpio i2c_readreg8@gpio 0 intr0)
(funcend)
(i2c_writereg8 func)
	(3 mod@gpio i2c_writereg8@gpio 0 intr0)
(funcend)
(i2c_readreg16 func)
	(3 mod@gpio i2c_readreg16@gpio 0 intr0)
(funcend)
(i2c_writereg16 func)
	(3 mod@gpio i2c_writereg16@gpio 0 intr0)
(funcend)
// i2c help functions
(read_word_i2c func)
	(set int64 1 one@read_word_i2c 1)
	(set int64 1 smulv@read_word_i2c 8)
	(set int64 1 h@read_word_i2c 0)
	(set int64 1 l@read_word_i2c 0)
	(set int64 1 value@read_word_i2c 0)
	(set int64 1 reg@read_word_i2c 0)
	(set int64 1 fd@read_word_i2c 0)
	(reg@read_word_i2c stpopi)
	(fd@read_word_i2c stpopi)
	(fd@read_word_i2c reg@read_word_i2c :i2c_readreg8 call)
	(h@read_word_i2c stpopi)
	(loadreg)
	((reg@read_word_i2c one@read_word_i2c +) reg@read_word_i2c =)
	(fd@read_word_i2c reg@read_word_i2c :i2c_readreg8 call)
	(l@read_word_i2c stpopi)
	(loadreg)
	((h@read_word_i2c smulv@read_word_i2c <<) value@read_word_i2c =)
	((value@read_word_i2c l@read_word_i2c +) value@read_word_i2c =)
	(value@read_word_i2c stpushi)
(funcend)
(read_word_2c func)
	(set int64 1 zero@read_word_2c 0)
	(set int64 1 one@read_word_2c 1)
	(set int64 1 val@read_word_2c 0)
	(set int64 1 fn@read_word_2c 0)
	(set int64 1 ret@read_word_2c 0)
	(set int64 1 reg@read_word_2c 0)
	(set int64 1 val1@read_word_2c &8000)
	(set int64 1 val2@read_word_2c 65535)
	(set int64 1 fd@read_word_2c 0)
	(reg@read_word_2c stpopi)
	(fd@read_word_2c stpopi)
	(fd@read_word_2c reg@read_word_2c :read_word_i2c call)
	(val@read_word_2c stpopi)
	(loadreg)
	((val@read_word_2c val1@read_word_2c <) fn@read_word_2c =)
	(fn@read_word_2c :read_word_2c_less jmpi)
	((val2@read_word_2c val@read_word_2c -) ret@read_word_2c =)
	((ret@read_word_2c one@read_word_2c +) ret@read_word_2c =)
	((zero@read_word_2c ret@read_word_2c -) ret@read_word_2c =)
	(:read_word_2c_end jmp)
	(:read_word_2c_less)
	(val@read_word_2c ret@read_word_2c =)
	(:read_word_2c_end)
	(ret@read_word_2c stpushi)
(funcend)
(setup_accel func)
	// init module MPU 6050
	// return value: fd
	(set int64 1 zero@setup_accel 0)
	(set int64 1 id@setup_accel &68)
	(set int64 1 val@setup_accel &6B)
	(set int64 1 fd@setup_accel 0)
	(id@setup_accel :i2c_setup call)
	(fd@setup_accel stpopi)
	(loadreg)
	(fd@setup_accel val@setup_accel zero@setup_accel :i2c_writereg8 call)
	(loadreg)
	(fd@setup_accel stpushi)
(funcend)
(read_accel func)
	(set int64 1 x@read_accel &3B)
	(set int64 1 y@read_accel &3D)
	(set int64 1 z@read_accel &3F)
	(set int64 1 xgyro@read_accel &43)
	(set int64 1 ygyro@read_accel &45)
	(set int64 1 zgyro@read_accel &47)
	(set int64 1 xgyro_out@read_accel 0)
	(set int64 1 ygyro_out@read_accel 0)
	(set int64 1 zgyro_out@read_accel 0)
	(set int64 1 fd@read_accel 0)
	(fd@read_accel stpopi)
	(fd@read_accel x@read_accel :read_word_2c call)
	(xout@read_accel stpopi)
	(loadreg)
	(fd@read_accel y@read_accel :read_word_2c call)
	(yout@read_accel stpopi)
	(loadreg)
	(fd@read_accel z@read_accel :read_word_2c call)
	(zout@read_accel stpopi)
	(loadreg)
	(fd@read_accel xgyro@read_accel :read_word_2c call)
	(xgyro_out@read_accel stpopi)
	(loadreg)
	(fd@read_accel ygyro@read_accel :read_word_2c call)
	(ygyro_out@read_accel stpopi)
	(loadreg)
	(fd@read_accel zgyro@read_accel :read_word_2c call)
	(zgyro_out@read_accel stpopi)
	(loadreg)
	(4 xout@read_accel 0 0 intr0)
	// print newline
	(7 0 0 0 intr0)
	(4 yout@read_accel 0 0 intr0)
	// print newline
	(7 0 0 0 intr0)
	(4 zout@read_accel 0 0 intr0)
	// print newline
	(7 0 0 0 intr0)
	(7 0 0 0 intr0)
	(4 xgyro_out@read_accel 0 0 intr0)
	// print newline
	(7 0 0 0 intr0)
	(4 ygyro_out@read_accel 0 0 intr0)
	// print newline
	(7 0 0 0 intr0)
	(4 zgyro_out@read_accel 0 0 intr0)
	// print newline
	(7 0 0 0 intr0)
	(7 0 0 0 intr0)
	(7 0 0 0 intr0)
(funcend)
