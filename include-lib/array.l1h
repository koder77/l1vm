// array.l1h
// some functions to store data in an array
#include <misc-macros.l1h>
#include <vars.l1h>
(int16_to_array func)
    #var ~ int64_to_array
	(set int64 1 index~ 0)
	(set int64 1 count~ 0)
	(set int64 1 f~ 0)
	(set int64 1 num~ 0)
	(set int64 1 real_index~ 0)
	(set const-int64 1 one~ 1)
	(set int64 1 max_num~ 0)
	(set int64 1 Parray~ 0)
	(set int16 1 anum~ 0)

	(max_num~ stpop)
	(index~ stpop)
	(Parray~ stpop)
	(zero count~ =)

	(reset-reg)
	(for-loop)
	(((count~ max_num~ <) f~ =) f~ for)
	    (num~ stpop)
	    (cast num~ anum~ =)
	    {real_index~ = (index~ * int16_size)}

	    (anum~ Parray~ [ real_index~ ] =)
		(reset-reg)

        ((count~ one~ +) count~ =)
        pull_int64_var (count~)
       ((index~ one~ +) index~ =)
	(next)
(funcend)

(int32_to_array func)
    #var ~ int64_to_array
	(set int64 1 index~ 0)
	(set int64 1 count~ 0)
	(set int64 1 f~ 0)
	(set int64 1 num~ 0)
	(set int64 1 real_index~ 0)
	(set const-int64 1 one~ 1)
	(set int64 1 max_num~ 0)
	(set int64 1 Parray~ 0)
	(set int32 1 anum~ 0)

	(max_num~ stpop)
	(index~ stpop)
	(Parray~ stpop)
	(zero count~ =)

	(reset-reg)
	(for-loop)
	(((count~ max_num~ <) f~ =) f~ for)
	    (num~ stpop)
	    (cast num~ anum~ =)
	    {real_index~ = (index~ * int32_size)}

	    (anum~ Parray~ [ real_index~ ] =)
		(reset-reg)

        ((count~ one~ +) count~ =)
        pull_int64_var (count~)
       ((index~ one~ +) index~ =)
	(next)
(funcend)

(int64_to_array func)
    #var ~ int64_to_array
	(set int64 1 index~ 0)
	(set int64 1 count~ 0)
	(set int64 1 f~ 0)
	(set int64 1 num~ 0)
	(set int64 1 real_index~ 0)
	(set const-int64 1 one~ 1)
	(set int64 1 max_num~ 0)
	(set int64 1 Parray~ 0)

	(max_num~ stpop)
	(index~ stpop)
	(Parray~ stpop)
	(zero count~ =)

	(reset-reg)
	(for-loop)
	(((count~ max_num~ <) f~ =) f~ for)
	    (num~ stpop)
	    {real_index~ = (index~ * int64_size)}

	    (num~ Parray~ [ real_index~ ] =)
		(reset-reg)

        ((count~ one~ +) count~ =)
        pull_int64_var (count~)
       ((index~ one~ +) index~ =)
	(next)
(funcend)

(double_to_array func)
    #var ~ double_to_array
	(set int64 1 index~ 0)
	(set int64 1 count~ 0)
	(set int64 1 f~ 0)
	(set double 1 num~ 0)
	(set int64 1 real_index~ 0)
	(set const-int64 1 one~ 1)
	(set int64 1 max_num~ 0)
	(set int64 1 Parray~ 0)

	(max_num~ stpop)
	(index~ stpop)
	(Parray~ stpop)
	(zero count~ =)

	(reset-reg)
	(for-loop)
	(((count~ max_num~ <) f~ =) f~ for)
	    (num~ stpop)
	    {real_index~ = (index~ * double_size)}

	    (num~ Parray~ [ real_index~ ] =)
		(reset-reg)

        ((count~ one~ +) count~ =)
        pull_int64_var (count~)
		((index~ one~ +) index~ =)
	(next)
(funcend)
