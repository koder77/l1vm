// PIGPIO library - Raspberry Pi
//
// NOTE: include "gpio-vars.l1h" at the top of your program!
(gpio_init func)
    #var ~ gpio
	(set string s modulestr~ "libl1vmpigpio")
	(set string s setupstr~ "gpio_setup")
    (set string s gpio_quitstr~ "gpio_quit")
    (set string s gpio_pinstr~ "gpio_st_mode")
    (set string s gpio_get_modestr~ "gpio_get_mode")
    (set string s gpio_pullupdn_contrstr~ "gpio_pullupdn_control")
    (set string s gpio_digital_writestr~ "gpio_digital_write")
    (set string s gpio_digital_readestr~ "gpio_digital_read")
    // pwm
    (set string s gpio_pwmstr~ "gpio_pwm")
    (set string s gpio_set_pwm_freqstr~ "gpio_set_pwm_freq")
    (set string s gpio_set_pwm_rangestr~ "gpio_set_pwm_range")
    (set string s gpio_servostr~ "gpio_servo")
    (set string s gpio_get_servostr~ "gpio_get_servo")
    // i2c
    (set string s gpio_i2c_openstr~ "gpio_i2c_open")
    (set string s gpio_i2c_closestr~ "gpio_i2c_close")
    (set string s gpio_i2c_read_bytestr~ "gpio_i2c_read_byte")
    (set string s gpio_i2c_read_wordstr~ "gpio_i2c_read_word")
    (set string s gpio_i2c_write_bytestr~ "gpio_i2c_write_byte")
    (set string s gpio_i2c_write_wordstr~ "gpio_i2c_write_word")
    // number definitions
    (set int64 1 setup~ 0)
    (set int64 1 quit~ 1)
    (set int64 1 gpio_set_pin~ 2)
    (set int64 1 gpio_get_mode~ 3)
    (set int64 1 gpio_pullupdn_contr~ 4)
    (set int64 1 gpio_digital_write~ 5)
    (set int64 1 gpio_digital_read~ 6)
    (set int64 1 gpio_pwm~ 7)
    (set int64 1 gpio_set_pwm_freq~ 8)
    (set int64 1 gpio_set_pwm_range~ 9)
    (set int64 1 gpio_servo~ 10)
    (set int64 1 gpio_get_servo~ 11)
    (set int64 1 gpio_i2c_open~ 12)
    (set int64 1 gpio_i2c_close~ 13)
    (set int64 1 gpio_i2c_read_byte~ 14)
    (set int64 1 gpio_i2c_read_word~ 15)
    (set int64 1 gpio_i2c_write_byte~ 16)
    (set int64 1 gpio_i2c_write_word~ 17)
    (set int64 1 mod~ 0)
	// get arguments from stack
	(mod~ stpopi)
	// load gpio module
    (0 modulestr~ mod~ 0 intr0)
    // set functions
    (2 mod~ setup~ setupstr~ intr0)
    (2 mod~ quit~ gpio_quitstr~ intr0)
    (2 mod~ gpio_set_pin~ gpio_pinstr~ intr0)
    (2 mod~ gpio_get_mode~ gpio_get_modestr~ intr0)
    (2 mod~ gpio_pullupdn_contr~ gpio_pullupdn_contrstr~ intr0)
    (2 mod~ gpio_digital_write~ gpio_digital_writestr~ intr0)
    (2 mod~ gpio_digital_read~ gpio_digital_readestr~ intr0)
    (2 mod~ gpio_pwm~ gpio_pwmstr~ intr0)
    (2 mod~ gpio_set_pwm_freq~ gpio_set_pwm_freqstr~ intr0)
    (2 mod~ gpio_set_pwm_range~ gpio_set_pwm_rangestr~ intr0)
    (2 mod~ gpio_servo~ gpio_servostr~ intr0)
    (2 mod~ gpio_get_servo~ gpio_get_servostr~ intr0)
    (2 mod~ gpio_i2c_open~ gpio_i2c_openstr~ intr0)
    (2 mod~ gpio_i2c_close~ gpio_i2c_closestr~ intr0)
    (2 mod~ gpio_i2c_read_byte~ gpio_i2c_read_bytestr~ intr0)
    (2 mod~ gpio_i2c_read_word~ gpio_i2c_read_wordstr~ intr0)
    (2 mod~ gpio_i2c_write_byte~ gpio_i2c_write_bytestr~ intr0)
    (2 mod~ gpio_i2c_write_wordstr~ gpio_i2c_write_wordstr~ intr0)
    (3 mod~ setup~ 0 intr0)
(funcend)
// wrapper functions
(gpio_setup func)
    (3 mod@gpio setup@gpio 0 intr0)
(funcend)
(gpio_quit func)
    (3 mod@gpio quit@gpio 0 intr0)
(funcend)
(gpio_set_pin func)
    (3 mod@gpio gpio_set_pin@gpio 0 intr0)
(funcend)
(gpio_get_mode func)
    (3 mod@gpio gpio_get_mode@gpio 0 intr0)
(funcend)
(gpio_pullupdn_cont func)
    (3 mod@gpio gpio_pullupdn_contr@gpio 0 intr0)
(funcend)
(gpio_digital_write func)
    (3 mod@gpio gpio_digital_write@gpio 0 intr0)
(funcend)
(gpio_digital_read func)
    (3 mod@gpio gpio_digital_read@gpio 0 intr0)
(funcend)
(gpio_pwm func)
    (3 mod@gpio gpio_pwm@gpio 0 intr0)
(funcend)
(gpio_set_pwm_freq func)
    (3 mod@gpio gpio_set_pwm_freq@gpio 0 intr0)
(funcend)
(gpio_set_pwm_range func)
    (3 mod@gpio gpio_set_pwm_range@gpio 0 intr0)
(funcend)
(gpio_servo func)
    (3 mod@gpio gpio_servo@gpio 0 intr0)
(funcend)
(gpio_get_servo func)
    (3 mod@gpio gpio_get_servo@gpio 0 intr0)
(funcend)
(gpio_i2c_open func)
    (3 mod@gpio gpio_i2c_open@gpio 0 intr0)
(funcend)
(gpio_i2c_close func)
    (3 mod@gpio gpio_i2c_close@gpio 0 intr0)
(funcend)
(gpio_i2c_read_byte func)
    (3 mod@gpio gpio_i2c_read_byte@gpio 0 intr0)
(funcend)
(gpio_i2c_read_word func)
    (3 mod@gpio gpio_i2c_read_word@gpio 0 intr0)
(funcend)
(gpio_i2c_write_byte func)
    (3 mod@gpio gpio_i2c_write_byte@gpio 0 intr0)
(funcend)
(gpio_i2c_write_word func)
    (3 mod@gpio gpio_i2c_write_word@gpio 0 intr0)
(funcend)
// i2c help functions
// i2c help functions
(read_word_i2c func)
	(set int64 1 one@read_word_i2c 1)
	(set int64 1 smulv@read_word_i2c 8)
	(set int64 1 h@read_word_i2c 0)
	(set int64 1 l@read_word_i2c 0)
	(set int64 1 value@read_word_i2c 0)
	(set int64 1 reg@read_word_i2c 0)
	(set int64 1 fd@read_word_i2c 0)
	(reg@read_word_i2c stpopi)
	(fd@read_word_i2c stpopi)
	(fd@read_word_i2c reg@read_word_i2c :gpio_i2c_read_byte call)
	(h@read_word_i2c stpopi)
	(loadreg)
	((reg@read_word_i2c one@read_word_i2c +) reg@read_word_i2c =)
	(fd@read_word_i2c reg@read_word_i2c :gpio_i2c_read_byte call)
	(l@read_word_i2c stpopi)
	(loadreg)
	((h@read_word_i2c smulv@read_word_i2c <<) value@read_word_i2c =)
	((value@read_word_i2c l@read_word_i2c +) value@read_word_i2c =)
	(value@read_word_i2c stpushi)
(funcend)
(read_word_2c func)
	(set int64 1 zero@read_word_2c 0)
	(set int64 1 one@read_word_2c 1)
	(set int64 1 fn@read_word_2c 0)
	(set int64 1 ret@read_word_2c 0)
	(set int64 1 reg@read_word_2c 0)
	(set int64 1 val1@read_word_2c &8000)
	(set int64 1 val2@read_word_2c 65535)
	(set int64 1 fd@read_word_2c 0)
    (set int64 1 val@read_word_2c 0)
	(reg@read_word_2c stpopi)
	(fd@read_word_2c stpopi)
	(fd@read_word_2c reg@read_word_2c :gpio_i2c_read_word call)
	(val@read_word_2c stpopi)
	(loadreg)
	((val@read_word_2c val1@read_word_2c <) fn@read_word_2c =)
	(fn@read_word_2c :read_word_2c_less jmpi)
	((val2@read_word_2c val@read_word_2c -) ret@read_word_2c =)
	((ret@read_word_2c one@read_word_2c +) ret@read_word_2c =)
	((zero@read_word_2c ret@read_word_2c -) ret@read_word_2c =)
	(:read_word_2c_end jmp)
	(:read_word_2c_less)
	(val@read_word_2c ret@read_word_2c =)
	(:read_word_2c_end)
	(ret@read_word_2c stpushi)
(funcend)
(setup_accel func)
	// init module MPU 6050
	// return value: fd
	(set int64 1 zero@setup_accel 0)
	(set int64 1 id@setup_accel &68)
	(set int64 1 val@setup_accel &6B)
	(set int64 1 fd@setup_accel 0)
    (set int64 1 bus@setup_accel 0)
    (set int64 1 addr@setup_accel 0)
    (set int64 1 flags@setup_accel 0)
    (bus@setup_accel addr@setup_accel flags@setup_accel :gpio_i2c_open call)
	(fd@setup_accel stpopi)
	(loadreg)
	(fd@setup_accel val@setup_accel zero@setup_accel :gpio_i2c_write_byte call)
	(loadreg)
	(fd@setup_accel stpushi)
(funcend)
(read_accel func)
	(set int64 1 x@read_accel &3B)
	(set int64 1 y@read_accel &3D)
	(set int64 1 z@read_accel &3F)
	(set int64 1 xgyro@read_accel &43)
	(set int64 1 ygyro@read_accel &45)
	(set int64 1 zgyro@read_accel &47)
	(set int64 1 xgyro_out@read_accel 0)
	(set int64 1 ygyro_out@read_accel 0)
	(set int64 1 zgyro_out@read_accel 0)
	(set int64 1 fd@read_accel 0)
	(fd@read_accel stpopi)
	(fd@read_accel x@read_accel :read_word_2c call)
	(xout@read_accel stpopi)
	(loadreg)
	(fd@read_accel y@read_accel :read_word_2c call)
	(yout@read_accel stpopi)
	(loadreg)
	(fd@read_accel z@read_accel :read_word_2c call)
	(zout@read_accel stpopi)
	(loadreg)
	(fd@read_accel xgyro@read_accel :read_word_2c call)
	(xgyro_out@read_accel stpopi)
	(loadreg)
	(fd@read_accel ygyro@read_accel :read_word_2c call)
	(ygyro_out@read_accel stpopi)
	(loadreg)
	(fd@read_accel zgyro@read_accel :read_word_2c call)
	(zgyro_out@read_accel stpopi)
	(loadreg)
	(4 xout@read_accel 0 0 intr0)
	// print newline
	(7 0 0 0 intr0)
	(4 yout@read_accel 0 0 intr0)
	// print newline
	(7 0 0 0 intr0)
	(4 zout@read_accel 0 0 intr0)
	// print newline
	(7 0 0 0 intr0)
	(7 0 0 0 intr0)
	(4 xgyro_out@read_accel 0 0 intr0)
	// print newline
	(7 0 0 0 intr0)
	(4 ygyro_out@read_accel 0 0 intr0)
	// print newline
	(7 0 0 0 intr0)
	(4 zgyro_out@read_accel 0 0 intr0)
	// print newline
	(7 0 0 0 intr0)
	(7 0 0 0 intr0)
	(7 0 0 0 intr0)
(funcend)
