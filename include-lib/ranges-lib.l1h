// ranges library
//
// call: (var var_min var_max :ranges_int call)
//
(ranges_int func)
	#var ~ @ranges_int
	(set int64 1 var~)
	(set int64 1 min~)
	(set int64 1 max~)
	(set int64 1 ret~ 0)
	(set int64 1 f~)
	(set int64 1 one~ 1)
	(set int64 1 zero~ 0)
	(max~ stpopi)
	(min~ stpopi)
	(var~ stpopi)
	(zero~ ret~ =)
	// check if var inside ranges
	(((var~ min~ <) f~ =) f~ if)
		(one~ ret~ =)
	(endif)
	(((var~ max~ >) f~ =) f~ if)
		(one~ ret~ =)
	(endif)
	(ret~ stpushi)
(funcend)
//
//
(ranges_double func)
	(set double 1 var~)
	(set double 1 min~)
	(set double 1 max~)
	(set int64 1 ret~ 0)
	(set int64 1 f~)
	(set int64 1 one~ 1)
	(set int64 1 zero~ 0)
	(max~ stpopd)
	(min~ stpopd)
	(var~ stpopd)
	(zero~ ret~ =)
	// check if var inside ranges
	(((var~ min~ <) f~ =) f~ if)
		(one~ ret~ =)
	(endif)
	(((var~ max~ >) f~ =) f~ if)
		(one~ ret~ =)
	(endif)
	(ret~ stpushi)
(funcend)
