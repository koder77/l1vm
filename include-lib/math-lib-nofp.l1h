// math library
//
// floating point math for CPUs without floating point opcodes
//
(math_init func)
    (set string s modulestr@math "libl1vmmath-nofp")
    (set string s int2doublestr@math "int2double")
    (set string s double2intstr@math "double2int")
    (set string s sqrtdoublestr@math "sqrtdouble")
    (set string s logdoublestr@math "logdouble")
    (set string s log2doublestr@math "log2double")
    (set string s randinitstr@math "rand_init")
    (set string s randintstr@math "rand_int")
    (set string s randdoublestr@math "rand_double")
    (set string s randintmaxstr@math "rand_int_max")
    (set string s stringtointstr@math "string_to_int")
    (set string s stringtodoublestr@math "string_to_double")
	(set string s acosdoublestr@math "acosdouble")
	(set string s asindoublestr@math "asindouble")
	(set string s atandoublestr@math "atandouble")
	(set string s atan2doublestr@math "atan2double")
	(set string s cosdoublestr@math "cosdouble")
	(set string s coshdoublestr@math "coshdouble")
	(set string s sindoublestr@math "sindouble")
	(set string s sinhdoublestr@math "sinhdouble")
	(set string s tandoublestr@math "tandouble")
	(set string s tanhdoublestr@math "tanhdouble")
	(set string s expdoublestr@math "expdouble")
	(set string s log10doublestr@math "log10double")
	(set string s modfdoublestr@math "fmoddouble")
	(set string s powdoublestr@math "powdouble")
	(set string s ceildoublestr@math "ceildouble")
	(set string s fabsdoublestr@math "fabsdouble")
	(set string s floordoublestr@math "floordouble")
	(set string s fmoddoublestr@math "fmoddouble")
	(set string s adddoublestr@math "adddouble")
	(set string s subdoublestr@math "subdouble")
	(set string s muldoublestr@math "muldouble")
	(set string s divdoublestr@math "divdouble")
	(set string s double2fpstr@math "double2fp")
	(set string s fp2doublestr@math "fp2double")
    (set int64 1 int2double@math 0)
    (set int64 1 double2int@math 1)
    (set int64 1 sqrtdouble@math 2)
    (set int64 1 logdouble@math 3)
    (set int64 1 log2double@math 4)
    (set int64 1 randinit@math 5)
    (set int64 1 randint@math 6)
    (set int64 1 randdouble@math 7)
    (set int64 1 randintmax@math 8)
    (set int64 1 stringtoint@math 10)
    (set int64 1 stringtodouble@math 11)
	(set int64 1 acosdouble@math 12)
	(set int64 1 asindouble@math 13)
	(set int64 1 atandouble@math 14)
	(set int64 1 atan2double@math 15)
	(set int64 1 cosdouble@math 16)
	(set int64 1 coshdouble@math 17)
	(set int64 1 sindouble@math 18)
	(set int64 1 sinhdouble@math 19)
	(set int64 1 tanhdouble@math 20)
	(set int64 1 expdouble@math 21)
	(set int64 1 log10double@math 24)
	(set int64 1 modfdouble@math 25)
	(set int64 1 powdouble@math 26)
	(set int64 1 ceildouble@math 27)
	(set int64 1 fabsdouble@math 28)
	(set int64 1 floordouble@math 29)
	(set int64 1 fmoddouble@math 30)
	(set int64 1 adddouble@math 31)
	(set int64 1 subdouble@math 32)
	(set int64 1 muldouble@math 33)
	(set int64 1 divdouble@math 34)
	(set int64 1 double2fp@math 35)
	(set int64 1 fp2double@math 36)
	(set int64 1 tandouble@math 37)
    (set int64 1 mod@math 0)
    // get argument from stack
    (mod@math stpopi)
    // load math module
    (0 modulestr@mathaddr mod@math 0 intr0)
    // set functions
    (2 mod@math int2double@math int2doublestr@mathaddr intr0)
    (2 mod@math double2int@math double2intstr@mathaddr intr0)
    (2 mod@math sqrtdouble@math sqrtdoublestr@mathaddr intr0)
    (2 mod@math logdouble@math logdoublestr@mathaddr intr0)
    (2 mod@math log2double@math log2doublestr@mathaddr intr0)
    (2 mod@math randinit@math randinitstr@mathaddr intr0)
    (2 mod@math randint@math randintstr@mathaddr intr0)
    (2 mod@math randdouble@math randdoublestr@mathaddr intr0)
    (2 mod@math randintmax@math randintmaxstr@mathaddr intr0)
    (2 mod@math stringtoint@math stringtointstr@mathaddr intr0)
    (2 mod@math stringtodouble@math stringtodoublestr@mathaddr intr0)
	(2 mod@math acosdouble@math acosdoublestr@mathaddr intr0)
	(2 mod@math asindouble@math asindoublestr@mathaddr intr0)
	(2 mod@math atandouble@math atandoublestr@mathaddr intr0)
	(2 mod@math atan2double@math atan2doublestr@mathaddr intr0)
	(2 mod@math cosdouble@math cosdoublestr@mathaddr intr0)
	(2 mod@math coshdouble@math coshdoublestr@mathaddr intr0)
	(2 mod@math sindouble@math sindoublestr@mathaddr intr0)
	(2 mod@math sinhdouble@math sinhdoublestr@mathaddr intr0)
	(2 mod@math tanhdouble@math tanhdoublestr@mathaddr intr0)
	(2 mod@math expdouble@math expdoublestr@mathaddr intr0)
	(2 mod@math log10double@math log10doublestr@mathaddr intr0)
	(2 mod@math modfdouble@math modfdoublestr@mathaddr intr0)
	(2 mod@math powdouble@math powdoublestr@mathaddr intr0)
	(2 mod@math ceildouble@math ceildoublestr@mathaddr intr0)
	(2 mod@math fabsdouble@math fabsdoublestr@mathaddr intr0)
	(2 mod@math floordouble@math floordoublestr@mathaddr intr0)
	(2 mod@math adddouble@math adddoublestr@mathaddr intr0)
	(2 mod@math subdouble@math subdoublestr@mathaddr intr0)
	(2 mod@math muldouble@math muldoublestr@mathaddr intr0)
	(2 mod@math divdouble@math divdoublestr@mathaddr intr0)
	(2 mod@math double2fp@math double2fpstr@mathaddr intr0)
	(2 mod@math fp2double@math fp2doublestr@mathaddr intr0)
	(2 mod@math tandouble@math tandoublestr@mathaddr intr0)
(funcend)
// wrapper functions
(math_int2double func)
    (3 mod@math int2double@math 0 intr0)
(funcend)
(math_double2int func)
    (3 mod@math double2int@math 0 intr0)
(funcend)
(math_sqrtdouble func)
    (3 mod@math sqrtdouble@math 0 intr0)
(funcend)
(math_logdouble func)
    (3 mod@math logdouble@math 0 intr0)
(funcend)
(math_log2double func)
    (3 mod@math log2double@math 0 intr0)
(funcend)
(math_randinit func)
    (3 mod@math randinit@math 0 intr0)
(funcend)
(math_randint func)
    (3 mod@math randint@math 0 intr0)
(funcend)
(math_randdouble func)
    (3 mod@math randdouble@math 0 intr0)
(funcend)
(math_randintmax func)
    (3 mod@math randintmax@math 0 intr0)
(funcend)
(string_to_int func)
	(3 mod@math stringtoint@math 0 intr0)
(funcend)
(string_to_double func)
	(3 mod@math stringtodouble@math 0 intr0)
(funcend)
(math_not func)
// get int64 number argument from stack
// and push the not number to the stack
	(ASM)
	stpopi 1
	noti 1, 2
	stpushi 2
	rts
	(ASM_END)
(funcend)
(math_acosdouble func)
	(3 mod@math acosdouble@math 0 intr0)
(funcend)
(math_asindouble func)
	(3 mod@math asindouble@math 0 intr0)
(funcend)
(math_atandouble func)
	(3 mod@math atandouble@math 0 intr0)
(funcend)
(math_atan2double func)
	(3 mod@math atan2double@math 0 intr0)
(funcend)
(math_cosdouble func)
	(3 mod@math cosdouble@math 0 intr0)
(funcend)
(math_coshdouble func)
	(3 mod@math coshdouble@math 0 intr0)
(funcend)
(math_sindouble func)
	(3 mod@math sindouble@math 0 intr0)
(funcend)
(math_sinhdouble func)
	(3 mod@math sinhdouble@math 0 intr0)
(funcend)
(math_tandouble func)
	(3 mod@math tandouble@math 0 intr0)
(funcend)
(math_tanhdouble func)
	(3 mod@math tanhdouble@math 0 intr0)
(funcend)
(math_expdouble func)
	(3 mod@math expdouble@math 0 intr0)
(funcend)
(math_log10double func)
	(3 mod@math log10double@math 0 intr0)
(funcend)
(math_modfdouble func)
	(3 mod@math modfdouble@math 0 intr0)
(funcend)
(math_powdouble func)
	(3 mod@math powdouble@math 0 intr0)
(funcend)
(math_ceildouble func)
	(3 mod@math ceildouble@math 0 intr0)
(funcend)
(math_fabsdouble func)
	(3 mod@math fabsdouble@math 0 intr0)
(funcend)
(math_floordouble func)
	(3 mod@math floordouble@math 0 intr0)
(funcend)
(math_fmoddouble func)
	(3 mod@math fmoddouble@math 0 intr0)
(funcend)
(math_adddouble func)
	(3 mod@math adddouble@math 0 intr0)
(funcend)
(math_subdouble func)
	(3 mod@math subdouble@math 0 intr0)
(funcend)
(math_muldouble func)
	(3 mod@math muldouble@math 0 intr0)
(funcend)
(math_divdouble func)
	(3 mod@math divdouble@math 0 intr0)
(funcend)
(math_double2fp func)
	(3 mod@math double2fp@math 0 intr0)
(funcend)
(math_fp2double func)
	(3 mod@math fp2double@math 0 intr0)
(funcend)
