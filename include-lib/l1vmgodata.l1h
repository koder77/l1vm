// l1vmgodata library
//
//  return strings must be of size 4097!!
//
(go_data_store func)
    #var ~ go_data_store
    (set int64 1 shandle~ 0)
    (set int64 1 Pkeystraddr~)
    (set int64 1 Pdatastraddr~)
    (set int64 1 Pretstraddr~)
    (set string s commstr~ "store data ")
    (set string s colonstr~ ":")
    (set string 2 quotestr~ "'")
    (set string s spacestr~ " ")
    (set int64 1 twolen~ 2)
    (set string 4097 commandstr~ "")
    (set int64 1 retlen~ 4096)
    (set int64 1 ret~ 0)
    (set int64 1 zero~ 0)
    (set int64 1 one~ 1)
    (set int64 1 f~ 0)
    (set string s errorstr~ "go_data_store: socket error!")
    // get args
    (Pretstraddr~ stpopi)
    (Pdatastraddr~ stpopi)
    (Pkeystraddr~ stpopi)
    (shandle~ stpopi)
    // build command line 
    (commandstr~ commstr~ :string_copy !)
    (commandstr~ colonstr~ :string_cat !)
    (commandstr~ Pkeystraddr~ :string_cat !)
    (commandstr~ spacestr~ :string_cat !)
    (commandstr~ quotestr~ :string_cat !)
    (commandstr~ Pdatastraddr~ :string_cat !)
    (commandstr~ quotestr~ :string_cat !)

    // send command
    (shandle~ commandstr~ :socket_write_string !)
    (ret~ stpopi)
    (((ret~ zero~ !=) f~ =) f~ if)
        print_s (errorstr~)
        print_n
        (one~ stpushi)
        (ASM)
        rts
        (ASM_END)
    (endif)
    // get answer 
    (shandle~ Pretstraddr~ retlen~ :socket_read_string !)
    // leave return value on stack!!!
(funcend)
(go_data_get_key func)
    #var ~ go_data_get_key
    (set int64 1 shandle~ 0)
    (set int64 1 Pkeystraddr~)
    (set int64 1 Pdatastraddr~)
    (set string s commstr~ "get key ")
    (set string s colonstr~ ":")
    (set string s spacesstr~ " ")
    (set string 4097 commandstr~ "")
    (set int64 1 retlen~ 4096)
    (set int64 1 ret~ 0)
    (set int64 1 zero~ 0)
    (set int64 1 one~ 1)
    (set int64 1 f~ 0)
    (set string s errorstr~ "go_data_get_key: socket error!")
    // get args
    (Pdatastraddr~ stpopi)
    (Pkeystraddr~ stpopi)
    (shandle~ stpopi)
    // build command line
    (commandstr~ commstr~ :string_copy !)
    (commandstr~ colonstr~ :string_cat !)
    (commandstr~ Pkeystraddr~ :string_cat !)
    // send command
    (shandle~ commandstr~ :socket_write_string !)
    (ret~ stpopi)
    (((ret~ zero~ !=) f~ =) f~ if)
        print_s (errorstr~)
        print_n
        (one~ stpushi)
        (ASM)
        rts
        (ASM_END)
    (endif)
    // get answer 
    (shandle~ Pdatastraddr~ retlen~ :socket_read_string !)
    // leave return value on stack!!!
(funcend)
(go_data_get_value func)
    #var ~ go_data_get_value
    (set int64 1 shandle~ 0)
    (set int64 1 Pkeystraddr~)
    (set int64 1 Pdatastraddr~)
    (set string s commstr~ "get value ")
    (set string s colonstr~ ":")
    (set string s quotestr~ "'")
    (set string s spacesstr~ " ")
    (set string 4097 commandstr~ "")
    (set string 4096 bufstr~ "")
    (set int64 1 buflen~ 4095)
    (set int64 1 quotech~ 34)
    (set int64 1 twolen~ 2)
    (set int64 1 retlen~ 4096)
    (set int64 1 ret~ 0)
    (set int64 1 zero~ 0)
    (set int64 1 one~ 1)
    (set int64 1 f~ 0)
    (set string s errorstr~ "go_data_get_value: socket error!")
    // get args
    (Pdatastraddr~ stpopi)
    (Pkeystraddr~ stpopi)
    (shandle~ stpopi)
    // build command line
    (commandstr~ commstr~ :string_copy !)
    (commandstr~ quotestr~ :string_cat !)
    (commandstr~ Pdatastraddr~ :string_cat !)
    (commandstr~ quotestr~ :string_cat !)
    (shandle~ commandstr~ :socket_write_string !)
    (ret~ stpopi)
    (((ret~ zero~ !=) f~ =) f~ if)
        print_s (errorstr~)
        print_n
        (one~ stpushi)
        (ASM)
        rts
        (ASM_END)
    (endif)
    // get answer 
    (shandle~ Pkeystraddr~ retlen~ :socket_read_string !)
    // leave return value on stack!!!
(funcend)
(go_data_remove func)
    #var ~ go_data_remove
    (set int64 1 shandle~ 0)
    (set int64 1 Pkeystraddr~)
    (set int64 1 Pdatastraddr~)
    (set string s commstr~ "remove ")
    (set string s colonstr~ ":")
    (set string s spacesstr~ " ")
    (set string 4097 commandstr~ "")
    (set int64 1 retlen~ 4096)
    (set int64 1 ret~ 0)
    (set int64 1 zero~ 0)
    (set int64 1 one~ 1)
    (set int64 1 f~ 0)
    (set string s errorstr~ "go_data_remove socket error!")
    // get args
    (Pdatastraddr~ stpopi)
    (Pkeystraddr~ stpopi)
    (shandle~ stpopi)
    // build command line
    (commandstr~ commstr~ :string_copy !)
    (commandstr~ colonstr~ :string_cat !)
    (commandstr~ Pkeystraddr~ :string_cat !)
    // send command
    (shandle~ commandstr~ :socket_write_string !)
    (ret~ stpopi)
    (((ret~ zero~ !=) f~ =) f~ if)
        print_s (errorstr~)
        print_n
        (one~ stpushi)
        (ASM)
        rts
        (ASM_END)
    (endif)
    // get answer
    (shandle~ Pdatastraddr~ retlen~ :socket_read_string !)
    // leave return value on stack!!!
(funcend)
(go_data_close func)
    #var ~ go_data_close
    (set string s commandstr~ "close")
    (set int64 1 shandle~ 0)
    (set string 256 retstr~ "")
    (set int64 1 retstrlen~ 255)
    (set int64 1 retlen~ 4096)
    (set int64 1 ret~ 0)
    (set int64 1 zero~ 0)
    (set int64 1 one~ 1)
    (set int64 1 f~ 0)
    (set string s errorstr~ "go_data_close socket error!")
    (shandle~ stpopi)
    (shandle~ commandstr~ :socket_write_string !)
    (ret~ stpopi)
    (((ret~ zero~ !=) f~ =) f~ if)
        print_s (errorstr~)
        print_n
        (one~ stpushi)
        (ASM)
        rts
        (ASM_END)
    (endif)
    // get answer
    (shandle~ retstr~ retlen~ :socket_read_string !)
    // leave return value on stack!!!
(funcend)

// load/save in l1vmgodata native file format. saves with all links too! =======
(go_data_save func)
    #var ~ go_data_save
    (set int64 1 shandle~ 0)
    (set int64 1 Pnamestraddr~)
    (set string s quotestr~ "'")
    (set string s commstr~ "save :save ")
    (set int64 1 Pretstraddr~ 0)
    (set string 4097 commandstr~ "")
    (set int64 1 retlen~ 4096)
    (set int64 1 twolen~ 2)
    (set int64 1 ret~ 0)
    (set int64 1 zero~ 0)
    (set int64 1 one~ 1)
    (set int64 1 f~ 0)
    (set string s errorstr~ "go_data_save socket error!")
    // get args
    (Pretstraddr~ stpopi)
    (Pnamestraddr~ stpopi)
    (shandle~ stpopi)
    // build command line
    (commandstr~ commstr~ :string_copy !)
    (commandstr~ quotestr~ :string_cat !)
    (commandstr~ Pnamestraddr~ :string_cat !)
    (commandstr~ quotestr~ :string_cat !)
    // send command
    (shandle~ commandstr~ :socket_write_string !)
    (ret~ stpopi)
    (((ret~ zero~ !=) f~ =) f~ if)
        print_s (errorstr~)
        print_n
        (one~ stpushi)
        (ASM)
        rts
        (ASM_END)
    (endif)
    // get answer
    (shandle~ Pretstraddr~ retlen~ :socket_read_string !)
    // leave return value on stack!!!
(funcend)
(go_data_load func)
    #var ~ go_data_load
    (set int64 1 shandle~ 0)
    (set int64 1 Pnamestraddr~)
    (set string s quotestr~ "'")
    (set string s commstr~ "load :load ")
    (set int64 1 Pretstraddr~ 0)
    (set string 4097 commandstr~ "")
    (set int64 1 retlen~ 4096)
    (set int64 1 twolen~ 2)
    (set int64 1 ret~ 0)
    (set int64 1 zero~ 0)
    (set int64 1 one~ 1)
    (set int64 1 f~ 0)
    (set string s errorstr~ "go_data_load socket error!")
    // get args
    (Pretstraddr~ stpopi)
    (Pnamestraddr~ stpopi)
    (shandle~ stpopi)
    // build command line
    (commandstr~ commstr~ :string_copy !)
    (commandstr~ quotestr~ :string_cat !)
    (commandstr~ Pnamestraddr~ :string_cat !)
    (commandstr~ quotestr~ :string_cat !)
    // send command
    (shandle~ commandstr~ :socket_write_string !)
    (ret~ stpopi)
    (((ret~ zero~ !=) f~ =) f~ if)
        print_s (errorstr~)
        print_n
        (one~ stpushi)
        (ASM)
        rts
        (ASM_END)
    (endif)
    // get answer
    (shandle~ Pretstraddr~ retlen~ :socket_read_string !)
    // leave return value on stack!!!
(funcend)


// load/save CSV table data ====================================================
(go_data_save_csv_table func)
    #var ~ go_data_save_csv_table
    (set int64 1 shandle~ 0)
    (set int64 1 Pnamestraddr~)
    (set string s quotestr~ "'")
    (set string s commstr~ "csv-table-export ")
    (set int64 1 Pretstraddr~ 0)
    (set string 4097 commandstr~ "")
    (set int64 1 retlen~ 4096)
    (set int64 1 twolen~ 2)
    (set int64 1 ret~ 0)
    (set int64 1 zero~ 0)
    (set int64 1 one~ 1)
    (set int64 1 f~ 0)
    (set string s errorstr~ "go_data_save_csv_table socket error!")
    // get args
    (Pretstraddr~ stpopi)
    (Pnamestraddr~ stpopi)
    (shandle~ stpopi)
    // build command line
    (commandstr~ commstr~ :string_copy !)
    (commandstr~ quotestr~ :string_cat !)
    (commandstr~ Pnamestraddr~ :string_cat !)
    (commandstr~ quotestr~ :string_cat !)
    // send command
    (shandle~ commandstr~ :socket_write_string !)
    (ret~ stpopi)
    (((ret~ zero~ !=) f~ =) f~ if)
        print_s (errorstr~)
        print_n
        (one~ stpushi)
        (ASM)
        rts
        (ASM_END)
    (endif)
    // get answer
    (shandle~ Pretstraddr~ retlen~ :socket_read_string !)
    // leave return value on stack!!!
(funcend)
(go_data_load_csv_table func)
    #var ~ go_data_load_csv_table
    (set int64 1 shandle~ 0)
    (set int64 1 Pnamestraddr~)
    (set string s quotestr~ "'")
    (set string s commstr~ "csv-table-import ")
    (set int64 1 Pretstraddr~ 0)
    (set string 4097 commandstr~ "")
    (set int64 1 retlen~ 4096)
    (set int64 1 twolen~ 2)
    (set int64 1 ret~ 0)
    (set int64 1 zero~ 0)
    (set int64 1 one~ 1)
    (set int64 1 f~ 0)
    (set string s errorstr~ "go_data_load_csv_table socket error!")
    // get args
    (Pretstraddr~ stpopi)
    (Pnamestraddr~ stpopi)
    (shandle~ stpopi)
    // build command line
    (commandstr~ commstr~ :string_copy !)
    (commandstr~ quotestr~ :string_cat !)
    (commandstr~ Pnamestraddr~ :string_cat !)
    (commandstr~ quotestr~ :string_cat !)
    // send command
    (shandle~ commandstr~ :socket_write_string !)
    (ret~ stpopi)
    (((ret~ zero~ !=) f~ =) f~ if)
        print_s (errorstr~)
        print_n
        (one~ stpushi)
        (ASM)
        rts
        (ASM_END)
    (endif)
    // get answer
    (shandle~ Pretstraddr~ retlen~ :socket_read_string !)
    // leave return value on stack!!!
(funcend)


(go_data_usage func)
    #var ~ go_data_usage
    (set int64 1 shandle~ 0)
    (set string s usagestr~ "usage")
    (set string s errorstr~ "go_data_usage socket error!")
    (set int64 1 Pusagestraddr~)
    (set int64 1 ret~ 0)
    (set int64 1 zero~ 0)
    (set int64 1 one~ 1)
    (set int64 1 f~ 0)
    (set int64 1 retlen~ 4096)
    (Pusagestraddr~ stpopi)
    (shandle~ stpopi)
    // send usage command
    (shandle~ usagestr~ :socket_write_string !)
    (ret~ stpopi)
    (((ret~ zero~ !=) f~ =) f~ if)
        print_s (errorstr~)
        print_n
        (one~ stpushi)
        (ASM)
        rts
        (ASM_END)
    (endif)
    // get answer
    (shandle~ Pusagestraddr~ retlen~ :socket_read_string !)
    // leave return value on stack!!!
(funcend)

// link functions ==============================================================
(go_data_set_link func)
    #var ~ go_data_set_link
    (set int64 1 shandle~ 0)
    (set int64 1 Pkeystraddr~)
    (set int64 1 Pdatastraddr~)
    (set int64 1 Pretstraddr~)
    (set string s commstr~ "set-link ")
    (set string s colonstr~ ":")
    (set string 2 quotestr~ "'")
    (set string s spacestr~ " ")
    (set int64 1 twolen~ 2)
    (set string 4097 commandstr~ "")
    (set int64 1 retlen~ 4096)
    (set int64 1 ret~ 0)
    (set int64 1 zero~ 0)
    (set int64 1 one~ 1)
    (set int64 1 f~ 0)
    (set string s errorstr~ "go_data_set_link: socket error!")
    // get args
    (Pretstraddr~ stpopi)
    (Pdatastraddr~ stpopi)
    (Pkeystraddr~ stpopi)
    (shandle~ stpopi)
    // build command line
    (commandstr~ commstr~ :string_copy !)
    (commandstr~ colonstr~ :string_cat !)
    (commandstr~ Pkeystraddr~ :string_cat !)
    (commandstr~ spacestr~ :string_cat !)
    (commandstr~ quotestr~ :string_cat !)
    (commandstr~ Pdatastraddr~ :string_cat !)
    (commandstr~ quotestr~ :string_cat !)

    // send command
    (shandle~ commandstr~ :socket_write_string !)
    (ret~ stpopi)
    (((ret~ zero~ !=) f~ =) f~ if)
        print_s (errorstr~)
        print_n
        (one~ stpushi)
        (ASM)
        rts
        (ASM_END)
    (endif)
    // get answer
    (shandle~ Pretstraddr~ retlen~ :socket_read_string !)
    // leave return value on stack!!!
(funcend)
(go_data_remove_link func)
    #var ~ go_data_remove_link
    (set int64 1 shandle~ 0)
    (set int64 1 Pkeystraddr~)
    (set int64 1 Pdatastraddr~)
    (set int64 1 Pretstraddr~)
    (set string s commstr~ "remove-link ")
    (set string s colonstr~ ":")
    (set string 2 quotestr~ "'")
    (set string s spacestr~ " ")
    (set int64 1 twolen~ 2)
    (set string 4097 commandstr~ "")
    (set int64 1 retlen~ 4096)
    (set int64 1 ret~ 0)
    (set int64 1 zero~ 0)
    (set int64 1 one~ 1)
    (set int64 1 f~ 0)
    (set string s errorstr~ "go_data_remove_link: socket error!")
    // get args
    (Pretstraddr~ stpopi)
    (Pdatastraddr~ stpopi)
    (Pkeystraddr~ stpopi)
    (shandle~ stpopi)
    // build command line
    (commandstr~ commstr~ :string_copy !)
    (commandstr~ colonstr~ :string_cat !)
    (commandstr~ Pkeystraddr~ :string_cat !)
    (commandstr~ spacestr~ :string_cat !)
    (commandstr~ quotestr~ :string_cat !)
    (commandstr~ Pdatastraddr~ :string_cat !)
    (commandstr~ quotestr~ :string_cat !)

    // send command
    (shandle~ commandstr~ :socket_write_string !)
    (ret~ stpopi)
    (((ret~ zero~ !=) f~ =) f~ if)
        print_s (errorstr~)
        print_n
        (one~ stpushi)
        (ASM)
        rts
        (ASM_END)
    (endif)
    // get answer
    (shandle~ Pretstraddr~ retlen~ :socket_read_string !)
    // leave return value on stack!!!
(funcend)
(go_data_get_linknum func)
    #var ~ go_data_get_linknum
    (set int64 1 shandle~ 0)
    (set int64 1 Pkeystraddr~)
    (set int64 1 Pdatastraddr~)
    (set int64 1 Pretstraddr~)
    (set string s commstr~ "get-links-number ")
    (set string s colonstr~ ":")
    (set string 2 quotestr~ "'")
    (set string s spacestr~ " ")
    (set int64 1 twolen~ 2)
    (set string 4097 commandstr~ "")
    (set int64 1 retlen~ 4096)
    (set int64 1 ret~ 0)
    (set int64 1 zero~ 0)
    (set int64 1 one~ 1)
    (set int64 1 f~ 0)
    (set string s errorstr~ "go_data_get_linknum: socket error!")
    // get args
    (Pretstraddr~ stpopi)
    (Pkeystraddr~ stpopi)
    (shandle~ stpopi)
    // build command line
    (commandstr~ commstr~ :string_copy !)
    (commandstr~ colonstr~ :string_cat !)
    (commandstr~ Pkeystraddr~ :string_cat !)
    (commandstr~ spacestr~ :string_cat !)
    (commandstr~ quotestr~ :string_cat !)
    (commandstr~ Pdatastraddr~ :string_cat !)
    (commandstr~ quotestr~ :string_cat !)

    // send command
    (shandle~ commandstr~ :socket_write_string !)
    (ret~ stpopi)
    (((ret~ zero~ !=) f~ =) f~ if)
        print_s (errorstr~)
        print_n
        (one~ stpushi)
        (ASM)
        rts
        (ASM_END)
    (endif)
    // get answer
    (shandle~ Pretstraddr~ retlen~ :socket_read_string !)
    // leave return value on stack!!!
(funcend)
(go_data_get_link_name func)
    #var ~ go_data_get_link_name
    (set int64 1 shandle~ 0)
    (set int64 1 Pkeystraddr~)
    (set int64 1 Pdatastraddr~)
    (set int64 1 Pretstraddr~)
    (set string s commstr~ "get-link-name ")
    (set string s colonstr~ ":")
    (set string 2 quotestr~ "'")
    (set string s spacestr~ " ")
    (set int64 1 twolen~ 2)
    (set string 4097 commandstr~ "")
    (set int64 1 retlen~ 4096)
    (set int64 1 ret~ 0)
    (set int64 1 zero~ 0)
    (set int64 1 one~ 1)
    (set int64 1 f~ 0)
    (set string s errorstr~ "go_data_get_link_name: socket error!")
    // get args
    (Pretstraddr~ stpopi)
    (Pdatastraddr~ stpopi)
    (Pkeystraddr~ stpopi)
    (shandle~ stpopi)
    // build command line
    (commandstr~ commstr~ :string_copy !)
    (commandstr~ colonstr~ :string_cat !)
    (commandstr~ Pkeystraddr~ :string_cat !)
    (commandstr~ spacestr~ :string_cat !)
    (commandstr~ quotestr~ :string_cat !)
    (commandstr~ Pdatastraddr~ :string_cat !)
    (commandstr~ quotestr~ :string_cat !)

    // send command
    (shandle~ commandstr~ :socket_write_string !)
    (ret~ stpopi)
    (((ret~ zero~ !=) f~ =) f~ if)
        print_s (errorstr~)
        print_n
        (one~ stpushi)
        (ASM)
        rts
        (ASM_END)
    (endif)
    // get answer
    (shandle~ Pretstraddr~ retlen~ :socket_read_string !)
    // leave return value on stack!!!
(funcend)
