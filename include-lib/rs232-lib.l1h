// RS232 library
//
//
(rs232_init func)
	(set string s modulestr@rs232 "libl1vmrs232")
	(set string s open_comportstr@rs232 "rs232_OpenComport")
	(set string s poll_comportstr@rs232 "rs232_PollComport")
	(set string s send_bytestr@rs232 "rs232_SendByte")
	(set string s send_bufstr@rs232 "rs232_SendBuf")
	(set string s close_comportstr@rs232 "rs232_CloseComport")
	(set int64 1 open_comport@rs232 0)
	(set int64 1 poll_comport@rs232 1)
	(set int64 1 send_byte@rs232 2)
	(set int64 1 send_buf@rs232 3)
	(set int64 1 close_comport@rs232 4)
	(set int64 1 mod@rs232 0)
	// get arguments from stack
	(mod@rs232 stpopi)
	// load gpio module
    (0 modulestr@rs232addr mod@rs232 0 intr0)
    // set functions
    (2 mod@rs232 open_comport@rs232 open_comportstr@rs232addr intr0)
	(2 mod@rs232 poll_comport@rs232 poll_comportstr@rs232addr intr0)
	(2 mod@rs232 send_byte@rs232 send_bytestr@rs232addr intr0)
	(2 mod@rs232 send_buf@rs232 send_bufstr@rs232addr intr0)
	(2 mod@rs232 close_comport@rs232 close_comportstr@rs232addr intr0)
(funcend)
(rs232_open_comport func)
	(3 mod@rs232 open_comport@rs232 0 intr0)
(funcend)
(rs232_poll_comport func)
	(3 mod@rs232 poll_comport@rs232 0 intr0)
(funcend)
(rs232_send_byte func)
	(3 mod@rs232 send_byte@rs232 0 intr0)
(funcend)
(rs232_send_buf func)
	(3 mod@rs232 send_buf@rs232 0 intr0)
(funcend)
(rs232_close_comport func)
	(3 mod@rs232 close_comport@rs232 0 intr0)
(funcend)
