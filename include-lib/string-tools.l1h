// string-tools.l1h
//
//
(string_split_to_array func)
    // split a input string into parts separated by separatorstr~ char
    #var ~ string_split_to_array
    (set const-int64 1 zero~ 0)
    (set const-int64 1 one~ 1)
    (set int64 1 inputstraddr~ 0)
    (set int64 1 arraystraddr~ 0)
    (set int64 1 array_strlen~ 0)
    (set int64 1 array_size~ 0)
	(set int64 1 separatorstr~ 0)
	(set int64 1 f~ 0)
	(set string 2 chstr~ "")
    (set int64 1 inputstr_len~ 0)
	(set int64 1 inputstr_ind~ 0)
    (set int64 1 array_ind~ 0)
	(set int64 1 pos~ 0)
	(set string 4097 partstr~ "")
    (set string s emptystr~ "")
    (set int64 1 ret~ 0)
    (set int64 1 numbers~ 0)
    (separatorstr~ array_size~ array_strlen~ arraystraddr~ inputstraddr~ stpop)
	(zero~ inputstr_ind~ =)
    (zero~ pos~ =)
    (zero~ array_ind~ =)
    (zero~ numbers~ =)
    // add separator to string end
    (inputstraddr~ separatorstr~ :string_cat !)
	(inputstraddr~ :string_len !)
    (inputstr_len~ stpop)
	(partstr~ emptystr~ :string_copy !)
	(((inputstr_len~ zero~ ==) f~ =) f~ if)
        (:string_split_to_array_end jmp)
	(endif)
	(do)
		(inputstraddr~ chstr~ inputstr_ind~ :string_mid !)
		// check if chstr~ partstring is not separator
        (chstr~ separatorstr~ :string_compare !)
        (ret~ stpop)
        (((ret~ zero~ !=) f~ =) f~ if+)
            (partstr~ chstr~ :string_cat !)
        (else)
            // found string separator save partstr~ in string array
            (partstr~ arraystraddr~ array_ind~ array_strlen~ array_size~ :string_to_array !)
            ((array_ind~ one~ +) array_ind~ =)
            // clear partstr~
            (partstr~ emptystr~ :string_copy !)
            ((numbers~ one~ +) numbers~ =)
        (endif)
        ((inputstr_ind~ one~ +) inputstr_ind~ =)
    (((inputstr_ind~ inputstr_len~ <) f~ =) f~ while)
	(:string_split_to_array_end)
    (numbers~ stpush)
(funcend)

(string_replace func)
    // replace every found string part by replace string
    #var ~ string_replace
    (set const-int64 1 zero~ 0)
    (set const-int64 1 one~ 1)
    (set int64 1 stringaddr~ 0)
    (set int64 1 stringsearchaddr~ 0)
    (set int64 1 stringreplaceaddr~ 0)
    (set int64 1 stringretaddr~ 0)
    (set int64 1 f~ 0)
    (set int64 1 pos~ 0)
    (set int64 1 i~ 0)
    (set string 4097 bufstr~ "")
    (set string 4097 repstr~ "")
    (set string 4097 rightstr~ "")
    (set string 2 emptystr~ "")
    (set string 2 chstr~ "")
    (set int64 1 string_len~ 0)
    (set int64 1 stringsearch_len~ 0)
    (set int64 1 left_string~ 0)
    (set int64 1 right_string~ 0)
    (stringretaddr~ stringreplaceaddr~ stringsearchaddr~ stringaddr~ stpop)
    (bufstr~ stringaddr~ :string_copy !)
    (repstr~ emptystr~ :string_copy !)
    (stringaddr~ :string_len !)
    (string_len~ stpop)
    (stringsearchaddr~ :string_len !)
    (stringsearch_len~ stpop)
    (do)
        (repstr~ emptystr~ :string_copy !)
        (bufstr~ :string_len !)
        (string_len~ stpop)

        (bufstr~ stringsearchaddr~ :string_search !)
        (pos~ stpop)
        (((pos~ zero~ >=) f~ =) f~ if)
            // found search string in string, replace
            (((pos~ zero~ !=) f~ =) f~ if)
                // leading chars before replace string, copy
                (pos~ left_string~ =)
                (bufstr~ repstr~ left_string~ :string_left !)
            (endif)
            (repstr~ stringreplaceaddr~ :string_cat !)
            (((pos~ string_len~ <) f~ =) f~ if)
                // copy chars after replace string
                ((pos~ stringsearch_len~ +) i~ =)
                ((string_len~ i~ -) right_string~ =)
                (bufstr~ rightstr~ right_string~ :string_right !)
                (repstr~ rightstr~ :string_cat !)
            (endif)
            // copy repstr~ to bufstr~ for next loop
            (bufstr~ repstr~ :string_copy !)
        (endif)
    (((pos~ zero~ >=) f~ =) f~ while)
    // copy bufstr~ to stringretaddr~
    (stringretaddr~ bufstr~ :string_copy !)
(funcend)

(string_return_slash func)
    // return a slash / in a string
    #var ~ string_return_slash
    (set const-int64 1 zero~ 0)
    (set const-int64 1 one~ 1)
    (set int64 1 stringretaddr~ 0)
    (set const-int64 1 slash_code 47)
    (stringretaddr~ stpop)
