// string-tools.l1h
//
//
(string_split_to_array func)
    // split a input string into parts separated by separatorstr~ char
    #var ~ string_split_to_array
    (set const-int64 1 zero~ 0)
    (set const-int64 1 one~ 1)
    (set int64 1 inputstraddr~ 0)
    (set int64 1 arraystraddr~ 0)
    (set int64 1 array_strlen~ 0)
    (set int64 1 array_size~ 0)
	(set int64 1 separatorstr~ 0)
	(set int64 1 f~ 0)
	(set string 2 chstr~ "")
    (set int64 1 inputstr_len~ 0)
	(set int64 1 inputstr_ind~ 0)
    (set int64 1 array_ind~ 0)
	(set int64 1 pos~ 0)
	(set string 4097 partstr~ "")
    (set string s emptystr~ "")
    (set int64 1 ret~ 0)
    (set int64 1 numbers~ 0)
    (separatorstr~ array_size~ array_strlen~ arraystraddr~ inputstraddr~ stpop)
	(zero~ inputstr_ind~ =)
    (zero~ pos~ =)
    (zero~ array_ind~ =)
    (zero~ numbers~ =)
    // add separator to string end
    (inputstraddr~ separatorstr~ :string_cat !)
	(inputstraddr~ :string_len !)
    (inputstr_len~ stpop)
	(partstr~ emptystr~ :string_copy !)
	(((inputstr_len~ zero~ ==) f~ =) f~ if)
        (:string_split_to_array_end jmp)
	(endif)
	(do)
		(inputstraddr~ chstr~ inputstr_ind~ :string_mid !)
		// check if chstr~ partstring is not separator
        (chstr~ separatorstr~ :string_compare !)
        (ret~ stpop)
        (((ret~ zero~ !=) f~ =) f~ if+)
            (partstr~ chstr~ :string_cat !)
        (else)
            // found string separator save partstr~ in string array
            (partstr~ arraystraddr~ array_ind~ array_strlen~ array_size~ :string_to_array !)
            ((array_ind~ one~ +) array_ind~ =)
            // clear partstr~
            (partstr~ emptystr~ :string_copy !)
            ((numbers~ one~ +) numbers~ =)
        (endif)
        ((inputstr_ind~ one~ +) inputstr_ind~ =)
    (((inputstr_ind~ inputstr_len~ <) f~ =) f~ while)
	(:string_split_to_array_end)
    (numbers~ stpush)
(funcend)
