// messages-lib.l1h - message send/receive library
//
//
// needs: #include <mem-lib-vect.l1h>
//
(msg_init func)
	#var ~ @msg
	(set const-int64 1 zero~ 0)
	(set const-int64 1 one~ 1)
	(set const-int64 1 err~ -1)
	(set int64 1 msgs_addr~)
	(set string s alloc_errorstr "ERROR: msg_init: can't allocate memory!")
	(set int64 1 ret~ 0)
	(set int64 1 f~ 0)
	// allocate message space
	(:alloc_int64_vect !)
	(msgs_addr~ stpopi)
	(((msgs_addr~ zero <) f~ =) f~ if)
		// ERROR can't allocate memory
		print_s (alloc_errorstr)
		print_n
		// set error code 1
		(err~ ret~ =)
	(else)
		(msgs_addr~ ret~ =)
	(endif)
	(ret~ stpushi)
(funcend)
(msg_put_message func)
	#var ~ @msg_put_message
	(set const-int64 1 zero~ 0)
	(set const-int64 1 one~ 1)
	(set int64 1 msgs_addr~)
	(set int64 1 msg_send~ 0)
	(msg_send~ stpopi)
	(msgs_addr~ stpopi)
	// thread mutex lock
	threadlock
	(msgs_addr~ msg_send~ :int_to_vect !)
	threadunlock
(funcend)
(msg_poll_message func)
	// check if there is a message in the list
	#var ~ @msg_poll_message
	(set const-int64 1 zero~ 0)
	(set const-int64 1 one~ 1)
	(set int64 1 ind~)
	(set int64 1 f~ 0)
	(set int64 1 msg_addr~)
	(set int64 1 msg_search~ 0)
	(set int64 1 msg~ 0)
	(set int64 1 ret~ 0)
	(set int64 1 msg_max~ 0)
	// get message to poll
	(msg_search~ stpopi)
	(msg_addr~ stpopi)
	(zero~ ind~ =)
	(one~ ret~ =)
	(msg_addr~ :get_vect_size !)
	(msg_max~ stpopi)
	// thread mutex lock
	threadlock
	(for-loop)
	(((ind~ msg_max~ <) f~ =) f~ for)
		(msg_addr~ ind~ :vect_to_int !)
		(msg~ stpopi)
		(((msg~ msg_search~ ==) f~ =) f~ if)
			// found message, remove it from messages
			(msg_addr~ ind~ :vect_erase !)
			(zero~ ret~ =)
			(ret~ stpushi)
			threadunlock
			(ASM)
			rts
			(ASM_END)
		(endif)
		((ind~ one~ +) ind~ =)
	(next)
	threadunlock
	(ret~ stpushi)
(funcend)
(msg_wait_message func)
	// wait for a message in the list
	// do a blocking call
	#var ~ @msg_wait_message
	(set const-int64 1 zero~ 0)
	(set const-int64 1 one~ 1)
	(set int64 1 ind~)
	(set int64 1 f~ 0)
	(set int64 1 msg_addr~)
	(set int64 1 msg_search~ 0)
	(set int64 1 msg~ 0)
	(set int64 1 ret~ 0)
	(set int64 1 msg_max~ 0)
	(set int64 1 time_ticks~ 500)
	// get message to poll
	(msg_search~ stpopi)
	(msg_addr~ stpopi)
	(zero~ ind~ =)
	(reset-reg)
	// thread mutex lock
	threadlock
	(:msg_wait_message_loop)
	(one~ ret~ =)
	(zero~ ind~ =)
	(msg_addr~ :get_vect_size !)
	(msg_max~ stpopi)
	(for-loop)
	(((ind~ msg_max~ <) f~ =) f~ for)
		(msg_addr~ ind~ :vect_to_int !)
		(msg~ stpopi)
		(((msg~ msg_search~ ==) f~ =) f~ if)
			// found message, remove it from messages
			(msg_addr~ ind~ :vect_erase !)
			(zero~ ret~ =)
			(ret~ stpushi)
			threadunlock
			(ASM)
			rts
			(ASM_END)
		(endif)
		((ind~ one~ +) ind~ =)
	(next)
	(((ret~ one~ ==) f~ =) f~ if)
		detime (time_ticks~)
		(:msg_wait_message_loop jmp)
	(endif)
	threadunlock
	(ret~ stpushi)
(funcend)
