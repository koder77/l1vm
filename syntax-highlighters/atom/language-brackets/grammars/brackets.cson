name: "Brackets"
scopeName: "source.brackets"
comment: '''

Syntax highlighting for L1COM compiler (Brackets) for L1VM
Used common.lisp highlighter as template: source.common.lisp.

by Stefan Pietzonke (jay-t@gmx.net)
'''

fileTypes: [
  'l1com'
  'l1asm'
  'l1h'
]

foldingStartMarker: '\\(\\s*$'
foldingStopMarker: '^\\s*\\)'

patterns: [
  {
    include: "#comment"
  }
  {
    include: "#quote"
  }
  {
    include: "#sexp"
  }
  {
    include: "#string"
  }
  {
    include: "#language-functions"
  }
  {
    include: "#constants"
  }
  {
    include: "#illegal"
  }
]


repository:
  comment:
    patterns: [
      {
        captures:
          "1":
            name: "punctuation.definition.comment.brackets"
        match: "(;).*$\\n?"
        name: "comment.line.semicolon.brackets"
      }
      {
        begin: "#\\|"
        captures:
          "0":
            name: "punctuation.definition.comment.brackets"
        end: "\\|#"
        name: "comment.multiline.brackets"
      }
    ]
  constants:
    patterns: [
      {
        match: '\\b(t|nil)(?=[\\s;()\'"\\]\\}])'
        name: "constant.language.boolean.brackets"
      }
      {
        match: "(?<!\\w)(:)([^\\s\\)]*)(?=[\\s\\)])"
        name: "constant.keyword.brackets"
      }
      # {
      #   match: {
      #     begin: '(#[cC]\\()'
      #     end: '(\\))(?=[\\s;()\'"\\]\\}])'
      #   }
      #   name: "constant.numeric.complex.brackets"
      # }
      {
        include: "#numeric"
      }
    ]
  numeric:
    patterns: [
      {
        match: '(?<![[:alnum:].])(-?\\d+/\\d+)\\b'
        name: 'constant.numeric.ratio.brackets'
      }
      {
        match: '(-?\\d*\\.\\d+([dDeEfFlLsS][+-]?\\d+)?)|(-?\\d+(\\.\\d*)?([dDeEfFlLsS][+-]?\\d+))'
        name: 'constant.numeric.float.brackets'
      }
      {
        match: '(#[xX]-?[0-9a-fA-F]+)(?=[\\s;()\'"\\]\\}])'
        name: 'constant.numeric.hexadecimal.brackets'
      }
      {
        match: '(#[oO]-?[0-7]+)(?=[\\s;()\'"\\]\\}])'
        name: 'constant.numeric.octal.brackets'
      }
      {
        match: '(#[bB]-?[01]+)(?=[\\s;()\'"\\]\\}])'
        name: 'constant.numeric.binary.brackets'
      }
      {
        match: '(#\\d+[rR]-?[0-9a-zA-Z]+)(?=[\\s;()\'"\\]\\}])'
        name: 'constant.numeric.arbitrary-radix.brackets'
      }
      {
        # match: '(?<![\\d.])(-?\\d+\\.?)(?=[\\s;()\'"\\]\\}])'
        match: '(?<![[:alnum:].])(-?\\d+\\.?)(?=[\\s;()\'"\\]\\}])'
        name: 'constant.numeric.integer.brackets'
      }
    ]
  # illegal:
  # match: '[()\\[\\]{}]'
  # name: 'invalid.illegal.parenthesis.brackets'
  # set this up...
  "language-functions":
    patterns: [

      # {
      #   comment: '''
      #
      #         These functions change one type into another.
      #
      #   '''
      #   match: '''
      #     (?xi)
      #         (?<=(\\s|\\()) # preceded by space or (
      #         ( char->integer|exact->inexact|inexact->exact|
      #           integer->char|symbol->string|list->vector|
      #           list->string|identifier->symbol|vector->list|
      #           string->list|string->number|string->symbol|
      #           number->string
      #         )
      #         (?=(\\s|\\()) # followed by space or (
      #
      #   '''
      #   name: "support.function.convert-type.brackets"
      # }
      {
        comment: '''

              These functions either generate, or effect bindings.
              Unfortunately the `pset(f|q)` functions and `defparameter` don't
              seem to highlight... which is weird!

        '''
      }
      {
        match: '''
          (?xi)
             # (?<=(\\s|\\()) # preceded by space or (
              ( const-byte|const-string|const-int16|const-int32|const-int64|const-double|
                byte|string|int16|int32|int64|double|
                funcend|func|ASM_END|ASM|optimize-if-off|optimize-if|no-var-pull-off|no-var-pull-on|reset-reg|pointer|
                set|stpushb|stpopb|stpushi|stpopi|stpushd|stpopd|stpush|stpop
                intr0|intr1|
                pushb|pushw|pushdw|pushqw|pushd|pullb|pullw|pulldw|pullqw|pulld|
                addi|subi|muli|divi|addd|subd|muld|divd|
                smuli|sdivi|
                andi|ori|bandi|bori|bxori|modi|
                eqi|neqi|gri|lsi|greqi|lseqi|
                eqd|neqd|grd|lsd|greqd|lseqd|
                loadreg|loada|loadd|inclsijmpi|decgrijmpi|movi|movd|loadl|jmpa|jsra|jsr|load|noti|
                if+|if|else|endif|jmpi|jmp|jsr|call|rts|
                for-loop|for|next|do|while|
                switch-end|switchend|switch|break|cast
              )
             # (?=(\\s|\\()) # followed by space or (
        '''
        name: "support.function.general.brackets"
      }
    ]
  # end of set it up...
  quote:
    patterns: [
      {
        comment: "Quoted symbol 'foo"
        captures:
          "1":
            name: "punctuation.section.quoted.symbol.brackets"
        match: "(')\\s*([0-9a-zA-Z!$%&*+-./:<=>?@^_~]+)"
        name: "constant.symbol.brackets"
      }
      {
        comment: "Empty list: '()"
        captures:
          "1":
            name: "punctuation.section.quoted.empty-list.brackets"
          "2":
            name: "meta.expression.brackets"
          "3":
            name: "punctuation.section.expression.begin.brackets"
          "4":
            name: "punctuation.section.expression.end.brackets"
        match: "(')\\s*((\\()\\s*(\\)))"
        name: "constant.other.empty-list.brackets"
      }
      {
        coment: "This is for quoted lists: '(foo bar baz)"
        begin: "('\\()"
        beginCaptures:
          "1":
            name: "punctuation.section.quoted.brackets"
        end: "(\\))(\\n)?"
        name: "constant.other.quoted-object.brackets"
        patterns: [
          {
            include: "#quoted"
          }
        ]
      }
    ]
  "quote-sexp":
    begin: "(?<=\\()\\s*(quote)\\b\\s*"
    beginCaptures:
      "1":
        name: "keyword.control.quote.brackets"
    contentName: "constant.other.quote.brackets"
    end: "(?=[)])"
    patterns: [
      {
        include: "#quoted"
      }
    ]
  quoted:
    patterns: [
      {
        include: "#comment"
      }
      {
        include: "#string"
      }
      {
        include: "#constants"
      }
      {
        begin: "(\\()"
        beginCaptures:
          "1":
            name: "punctuation.section.expression.begin.brackets"
        end: "(\\))"
        endCaptures:
          "1":
            name: "punctuation.section.expression.end.brackets"
        name: "meta.expression.quoted.brackets"
        patterns: [
          {
            include: "#quoted"
          }
        ]
      }
      {
        include: "#quote"
      }
      {
        include: "#illegal"
      }
    ]
  sexp:
    # Make a `lambda-list` matcher
    begin: "(\\()"
    beginCaptures:
      "1":
        name: "punctuation.section.expression.begin.brackets"
    end: "(\\))(\\n)?"
    endCaptures:
      "1":
        name: "punctuation.section.expression.end.brackets"
      "2":
        name: "meta.after-expression.brackets" # maybe not needed?
    name: "meta.expression.brackets"
    patterns: [
      {
        include: "#comment"
      }
      {
        include: "#quote-sexp"
      }
      {
        include: "#quote"
      }
      {
        include: "#comment"
      }
      {
        include: "#language-functions"
      }
      {
        include: "#string"
      }
      {
        include: "#constants"
      }
      {
        begin: '''(?xi)
          (?<=\\()
          (lambda)\\s+
            (\\(\\s*
              ((
                [^()]+[\\n\\s]*|
                \\([^()\\s]+\\s+[^()\\s]+\\)[\\n\\s]*
               )*)
            \\))
        '''
        captures:
          "1":
            name: "keyword.control.brackets"
          "3":
            name: "variable.parameter.brackets"
        end: "(?=\\))"
        name: "meta.declaration.procedure.brackets"
        patterns: [
          {
            include: "#comment"
          }
          {
            include: "#constants"
          }
          {
            include: "#string"
          }
          {
            include: "#quote"
          }
          {
            include: "#sexp"
          }
          {
            include: "#illegal"
          }
        ]
      }
      {
        begin: '''(?xi)
          (?<=\\()
          (defstruct)\\s+
        '''
        captures:
          "1":
            name: "storage.type.structure.brackets"
        end: "(?=\\))"
        name: "meta.declaration.structure.brackets"
        patterns: [
          # extend this so it's proper...
          {
            include: "#comment"
          }
          {
            include: "#constants"
          }
          {
            include: "#string"
          }
          {
            include: "#quote"
          }
          {
            include: "#sexp"
          }
          {
            include: "#illegal"
          }
        ]
      }
      {
        begin: '''(?xi)
          (?<=\\()
          (def[\\S]*)\\s+
          ([\\S]*)\\s+
            (\\(\\s*
              ((
                [^()]+[\\n\\s]*|
                \\([^()\\s]+\\s+[^()\\s]+\\)[\\n\\s]*
               )*)
            \\))
        '''
        captures:
          "1":
            name: "keyword.control.brackets"
          "2":
            name: "entity.name.function.brackets"
          "4":
            name: "variable.parameter.brackets"
        end: "(?=\\))"
        name: "meta.declaration.procedure.brackets"
        patterns: [
          {
            include: "#comment"
          }
          {
            include: "#constants"
          }
          {
            include: "#string"
          }
          {
            include: "#quote"
          }
          {
            include: "#sexp"
          }
          {
            include: "#illegal"
          }
        ]
      }
      {
        include: "#sexp"
      }
    ]
  string:
    patterns: [
      {
        match: '#\\\\(Space|Backspace|Tab|Rubout|Linefeed|Return|Page|Newline|.)(?=\\s)'
        name: "string.character.brackets"
      }
      {
        begin: "(\")"
        # beginCaptures:
        #   "1":
        #     name: "punctuation.definition.string.begin.brackets"
        end: "(\")"
        # endCaptures:
        #   "1":
        #     name: "punctuation.definition.string.end.brackets"
        name: "string.quoted.double.brackets"
        patterns: [
          {
            match: "\\\\."
            name: "constant.character.escape.brackets"
          }
        ]
      }
    ]
