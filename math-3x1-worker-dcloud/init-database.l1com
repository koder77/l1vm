// init-database.l1com
// init l1vmgodata math 3x1 database
//
#include <intr.l1h>
#include <vars.l1h>
(main func)
	(set const-int64 1 zero 0)
	(set const-int64 1 one 1)
    (set const-int64 1 two 2)
	(set const-int64 1 mod_string 0)
	(set const-int64 1 mod_net 1)
	(set int64 1 socket_handle 0)
    (set int64 1 max_num 1000)
    (set int64 1 i 1)
    // use localhost for both servers
	(set string 256 ip "127.0.0.1")
    (set string 256 ip_2 "127.0.0.1")
    (set int64 1 port_one 2000)
    (set int64 1 port_two 2001)
    (set string 256 hoststr)
    (set int64 1 ip_len 10)
	(set int64 1 f 0)
	(set int64 1 ret 0)
	(set string s key_start_str "num")
    (set string 4097 key_str "")
    (set string 4097 value_str "")
    (set string 4097 num_str "")
    (set int64 1 string_len 4096)
	(set string 256 worker_id_str "")
//	(set string s worker_env_str "L1VMWORKERID")
	(set string 4097 ret_str "")
	(set string s netinitstr "error: can't init networking sockets!")
    (set string s addressstr "error can't get host address!")
    (set string s connectstr "error: can't connect to servers!")
    (set string s storestr "error can't store data in data base!")
    (set string s dataokstr "data read OK!")
    (set string s ok_str "OK")
    (set string s error_str "ERROR")
    (set string s sending_str "sending: ")

	(mod_string :string_init !)
	(mod_net two :net_init !)
	(ret stpopi)
	(((ret zero !=) f =) f if)
		// ERROR can't allocate memory
        print_s (netinitstr)
        print_n
        exit (one)
	(endif)

    // connect to l11vmgodata servers
    (ip_2 port_two ip port_one two :dcloud_init !)
    (ret stpop)
    (((ret zero !=) f =) f if)
        print_s (connectstr)
        print_n
        exit (one)
    (endif)

    // send key and value to server
    (for-loop)
    (((i max_num <=) f =) f for)
        print_s (sending_str)
        print_i (i)
        print_n

        // generate the key and value strings
        // key
        (key_str key_start_str :string_copy !)
        (i num_str string_len :string_int64tostring !)
        (key_str num_str :string_cat !)

        // value
        (value_str num_str :string_copy !)

        // send key and value to l1vmgodata server
        (key_str value_str ret_str :dcloud_data_store !)
        (ret stpopi)
        (((ret zero !=) f =) f if)
		    // ERROR can't connect to server
            print_s (storestr)
            print_n
            // close data base connection
            (:dcloud_close !)
            exit (one)
	    (endif)
        (ret_str error_str :string_compare !)
        (ret stpop)
        (((ret zero ==) f =) f if)
            print_s (storestr)
            print_n
            // close data base connection
            (:dcloud_close !)

            exit (one)
        (endif)
        ((i one +) i =)
    (next)

    // close data base connection
    (:dcloud_close !)
	exit (zero)
(funcend)
#include <net-lib.l1h>
#include <string.l1h>
#include <l1vmgodata.l1h>
#include <datacloud.l1h>
