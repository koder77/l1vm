// 3x1-run.l1com
// run program as set by worker id in database
//
// Example:
// start the two l1vmgodata databases as in the README.
// set job: go to "http://127.0.0.1:10001/" in your browser
// now type in: command: "store data", key: "worker-1", value: "ls -la".
// start this program in a shell: "l1vm 3x1-run -args worker-1"
// now the worker should run the "ls" command in it's directory!
// This is just a simple example. You can use this runner to start L1VM worker programs by
// setting the commands in the database!
//
#include <intr.l1h>
#include <math-const.l1h>
#include <misc-macros.l1h>
#include <vars.l1h>
(main func)
	(set const-int64 1 zero 0)
	(set const-int64 1 one 1)
    (set const-int64 1 two 2)
    (set const-int64 1 three 3)
    (set int64 1 num 1)
    (set int64 1 res_step 0)
    (set int64 1 maxnum 1000)
    (set int64 1 result 0)
	(set const-int64 1 mod_string 0)
	(set const-int64 1 mod_net 1)
    (set const-int64 1 mod_math 2)
    (set const-int64 1 mod_process 3)
	(set int64 1 socket_handle 0)
    (set int64 1 work 1)
	(set string 256 ip "127.0.0.1")
    (set string 256 ip_2 "127.0.0.1")
    (set int64 1 port_one 2000)
    (set int64 1 port_two 2001)
    (set string 256 hoststr)
    (set int64 1 ip_len 10)
	(set int64 1 f 0)
	(set int64 1 ret 0)
    (set string 4097 worker_name_str "")
    (set string 4097 process_str "")
    (set int64 1 string_len 4096)
	(set string 4097 ret_str "")
	(set string s netinitstr "error: can't init networking sockets!")
    (set string s addressstr "error can't get host address!")
    (set string s connectstr "error: can't connect to server!")
    (set string s storestr "error can't get data from data base!")
    (set string s dataokstr "data read OK!")
    (set string s ok_str "OK")
    (set string s error_str "ERROR")
    (set string s receiving_str "receiving ")
    (set string s calc_str "calculated number: ")
    (set string s colon_str " : ")
    (set string s one_str "1")
    (set string s empty_str "")
    (set string s prompt_str "number? (empty input to end) ")
    (set string s no_job_found_str "no job found!")
    (set string s error_cli_args_str "ERROR no worker id set as cli argument!")
    (set int64 1 delay_3_sec 3000)
    (set int64 1 value 0)
    (set int64 1 cli_args 0)

    // check cli args
    get_shell_args (cli_args)
    (((cli_args one !=) f =) f if)
        print_s (error_cli_args_str)
        print_n
        exit (one)
    (endif)

    (mod_string :string_init !)
	(mod_net two :net_init !)
	(ret stpopi)
	(((ret zero !=) f =) f if)
		// ERROR can't allocate memory
        print_s (netinitstr)
        print_n
        exit (one)
	(endif)

    (mod_math :math_init !)
    (mod_process :process_init call)

    get_shell_arg (zero, worker_name_str)

    // connect to l1vmgodata servers
    (ip_2 port_two ip port_one two :dcloud_init !)
    (ret stpop)
    (((ret zero !=) f =) f if)
        print_s (connectstr)
        print_n
        exit (one)
    (endif)

    // check if job for our worker is in  database

    (:loop)
        // send worker num key and get value from l1vmgodata server
        (worker_name_str process_str :dcloud_data_remove !)
        (ret stpop)
        (((ret zero !=) f =) f if)
		    // ERROR can't connect to server
            print_s (storestr)
            print_n

            // close data base connection
            (:dcloud_close !)

            exit (one)
	    (endif)

        // check if no value found ERROR return
        (process_str error_str :string_compare !)
        (ret stpop)
        (((ret zero !=) f =) f if+)
            // start process
            (process_str :run_shell call)
        (else)
             print_s (no_job_found_str)
             print_n
        (endif)

        /// wait 3 secs
        detime (delay_3_sec)
    (:loop jmp)
	exit (zero)
(funcend)

#include <net-lib.l1h>
#include <string.l1h>
#include <l1vmgodata.l1h>
#include <datacloud.l1h>
#include <math-lib.l1h>
#include <process-lib.l1h>
