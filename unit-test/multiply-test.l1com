// multiply-test.l1com
//
//
#include <intr.l1h>
#include <bool.l1h>
(main func)
    (set int64 1 zero 0)
    (set int64 1 one 1)
    (set int64 1 x1 5)
    (set int64 1 y1 3)
    (set int64 1 ret1 15)
    (set int64 1 x2 -5)
    (set int64 1 y2 3)
    (set int64 1 ret2 -15)
    (set int64 1 ret 0)
    (set bool 1 Btest_ok 1)
    (set int64 1 f 0)
    (set int64 1 retcode 0)
    (set string s test_passstr "tests passed: all ok!")
    (set string s test_failstr "tests failed!")
    // run tests

    // test 1
    (x1 y1 :multiply !)
    (ret stpop)

    print_i (ret)
    print_n

    (((ret ret1 !=) f =) f if)
         (false Btest_ok =)
    (endif)

    // test 2
    (x2 y2 :multiply !)
    (ret stpop)

    print_i (ret)
    print_n

    (((ret ret2 !=) f =) f if)
         (false Btest_ok =)
    (endif)

    // check
    (((Btest_ok false ==) f =) f if+)
        print_s (test_failstr)
        (one retcode =)
    (else)
        print_s (test_passstr)
        (zero retcode =)
    (endif)
    print_n
    exit (retcode)
(funcend)
#include <multiply.l1h>
